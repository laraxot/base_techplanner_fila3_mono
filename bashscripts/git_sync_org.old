#!/bin/bash
set -euo pipefail

# Funzione per la gestione dei colori
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Funzioni per i log
function log_info() {
    echo -e "${GREEN}[INFO] $1${NC}"
}

function log_warning() {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

function log_error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

# Verifica dipendenze necessarie
check_dependencies() {
    local missing_deps=0
    for cmd in curl jq ollama git sed tr; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            log_error "Comando richiesto non trovato: $cmd"
            missing_deps=1
        fi
    done
    if [ $missing_deps -eq 1 ]; then
        log_error "Installa le dipendenze mancanti e riprova"
        exit 1
    fi
    return 0
}

# Verifica che Ollama sia in esecuzione
check_ollama() {
    if ! curl -s "http://localhost:11434/api/tags" >/dev/null 2>&1; then
        log_error "Ollama non è in esecuzione sulla porta 11434"
        exit 1
    fi
    
    # Verifica che il modello codellama:7b sia disponibile
    if ! curl -s "http://localhost:11434/api/tags" | jq -e '.models[] | select(.name=="codellama:7b")' >/dev/null 2>&1; then
        log_error "Modello codellama:7b non trovato. Esegui: ollama pull codellama:7b"
        exit 1
    fi
    return 0
}

# Funzione per risolvere i conflitti usando Ollama
resolve_conflict() {
    local file=$1
    if [ ! -f "$file" ]; then
        log_error "File non trovato: $file"
        return 1
    fi
    
    local conflict_content=$(cat "$file")
    
    # Verifica che il file contenga effettivamente dei conflitti
    if ! echo "$conflict_content" | grep -q '^<<<<<<< HEAD'; then
        log_error "Nessun conflitto trovato in: $file"
        return 1
    fi
    
    # Estrai le sezioni di conflitto
    local our_changes=$(echo "$conflict_content" | sed -n '/^<<<<<<< HEAD/,/^=======/p' | sed '/^<<<<<<< HEAD/d;/^=======/d')
    local their_changes=$(echo "$conflict_content" | sed -n '/^=======/,/^>>>>>>>/p' | sed '/^=======/d;/^>>>>>>>/d')
    
    # Prepara il prompt per Ollama
    local file_ext=${file##*.}
    local prompt="Risolvi questo conflitto Git in un file ${file_ext}.

Contesto: Il file è ${file##*/}

Codice nostro (HEAD):
$our_changes

Codice loro:
$their_changes

Fornisci SOLO il codice risolto nel linguaggio ${file_ext}, senza commenti o spiegazioni."
    
    # Chiama Ollama per risolvere il conflitto
    local resolved_content=$(curl -s -X POST http://localhost:11434/api/generate \
        -H "Content-Type: application/json" \
        -d "{\"model\":\"codellama:7b\",\"prompt\":\"$prompt\"}" | \
        jq -r '.response' | tr -d '\\n')
    
    echo "$resolved_content" > "$file"
    git add "$file"
    
    log_info "Conflitto risolto per $file usando Ollama"
    return 0
}

# Funzione per sincronizzare un singolo repository
sync_repository() {
    local WHERE=$1
    local NEW_ORG=$2
    local BRANCH=$3
    
    cd "$WHERE" || return 1
    
    log_info "=== Sincronizzazione repository: $(basename "$WHERE") ==="
    
    # Gestione remote
    ORIGINAL_REMOTE=$(git config --get remote.origin.url)
    REPO_NAME=$(basename "$ORIGINAL_REMOTE" .git)
    NEW_REMOTE="git@github.com:$NEW_ORG/$REPO_NAME.git"
    
    log_info "Remote originale: $ORIGINAL_REMOTE"
    log_info "Nuovo remote: $NEW_REMOTE"
    
    # Verifica se il repository esiste nella nuova organizzazione
    if ! git ls-remote --exit-code "$NEW_REMOTE" >/dev/null 2>&1; then
        log_warning "Repository $REPO_NAME non trovato in $NEW_ORG, passo al successivo"
        return 0
    fi
    
    # Fetch da entrambi i remote
    git fetch origin
    
    # Gestione remote
    git remote remove github 2>/dev/null || true
    git remote add github "$NEW_REMOTE"
    git fetch github
    
    # Gestione branch
    if git rev-parse --verify "origin/$BRANCH" >/dev/null 2>&1; then
        # Il branch esiste nel remote originale
        if ! git checkout "$BRANCH" 2>/dev/null; then
            if ! git checkout -b "$BRANCH" "origin/$BRANCH"; then
                # Se il checkout fallisce, prova a risolvere il detached HEAD
                current_commit=$(git rev-parse HEAD)
                git checkout -b "temp_$BRANCH"
                git branch -D "$BRANCH" 2>/dev/null || true
                git checkout -b "$BRANCH" "origin/$BRANCH"
                git cherry-pick "$current_commit"
                git branch -D "temp_$BRANCH"
            fi
        fi
    else
        # Il branch non esiste nel remote originale, prova a crearlo
        if ! git checkout -b "$BRANCH" 2>/dev/null; then
            if ! git checkout "$BRANCH" 2>/dev/null; then
                log_error "Impossibile creare il branch $BRANCH"
                return 1
            fi
        fi
    fi
    
    # Backup modifiche locali
    git stash push -m "Backup pre-sync $(date '+%Y-%m-%d %H:%M:%S')" || true
    
    # Merge dal nuovo remote se il branch esiste
    if git rev-parse --verify "github/$BRANCH" >/dev/null 2>&1; then
        log_info "Merge dal nuovo remote..."
        if ! git merge "github/$BRANCH" --no-commit; then
            # Se ci sono conflitti, prova a risolverli
            conflict_files=$(git diff --name-only --diff-filter=U)
            
            if [ -n "$conflict_files" ]; then
                log_info "Trovati conflitti, utilizzo Ollama per risolverli automaticamente"
                
                for file in $conflict_files; do
                    if resolve_conflict "$file"; then
                        log_info "✓ Conflitto risolto per $file"
                    else
                        log_error "✗ Impossibile risolvere il conflitto per $file"
                        git merge --abort
                        git stash pop || true
                        return 1
                    fi
                done
                
                # Commit del merge con i conflitti risolti
                git commit -m "Merge branch '$BRANCH' da $NEW_ORG con risoluzione conflitti automatica"
            fi
        else
            # Se non ci sono conflitti, committa il merge
            git commit -m "Merge branch '$BRANCH' da $NEW_ORG"
        fi
    fi
    
    # Push al nuovo remote
    log_info "Push al nuovo remote..."
    if git push -u github "$BRANCH"; then
        log_info "Push completato con successo"
    else
        log_error "Push fallito - potrebbero esserci altri cambiamenti da integrare"
        return 1
    fi
    
    # Recupero modifiche locali
    git stash pop || true
    
    log_info "=== Sincronizzazione completata per: $(basename "$WHERE") ==="
    return 0
}

# Controllo parametri
if [ -z "${1:-}" ] || [ -z "${2:-}" ]; then
    log_error "Specificare organizzazione e branch."
    echo "Uso: $0 <nuova-organizzazione> <branch>"
    exit 1
fi

NEW_ORG=$1
BRANCH=$2
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
MAIN_REPO=$(pwd)

# Controllo se siamo in una repo Git
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_error "Questo script deve essere eseguito all'interno di una repository Git!"
    exit 1
fi

# Verifica dipendenze e Ollama
log_info "Verifica dipendenze..."
check_dependencies
log_info "Verifica Ollama..."
check_ollama

# Sincronizza il repository principale
sync_repository "$MAIN_REPO" "$NEW_ORG" "$BRANCH"

# Inizializza e aggiorna i submoduli
log_info "Inizializzazione submodules..."
git submodule init
git submodule update --recursive --init

# Ottieni la lista dei submodules con i loro percorsi completi
while IFS= read -r submodule_path; do
    if [ -n "$submodule_path" ]; then
        log_info "Processando submodule: $submodule_path"
        # Entra nel submodule e sincronizza
        if [ -d "$MAIN_REPO/$submodule_path" ]; then
            (
                cd "$MAIN_REPO/$submodule_path" || exit 1
                sync_repository "$MAIN_REPO/$submodule_path" "$NEW_ORG" "$BRANCH"
            )
        else
            log_warning "Submodule $submodule_path non trovato, salto"
        fi
    fi
done < <(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')

log_info "========= SINCRONIZZAZIONE COMPLETATA ==========="
