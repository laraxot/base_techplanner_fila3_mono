Please remember ___ @Memory . - Usare traduzioni in lang/{locale} - Convenzione naming chiavi: modulo::risorsa.fields.campo.label ## Frontend - Frontoffice usa Folio+Volt+Livewire+Widget - Niente rotte in web.php - Template in Themes/{Theme}/resources/views/pages/ - Widget devono estendere XotBaseWidget con HasForms - Non estendere direttamente classi Filament ## Componenti UI - Usare sempre componenti nativi Filament: - x-filament::icon - x-filament::button - x-filament::dropdown - x-filament::avatar - MAI utilizzare componenti inesistenti - Per separatori nei dropdown: div class="border-t border-gray-200 dark:border-gray-700 my-1" ## Volt e Folio - La direttiva @volt deve essere SEMPRE la prima cosa nel file Folio - NON utilizzare @volt all'interno del markup HTML - Utilizzare SEMPRE i layout corretti: - <x-layouts.app> - <x-layouts.guest> - MAI utilizzare layout inesistenti ## Localizzazione - Usare mcamara/laravel-localization - Metodi: LaravelLocalization::getCurrentLocale() e getSupportedLocales() - URL devono includere prefisso lingua: /{locale}/{sezione}/{risorsa} ## Routing e Controller - MAI creare rotte in web.php - Filament e Folio gestiscono automaticamente le rotte - MAI creare controller personalizzati ## Business Logic - Usare SEMPRE spatie/laravel-queueable-action (mai Service) - Componenti Livewire in app/Http/Livewire del modulo - Namespace NON deve includere 'app' - Actions nella directory corretta secondo convenzioni ## Sezioni e Blocchi - Documentazione tecnica in: - Themes/{Theme}/docs/sections - Modules/Cms/docs/sections - Link bidirezionali tra le due - JSON configurazione sezioni: - Ogni blocco deve avere attributo "view" - Blocchi raggruppati per locale - Filtrare con app()->getLocale() ## Struttura Directory - Provider in app/Providers/ - Percorso pubblico in public_html/ (non in public di Laravel) ## Vite Config In vite.config.js dei temi: emptyOutDir: false, manifest: 'manifest.json', build: { outDir: './public' } ## Best Practices - Usare Modules\Xot\Contracts\UserContract - Ottenere classe User con XotData::make()->getUserClass() - Documentare decisioni architetturali - Enfatizzare il "perché" non solo il "come" - Aggiornare documentazione con ogni modifica - Mantenere coerenza codice-docs - Documentare breaking changes - Ottimizzare per: - Accessibilità - Sicurezza - Prestazioni ## Configurazione IDE Prima di implementare correzioni: 1. Regole in .windsurf/rules/*.md per Windsurf 2. Regole in .cursor/rules/*.md per Cursor 3. Memorie in .cursor/memories/*.md per Cursor ## Validazione dei Percorsi - Verificare percorsi relativi - Rimuovere riferimenti al nome del progetto - Assicurare compatibilità cross-platform - Mantenere coerenza struttura directory - Usare validatori markdown - Implementare pre-commit hooks ## Correzione Errori Ordine di aggiornamento: 1. Documentazione nel modulo 2. Collegamenti bidirezionali nella root 3. Regole configurazione IDE 4. Codice effettivo ## Manutenzione Documentazione - File docs root solo collegamenti bidirezionali - Spostare documenti generici a Xot - Analizzare Modules come insieme coerente - Documentare prima nel modulo, poi con collegamenti - Concentrarsi su "perché" e "cosa" - Evitare dettagli implementativi - Usare cartella bashscripts più vicina - Documentare metodi mancanti - Gestire correttamente array in: - getListTableColumns - getTableActions - getTableBulkActions
Il sistema di documentazione è una struttura gerarchica modulare. Le cartelle docs dei moduli contengono la documentazione tecnica specializzata, mentre la cartella docs nella root del progetto serve solo come indice centrale con collegamenti bidirezionali. Prima di ogni intervento, analizza tutte le cartelle docs per comprendere l'architettura del progetto. PRIORITÀ: 1) Aggiorna prima la documentazione nei moduli appropriati 2) Poi aggiorna i collegamenti bidirezionali 3) Infine aggiorna le configurazioni degli editor. REGOLE FONDAMENTALI PER I PERCORSI: MAI UTILIZZARE PERCORSI ASSOLUTI nei link della documentazione. Usa SEMPRE PERCORSI RELATIVI. Dalla root usa percorsi come [Modulo Xot](./laravel/Modules/Xot/docs/README.md) con tag #modulo-{nomemodulo} #categoria-{nomecategoria}. Dai moduli usa percorsi come [Altro Modulo](../../../AltroModulo/docs/README.md) per collegamenti ad altri moduli e [Documentazione Root](../../../../docs/README.md) per collegamenti alla root. In caso di dubbio, calcola i livelli di directory da attraversare partendo dal file sorgente fino al file destinazione. DISTRIBUZIONE DOCUMENTI: Distribuisci i documenti per competenza: documentazione generica in Xot, specifiche progetto in root, frontend in Cms, componenti UI in UI, gestione utenti in User, multitenant in Tenant, traduzioni in Lang, media in Media, notifiche in Notify, reportistica in Reporting, conformità GDPR in Gdpr, job asincroni in Job, grafici in Chart. I collegamenti devono esistere nel file centrale ./docs/collegamenti-documentazione.md. CONVENZIONI CODICE: La struttura segue PSR-4 con namespace modulari: Modules\{Nome}\ (non Modules\{Nome}\app\). PHPStan è già installato, eseguilo con ./vendor/bin/phpstan, correggi segnalazioni documentando le soluzioni. FILAMENT RESOURCES: Evita override inutili in XotBaseResource: non ridefinire $navigationIcon, $navigationGroup, $navigationSort, né getNavigationLabel(), getPluralModelLabel(), getModelLabel(), getRelations() vuoti, getPages() standard o table(). Il metodo getFormSchema() deve usare array associativi con chiavi stringa. In XotBaseListRecords rimuovi getActions() se restituisce solo createAction(). TRADUZIONI: Non usare mai ->label() in Filament ma traduzioni in lang/{locale}. Segui la convenzione di naming per le chiavi di traduzione: modulo::risorsa.fields.campo.label. FRONTEND: Frontoffice usa Folio+Volt+Livewire+Widget, niente rotte in web.php, template in Themes/{Theme}/resources/views/pages/. Widget devono estendere XotBaseWidget con HasForms, non estendere direttamente classi Filament. COMPONENTI UI: Usa sempre componenti nativi Filament (x-filament::icon, x-filament::button, x-filament::dropdown, x-filament::avatar) per accessibilità, tema scuro e coerenza UI. MAI utilizzare componenti inesistenti come x-filament::dropdown.list.separator o x-filament::dropdown.list.divider; usa invece div con classe border-t. Per i separatori nei dropdown usa <div class="border-t border-gray-200 dark:border-gray-700 my-1"></div>. VOLT E FOLIO: La direttiva @volt deve essere SEMPRE la prima cosa nel file Folio. NON utilizzare @volt all'interno del markup HTML. Utilizza SEMPRE i layout corretti: <x-layouts.app> e <x-layouts.guest>. MAI utilizzare layout inesistenti come <x-filament::layouts.app>. LOCALIZZAZIONE: Per gestione multilingua usa mcamara/laravel-localization con LaravelLocalization::getCurrentLocale() e getSupportedLocales(). Tutti gli URL devono includere il prefisso della lingua come primo segmento del percorso: /{locale}/{sezione}/{risorsa}. ROUTING E CONTROLLER: MAI creare rotte aggiungendole in web.php. Filament e Folio gestiscono automaticamente le rotte. MAI creare controller personalizzati. BUSINESS LOGIC: Per la business logic asincrona e le azioni riutilizzabili usa SEMPRE spatie/laravel-queueable-action (mai Service). I componenti Livewire devono essere posizionati nella cartella app/Http/Livewire del modulo, ma il namespace NON deve includere il segmento 'app'. Le Actions devono essere posizionate nella directory corretta secondo le convenzioni del progetto. SEZIONI E BLOCCHI: Per le sezioni (header, footer) la documentazione tecnica deve esistere sia in Themes/{Theme}/docs/sections che in Modules/Cms/docs/sections, con link bidirezionali. Nei JSON di configurazione delle sezioni, ogni blocco definito deve includere un attributo "view" con il path completo della view Blade. I blocchi sono raggruppati per locale e devono essere filtrati con app()->getLocale(). STRUTTURA DIRECTORY: Il percorso corretto per Provider nei moduli è app/Providers/. Il percorso pubblico corretto è public_html/ nella root del progetto e NON nella cartella public di Laravel. VITE CONFIG: In vite.config.js dei temi, imposta emptyOutDir: false, manifest: 'manifest.json' e build.outDir a './public' (cartella pubblica del tema) e non alla cartella public del progetto root. BEST PRACTICES: Usa Modules\Xot\Contracts\UserContract invece di riferimenti diretti a Modules\User\Models\User. Per ottenere la classe User configurata usa XotData::make()->getUserClass(). Documenta decisioni architetturali e pattern, enfatizzando il "perché" e non solo il "come". Ogni modifica al codice deve essere accompagnata da aggiornamenti alla documentazione. Mantieni sempre coerenza tra codice e docs, retrocompatibilità quando possibile, documenta breaking changes. Ottimizza per accessibilità, sicurezza e prestazioni. CONFIGURAZIONE IDE: Prima di implementare correzioni, verifica e aggiorna: 1) le regole in .windsurf/rules/*.md per Windsurf 2) le regole in .cursor/rules/*.md per Cursor 3) le memorie in .cursor/memories/*.md per le memorie di Cursor. REGOLE PER I PERCORSI: MAI usare percorsi assoluti nei link della documentazione. MAI includere il nome del progetto nel percorso. Usare sempre percorsi relativi partendo dal livello corrente con ./ o salendo di livello con ../. Esempio corretto: [Documento](./docs/documento.md). Esempio errato: [Documento](percorso/assoluto/docs/documento.md). VALIDAZIONE DEI PERCORSI: Verificare che tutti i percorsi siano relativi. Rimuovere riferimenti al nome del progetto. Assicurarsi che i percorsi funzionino su tutti i sistemi operativi. Mantenere la coerenza nella struttura delle directory. Usare strumenti di validazione markdown. Implementare pre-commit hooks per prevenire errori. CORREZIONE ERRORI: Quando correggi un errore, aggiorna in quest'ordine: 1) Documentazione nel modulo appropriato 2) Collegamenti bidirezionali nella root 3) Regole nei file di configurazione IDE 4) Codice effettivo. MANUTENZIONE DELLA DOCUMENTAZIONE: I file docs della root progetto devono contenere solo collegamenti bidirezionali. Sposta documenti generici dalla root al modulo Xot. Analizza l'intero contenuto della cartella Modules come insieme coerente. Ogni modifica va documentata prima nel modulo, poi con collegamenti bidirezionali. Concentrati sul "perché" e sul "cosa" evitando dettagli implementativi. Per ogni script shell, usa la cartella bashscripts più vicina (mai crearne nuove). Se una funzionalità chiama -><nome>($metatag->get<Nome>()) e manca il metodo get<Nome>, documenta perché serve e poi implementalo nel modulo corretto. Le funzioni getTableColumns getTableActions e getTableBulkActions devono restituire array con chiavi stringa. Se getTableActions restituisce solo ViewAction EditAction e DeleteAction va rimosso del tutto, altrimenti deve includere ...parent::getTableActions(). Se getTableBulkActions restituisce solo DeleteBulkAction va rimosso, altrimenti deve includere ...parent::getTableBulkActions(). Devi sempre approfondire tutto.
