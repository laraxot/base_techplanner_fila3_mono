<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> 85c5198c (.)
<<<<<<< HEAD
=======
>>>>>>> 9de04485 (.)
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
>>>>>>> 574afe9e (.)

=======
<<<<<<< HEAD
>>>>>>> 9c02579 (.)
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 337c5266 (.)
=======
>>>>>>> 59901687 (.)
>>>>>>> 85c5198c (.)
=======
>>>>>>> 9de04485 (.)
# Guida Completa per Bug Fixing - Laraxot SaluteOra

## Principi Fondamentali

### Analisi Sistematica
- **Comprensione della causa radice**: Analisi approfondita del codice e del contesto
- **Approccio metodico**: Seguire sempre un processo sistematico di risoluzione
- **Integrità documentazione**: Mantenere la documentazione aggiornata durante tutto il processo
- **Rispetto dei confini**: Rispettare i confini e le responsabilità dei moduli
- **Aggiornamento continuo**: Aggiornare costantemente le cartelle docs come fonte primaria di memoria

## Processo di Documentazione

### Prima di Apportare Modifiche
1. **Studio della documentazione**: Analizzare la documentazione nella cartella `docs` del modulo (NON nella cartella `docs` della root)
2. **Collegamenti bidirezionali**: Creare collegamenti tra documentazione del modulo e documentazione root
3. **Aggiornamento preventivo**: Aggiornare la documentazione pertinente prima di implementare le correzioni
4. **Verifica duplicazioni**: Controllare che non esistano già file che trattano lo stesso argomento

### Struttura della Documentazione
- **Documentazione locale**: `Modules/<ModuleName>/docs/` per contenuti specifici del modulo
- **Documentazione root**: `/docs/` per panoramiche generali e collegamenti
- **File .mdc**: Posizionare in `.windsurf/rules/` e `.cursor/rules/` della root del progetto
- **Convenzioni naming**: Tutti i file e cartelle in `docs/` devono essere in minuscolo (eccetto `README.md`)

## Organizzazione del Codice

### Struttura Namespace
- **Corretto**: `Modules\<module>\` (NON `Modules\<module>\App\`)
- **Componenti Filament**: `Modules\<module>\Filament`
- **Estensioni**: Mai estendere classi Filament direttamente - utilizzare classi XotBase
- **ServiceProvider**: Estendere `Modules\Xot\Providers\XotBaseServiceProvider` invece di `Illuminate\Support\ServiceProvider`

### Regole per le Traduzioni
- **Mai utilizzare `->label()`**: Crea accoppiamento stretto e viola la separazione delle responsabilità
- **LangServiceProvider**: Utilizzare per tutte le traduzioni automatiche
- **Posizionamento**: Memorizzare traduzioni in `Modules/<module>/lang/<language>/`
- **Struttura espansa**: Seguire sempre la struttura di traduzione espansa
- **Placeholder file upload**: Deve indicare l'azione da compiere (es. "Carica Fattura") NON il contenuto

## Pattern di Correzione Comuni

### 1. Classi Resource
- **Rimuovere metodi vuoti**: `getTableColumn`, `getTableFilters`, `getBulkActions` se vuoti
- **Rimuovere `getPages`**: Se restituisce solo pagine di default
- **Array associativi**: Utilizzare array associativi con chiavi stringa per tutti i metodi
- **Implementare `getTableColumns()`**: Con chiavi stringa univoche

### 2. Gestione Form
- **Enum per type safety**: Convertire opzioni array in enum
- **Regole di validazione**: Utilizzare regole di validazione appropriate
- **Gestione errori**: Implementare gestione errori appropriata

### 3. ServiceProvider
- **Proprietà `$name`**: Dichiarare `public string $name = '<ModuleName>';` immediatamente dopo la dichiarazione della classe
- **Nessun docblock**: Non utilizzare docblock sopra questa proprietà
- **Visibilità public**: Mantenere per compatibilità con la classe base

## Strategia di Implementazione

### 1. Fase di Analisi
- **Contesto dell'errore**: Comprendere il contesto completo
- **Componenti correlati**: Controllare componenti correlati
- **Modifiche recenti**: Rivedere modifiche recenti
- **Classi estese**: Analizzare classi estese e traits correlati

### 2. Aggiornamento Documentazione
- **Documentazione modulo**: Aggiornare documentazione del modulo
- **Documentazione root**: Creare/aggiornare documentazione root
- **Collegamenti bidirezionali**: Aggiungere collegamenti bidirezionali
- **Coerenza**: Verificare coerenza con documentazione esistente

### 3. Implementazione
- **Principi DRY e KISS**: Seguire principi di codice pulito
- **Implicazioni architetturali**: Considerare implicazioni architetturali
- **Compatibilità**: Mantenere compatibilità all'indietro
- **Spatie Laravel Data**: Utilizzare per DTO
- **Spatie QueableActions**: Preferire invece di services tradizionali

### 4. Testing e Qualità
- **Test della correzione**: Testare la correzione implementata
- **Controllo regressioni**: Controllare regressioni
- **Aggiornamento test**: Aggiornare test se necessario
- **Test di regressione**: Scrivere test di regressione
- **Integrazione moduli**: Verificare integrazione con moduli interconnessi

## Controllo Qualità

### Standard di Codice
- **PHPStan**: Eseguire PHPStan (livello 10)
- **PSR-12**: Garantire conformità PSR-12
- **Type safety**: Verificare type safety
- **Sicurezza**: Controllare implicazioni di sicurezza
- **Strict types**: Utilizzare `declare(strict_types=1);` in tutti i file PHP

### Best Practices
- **Modifiche minime**: Mantenere modifiche minime e focalizzate
- **Documentazione decisioni**: Documentare decisioni e motivazioni
- **Performance**: Considerare implicazioni di performance
- **Principio sorpresa minima**: Seguire il principio della sorpresa minima
- **Type hints espliciti**: Utilizzare type hints espliciti e specifici
- **Evitare mixed**: Evitare l'uso di `mixed` quando possibile

## Errori Comuni da Evitare

### Anti-Pattern Architetturali
- **Estensioni dirette Filament**: Mai estendere direttamente classi Filament
- **Stringhe hardcoded**: Evitare stringhe e label hardcoded
- **Confini moduli**: Non ignorare confini dei moduli
- **Documentazione**: Non saltare aggiornamenti documentazione
- **ServiceProvider sbagliato**: Non utilizzare `Illuminate\Support\ServiceProvider`
- **Metodi `getHeaderActions`**: Che restituiscono solo `DeleteAction`

### Errori di Sintassi Comuni
- **Metodi fuori dalla classe**: ParseError per metodi dichiarati fuori dal blocco della classe
- **Parentesi graffa finale**: La chiusura della classe (`}`) deve essere l'ultima istruzione del file
- **Metodi orfani**: Controllare sempre che non restino metodi orfani dopo refactor

## Gestione ParseError Specifici

### Causa Tipica
Un errore `ParseError: syntax error, unexpected token "protected", expecting end of file` si verifica quando una funzione viene dichiarata **fuori dal blocco della classe**.

### Soluzione
1. **Spostare metodi**: Sempre all'interno della classe corretta
2. **Verificare chiusura**: La parentesi graffa di chiusura della classe sia l'ultima istruzione
3. **Eliminare se inutile**: Se il metodo non serve più, eliminarlo

### Esempio Corretto
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> 85c5198c (.)
<<<<<<< HEAD
=======
>>>>>>> 9de04485 (.)
# Linee Guida per il Bug Fixing e Best Practices

## Principi Fondamentali
- Analizzare sempre la causa radice attraverso un'analisi approfondita del codice e del contesto
- Seguire un approccio sistematico alla risoluzione dei bug
- Mantenere l'integrità della documentazione durante tutto il processo
- Rispettare i confini e le responsabilità dei moduli
- Aggiornare costantemente le cartelle docs come fonte primaria di memoria

## Processo di Documentazione
1. **Prima di Apportare Modifiche**
   - Studiare la documentazione nella cartella `docs` del modulo (NON nella cartella `docs` della root)
   - Creare collegamenti bidirezionali tra documentazione del modulo e documentazione root
   - Aggiornare la documentazione pertinente prima di implementare le correzioni
   - Verificare che non esistano già file che trattano lo stesso argomento

## Organizzazione del Codice
- **Struttura Namespace**:
  - Utilizzare `Modules\<module>\` (NON `Modules\<module>\App\`)
  - Componenti Filament: `Modules\<module>\Filament`
  - Mai estendere classi Filament direttamente - utilizzare classi XotBase
  - Estendere `Modules\Xot\Providers\XotBaseServiceProvider` invece di `Illuminate\Support\ServiceProvider`

## Linee Guida per le Traduzioni
- **Mai** utilizzare `->label()` direttamente
- Utilizzare il LangServiceProvider per tutte le traduzioni
- Memorizzare traduzioni in: `Modules/<module>/lang/<language>/`
- Seguire la struttura di traduzione espansa
- Per i campi di upload file, il placeholder deve indicare l'azione da compiere (es. "Carica Fattura") NON il contenuto

## Pattern di Correzione Comuni
1. **Classi Resource**:
   - Rimuovere `getTableColumn`, `getTableFilters`, `getBulkActions` se vuoti
   - Rimuovere `getPages` se restituisce solo pagine di default
   - Utilizzare array associativi con chiavi stringa per tutti i metodi
   - Implementare `getTableColumns()` con chiavi stringa univoche

2. **Gestione Form**:
   - Convertire opzioni array in enum per type safety
   - Utilizzare regole di validazione appropriate
   - Implementare gestione errori appropriata

3. **ServiceProvider**:
   - Dichiarare `public string $name = '<ModuleName>';` immediatamente dopo la dichiarazione della classe
   - Non utilizzare docblock sopra questa proprietà
   - Mantenere visibilità `public` per compatibilità con la classe base

## Strategia di Implementazione
1. **Fase di Analisi**:
   - Comprendere il contesto dell'errore
   - Controllare componenti correlati
   - Rivedere modifiche recenti
   - Analizzare classi estese e traits correlati

=======
=======
>>>>>>> 9c02579 (.)
<<<<<<< HEAD
=======
>>>>>>> 1420e3b683 (.)
>>>>>>> 574afe9e (.)
# Linee Guida per il Bug Fixing e Best Practices

## Principi Fondamentali
- Analizzare sempre la causa radice attraverso un'analisi approfondita del codice e del contesto
- Seguire un approccio sistematico alla risoluzione dei bug
- Mantenere l'integrità della documentazione durante tutto il processo
- Rispettare i confini e le responsabilità dei moduli
- Aggiornare costantemente le cartelle docs come fonte primaria di memoria

## Processo di Documentazione
1. **Prima di Apportare Modifiche**
   - Studiare la documentazione nella cartella `docs` del modulo (NON nella cartella `docs` della root)
   - Creare collegamenti bidirezionali tra documentazione del modulo e documentazione root
   - Aggiornare la documentazione pertinente prima di implementare le correzioni
   - Verificare che non esistano già file che trattano lo stesso argomento

## Organizzazione del Codice
- **Struttura Namespace**:
  - Utilizzare `Modules\<module>\` (NON `Modules\<module>\App\`)
  - Componenti Filament: `Modules\<module>\Filament`
  - Mai estendere classi Filament direttamente - utilizzare classi XotBase
  - Estendere `Modules\Xot\Providers\XotBaseServiceProvider` invece di `Illuminate\Support\ServiceProvider`

## Linee Guida per le Traduzioni
- **Mai** utilizzare `->label()` direttamente
- Utilizzare il LangServiceProvider per tutte le traduzioni
- Memorizzare traduzioni in: `Modules/<module>/lang/<language>/`
- Seguire la struttura di traduzione espansa
- Per i campi di upload file, il placeholder deve indicare l'azione da compiere (es. "Carica Fattura") NON il contenuto

## Pattern di Correzione Comuni
1. **Classi Resource**:
   - Rimuovere `getTableColumn`, `getTableFilters`, `getBulkActions` se vuoti
   - Rimuovere `getPages` se restituisce solo pagine di default
   - Utilizzare array associativi con chiavi stringa per tutti i metodi
   - Implementare `getTableColumns()` con chiavi stringa univoche

2. **Gestione Form**:
   - Convertire opzioni array in enum per type safety
   - Utilizzare regole di validazione appropriate
   - Implementare gestione errori appropriata

3. **ServiceProvider**:
   - Dichiarare `public string $name = '<ModuleName>';` immediatamente dopo la dichiarazione della classe
   - Non utilizzare docblock sopra questa proprietà
   - Mantenere visibilità `public` per compatibilità con la classe base

## Strategia di Implementazione
1. **Fase di Analisi**:
   - Comprendere il contesto dell'errore
   - Controllare componenti correlati
   - Rivedere modifiche recenti
   - Analizzare classi estese e traits correlati

2. **Aggiornamento Documentazione**:
   - Aggiornare documentazione del modulo
   - Creare/aggiornare documentazione root
   - Aggiungere collegamenti bidirezionali
   - Verificare coerenza con documentazione esistente

3. **Implementazione**:
   - Seguire principi DRY e KISS
   - Considerare implicazioni architetturali
   - Mantenere compatibilità all'indietro
   - Utilizzare Spatie Laravel Data per DTO
   - Preferire Spatie QueableActions invece di services tradizionali

4. **Testing**:
   - Testare la correzione
   - Controllare regressioni
   - Aggiornare test se necessario
   - Scrivere test di regressione
   - Verificare integrazione con moduli interconnessi

## Controllo Qualità
- Eseguire PHPStan (livello 10)
- Garantire conformità PSR-12
- Verificare type safety
- Controllare implicazioni di sicurezza
- Utilizzare `declare(strict_types=1);` in tutti i file PHP

## Best Practices
- Mantenere modifiche minime e focalizzate
- Documentare decisioni e motivazioni
- Considerare implicazioni di performance
- Seguire il principio della sorpresa minima
- Utilizzare type hints espliciti e specifici
- Evitare l'uso di `mixed` quando possibile

## Errori Comuni da Evitare
- Estensioni dirette di classi Filament
- Stringhe e label hardcoded
- Ignorare confini dei moduli
- Saltare aggiornamenti documentazione
- Utilizzare `Illuminate\Support\ServiceProvider` invece di `XotBaseServiceProvider`
- Metodi `getHeaderActions` che restituiscono solo `DeleteAction`

## Processo di Revisione
- Auto-revisione delle modifiche
- Controllare problemi simili nel codebase
- Aggiornare documentazione pertinente
- Considerare creazione test automatizzati
- Categorizzare sistematicamente i bugfix

## Gestione ParseError: Metodi Fuori dalla Classe in PHP

### Causa
Un errore di tipo `ParseError: syntax error, unexpected token "protected", expecting end of file` si verifica quando una funzione (es. `protected function getUserTypeOptions()`) viene dichiarata **fuori dal blocco della classe**. Questo accade spesso dopo una parentesi graffa di chiusura `}` della classe, lasciando il metodo "orfano".

### Soluzione
- Spostare sempre i metodi all'interno della classe corretta
- Verificare che la parentesi graffa di chiusura della classe sia l'ultima istruzione del file
- Se il metodo non serve più, eliminarlo

### Best Practice
- Ogni funzione/membro deve essere dichiarato **all'interno** della classe
- La chiusura della classe (`}`) deve essere l'ultima istruzione del file
- Dopo ogni refactor, controllare che non restino metodi orfani
- Utilizzare sempre editor con linting attivo per prevenire errori di sintassi

### Esempio (Corretto)
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 3c18aa7e (.)
>>>>>>> 9c02579 (.)
=======
<<<<<<< HEAD
=======
>>>>>>> 3c18aa7e (.)
>>>>>>> 9c02579 (.)
>>>>>>> 1420e3b683 (.)
>>>>>>> 574afe9e (.)
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 337c5266 (.)
=======
>>>>>>> 59901687 (.)
>>>>>>> 85c5198c (.)
=======
>>>>>>> 9de04485 (.)
```php
class Example {
    public function foo() {}
    // ...
} // <--- questa DEVE essere l'ultima parentesi graffa
```

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> 85c5198c (.)
<<<<<<< HEAD
=======
>>>>>>> 9de04485 (.)
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
>>>>>>> 574afe9e (.)
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 337c5266 (.)
=======
>>>>>>> 59901687 (.)
>>>>>>> 85c5198c (.)
=======
>>>>>>> 9de04485 (.)
## Processo di Revisione

### Auto-Revisione
- **Revisione modifiche**: Auto-revisione delle modifiche
- **Problemi simili**: Controllare problemi simili nel codebase
- **Documentazione**: Aggiornare documentazione pertinente
- **Test automatizzati**: Considerare creazione test automatizzati
- **Categorizzazione**: Categorizzare sistematicamente i bugfix

### Gestione Post-Fix
- **Test di regressione**: Implementare test di regressione
- **Moduli interconnessi**: Verificare impatti su moduli interconnessi
- **Pattern documentation**: Documentare pattern e anti-pattern identificati
- **Contesto completo**: Registrare contesto completo del bug
- **Commit standardizzati**: Utilizzare formato `fix(modulo): breve descrizione`

## Filosofia e Principi

### Approccio Olistico
- **Filosofia**: "Il codice pulito riflette una mente ordinata"
- **Politica**: "Ogni decisione tecnica ha implicazioni architetturali"
- **Religione**: "La coerenza del codice è sacra"
- **Zen**: "Semplicità e funzionalità in equilibrio perfetto"

### Principi di Sostenibilità
- **Debito tecnico**: Prevenire accumulo di debito tecnico
- **Longevità**: Progettare per la longevità del codice
- **Manutenibilità**: Prioritizzare la manutenibilità
- **Trasparenza**: Documentare ogni decisione importante

## Aggiornamento Continuo

### Sistema di Apprendimento
- **Regole personali**: Aggiornare `.windsurf/rules`, `.cursor/rules`, `.cursor/memories`
- **Knowledge base**: Creare sistema di intelligenza artificiale personale
- **Prevenzione errori**: Implementare sistema di prevenzione errori
- **Accumulo conoscenza**: Accumulare conoscenza procedurale

### Categorizzazione Sistematica
- **Aree problematiche**: Identificare aree problematiche nel tempo
- **Pattern ricorrenti**: Riconoscere pattern ricorrenti
- **Opportunità refactoring**: Identificare opportunità di refactoring
- **Miglioramento continuo**: Utilizzare informazioni per miglioramento continuo

---

*Ultimo aggiornamento: 2025-08-04*
*Versione: 2.0*
*Compatibilità: Laraxot SaluteOra, PHP 8.2+, Laravel 12+, Filament 3.4+*
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> 85c5198c (.)
<<<<<<< HEAD
=======
=======
>>>>>>> 9de04485 (.)
=======
>>>>>>> 9c02579 (.)
<<<<<<< HEAD
=======
>>>>>>> 1420e3b683 (.)
>>>>>>> 574afe9e (.)
### Caso Reale
- Errore su `Modules/User/app/Filament/Widgets/Auth/RegisterWidget.php` risolto spostando la funzione orfana all'interno della classe o eliminandola se non più necessaria

### Filosofia
- La coerenza strutturale del codice è fondamentale per la manutenibilità e la prevenzione di bug sistemici
- Ogni correzione va documentata nella cartella docs più vicina e nel knowledge base dei bugfix

## Gestione Errori Specifici del Progetto

### Errori di Namespace
- **Problema**: Utilizzo di `Modules\<module>\App\` invece di `Modules\<module>\`
- **Soluzione**: Correggere sempre i namespace per mantenere struttura modulare pulita
- **Prevenzione**: Verificare namespace prima di ogni commit

### Errori di Traduzione
- **Problema**: Utilizzo di `->label()` invece di file di traduzione
- **Soluzione**: Utilizzare sempre `Modules/<module>/lang/<language>/`
- **Prevenzione**: Implementare controlli automatici nel CI/CD

### Errori di Estensione Classi
- **Problema**: Estensione diretta di classi Filament
- **Soluzione**: Utilizzare sempre classi XotBase
- **Prevenzione**: Configurare PHPStan per rilevare estensioni dirette

## Registrazione e Tracciamento

### Commit Messages
- Utilizzare formato standardizzato: `fix(modulo): breve descrizione del problema risolto`
- Mantenere tracciabilità per generazione automatica changelog

### Documentazione Bugfix
- Registrare contesto completo (versione dipendenze, ambiente, condizioni trigger)
- Includere stack trace completo e scenario utente
- Documentare pattern e anti-pattern identificati

### Aggiornamento Memorie
- Aggiornare costantemente regole personali e memorie
- File da aggiornare: `.windsurf/rules`, `.cursor/rules`, `.cursor/memories`
- Creare sistema di intelligenza artificiale personale che apprende dall'esperienza

## Prevenzione Errori Futuri

### Analisi Sistematica
- Analizzare sempre classi estese e traits correlati
- Tracciare dipendenze e identificare punti di fallimento
- Considerare accoppiamento eccessivo

### Miglioramento Continuo
- Categorizzare bugfix per identificare aree problematiche
- Utilizzare informazioni per migliorare architettura
- Creare valore educativo per il team

### Controlli Automatici
- Non modificare mai `phpstan.neon`
- Scrivere codice per superare massimo livello controllo statico
- Utilizzare union types, generics e type hints specifici

## Filosofia del Bug Fixing

### Approccio Olistico
- Considerare implicazioni filosofiche, politiche, religiose e zen
- Comprendere logica di business e architettura sistemica
- Mantenere equilibrio tra semplicità e funzionalità

### Principi Etici
- Trasparenza nelle decisioni tecniche
- Responsabilità verso la comunità di sviluppo
- Sostenibilità del codice nel tempo

### Sostenibilità
- Prevenire debito tecnico
- Considerare costi nascosti
- Mantenere longevità del codice
- Rispettare principi di economia circolare del software
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 3c18aa7e (.)
>>>>>>> 9c02579 (.)
=======
<<<<<<< HEAD
=======
>>>>>>> 3c18aa7e (.)
>>>>>>> 9c02579 (.)
>>>>>>> 1420e3b683 (.)
>>>>>>> 574afe9e (.)
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 337c5266 (.)
=======
>>>>>>> 59901687 (.)
>>>>>>> 85c5198c (.)
=======
>>>>>>> 9de04485 (.)
