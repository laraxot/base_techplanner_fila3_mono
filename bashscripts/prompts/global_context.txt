# Contesto Globale Base <nome progetto> ## Architettura Modulare - Directory Base: laravel/Modules/ - Ogni modulo segue la stessa struttura e pattern - Modulo Xot fornisce le classi base per tutti gli altri moduli ## Moduli Principali ### 1. Xot (Core) - Fornisce tutte le classi base (XotBase*) - Gestisce la configurazione globale - Implementa i pattern fondamentali - Directory: laravel/Modules/Xot ### 2. UI - Gestisce componenti interfaccia - Estende Filament con componenti custom - Implementa temi e layout - Directory: laravel/Modules/UI ### 3. User - Gestione utenti e autenticazione - Ruoli e permessi (Spatie) - Profili utente - Directory: laravel/Modules/User ### 4. Tenant - Gestione multi-tenant - Configurazioni per tenant - Isolamento dati - Directory: laravel/Modules/Tenant ### 5. Notify - Sistema di notifiche - Template e-mail - Gestione canali - Directory: laravel/Modules/Notify ### 6. Patient - Gestione pazienti - Cartelle cliniche - Appuntamenti - Directory: laravel/Modules/Patient ## Regole Fondamentali (Per TUTTI i Moduli) ### 1. Modelli - ❌ MAI estendere Model direttamente - ✅ Estendere BaseModel del proprio modulo - BaseModel deve essere nello stesso namespace dei modelli - Usare casts() invece di  per ereditare configurazioni ### 2. Resources Filament - ❌ MAI estendere classi Filament direttamente - ✅ Estendere classi XotBase* corrispondenti - Implementare getFormSchema() invece di form() - Implementare getTableColumns() invece di table() ### 3. Service Providers - ❌ MAI estendere ServiceProvider direttamente - ✅ Estendere XotBaseServiceProvider - Proprietà  DEVE essere public - Non reimplementare funzionalità di XotBaseServiceProvider ### 4. Traduzioni - Gestite tramite LangServiceProvider - Struttura: 'field' => ['label' => 'Label', 'placeholder' => '...'] - ❌ MAI usare ->label() direttamente nei form - File di traduzione per ogni modulo ### 5. Documentazione - Ogni modulo DEVE avere la sua cartella docs/ - Collegamenti bidirezionali tra docs - Documentare OGNI modifica importante - Best practices e anti-patterns per modulo ### 6. Namespace - Modules\{ModuleName} per ogni modulo - Models nello stesso namespace del BaseModel - Filament\Resources in namespace dedicato - Providers in namespace dedicato ## Pattern Comuni ### 1. Ereditarietà XotBaseModel -> ModuleBaseModel -> ConcreteModel XotBaseResource -> ConcreteResource XotBaseServiceProvider -> ModuleServiceProvider ### 2. Directory Structure Modules/ ModuleName/ app/ Models/ BaseModel.php Filament/ Resources/ Providers/ docs/ config/ resources/ lang/ routes/ ### 3. Configurazione - config/ per ogni modulo - Pubblicabile via ServiceProvider - Override per tenant supportato - Documentazione in docs/ ## TODO Globale - [ ] Verificare tutte le estensioni in tutti i moduli - [ ] Completare documentazione per ogni modulo - [ ] Standardizzare gestione traduzioni - [ ] Implementare test per funzionalità core - [ ] Aggiornare docs con nuovi pattern - [ ] Verificare coerenza namespace ## Collegamenti Importanti - /docs/architecture.md: Architettura globale - /docs/modules.md: Gestione moduli - /docs/patterns.md: Pattern comuni - Modules/*/docs/: Documentazione per modulo ## Note - Mantenere coerenza tra moduli - Seguire pattern stabiliti - Documentare OGNI deviazione - Aggiornare questo prompt per nuovi pattern - STUDIARE la documentazione prima di ogni modifica
