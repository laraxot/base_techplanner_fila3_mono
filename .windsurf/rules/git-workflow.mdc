# Regole per il Workflow Git nel Progetto

## Struttura del Repository e Branch

### Branch Principali
- **dev**: Branch principale di sviluppo. Tutto il lavoro di sviluppo attivo avviene qui.
- **feature/***:  Branch per lo sviluppo di nuove funzionalità (es. `feature/patient-module`).
- **bugfix/***: Branch per la correzione di bug (es. `bugfix/login-issue`).
- **release/***: Branch per la preparazione di release (es. `release/v1.0.0`).

### Convenzioni di Commit
- Utilizzare messaggi di commit descrittivi che spiegano chiaramente le modifiche
- Formato consigliato: `tipo: breve descrizione`
- Tipi di commit:
  - `feat`: Nuova funzionalità
  - `fix`: Correzione di bug
  - `docs`: Modifiche alla documentazione
  - `style`: Modifiche che non influenzano il significato del codice (es. spazi, formattazione)
  - `refactor`: Refactoring del codice
  - `test`: Aggiunta o modifica di test
  - `chore`: Modifiche al processo di build o a strumenti di supporto

## Importazione di Moduli con Git Subtree

### Prerequisiti per l'Importazione
- Il repository deve avere almeno un commit iniziale prima di utilizzare git subtree
- È necessario essere nel branch corretto (generalmente `dev`) prima dell'importazione
- Verificare che non ci siano modifiche non committate nel working directory

### Procedura Corretta per l'Importazione
1. Eseguire un commit iniziale di tutti i file base del progetto:
   ```bash
   git add .
   git commit -m "chore: initial commit"
   ```

2. Importare i moduli nell'ordine corretto, iniziando dai moduli base:
   ```bash
   # Importare prima il modulo Xot (base per tutti gli altri)
   git subtree add --prefix laravel/Modules/Xot git@github.com:laraxot/module_xot_fila3.git dev --squash
   
   # Seguito da altri moduli core in ordine di dipendenza
   git subtree add --prefix laravel/Modules/User git@github.com:laraxot/module_user_fila3.git dev --squash
   git subtree add --prefix laravel/Modules/Media git@github.com:laraxot/module_media_fila3.git dev --squash
   # ... e così via
   ```

3. Dopo ogni importazione, verificare che non ci siano conflitti e commettere eventuali modifiche:
   ```bash
   git status
   # Risolvere conflitti se necessario
   git commit -m "fix: risolti conflitti nell'importazione del modulo X"
   ```

### Opzioni Importanti per Git Subtree
- `--squash`: Condensa tutti i commit del repository esterno in un singolo commit (riduce la dimensione e semplifica la storia)
- `--prefix`: Specifica il percorso in cui importare il repository (deve essere sempre `laravel/Modules/NomeModulo`)
- `--message` o `-m`: Personalizza il messaggio di commit per l'importazione

### Aggiornamento dei Moduli Importati
Per aggiornare un modulo precedentemente importato:
```bash
git subtree pull --prefix laravel/Modules/Xot git@github.com:laraxot/module_xot_fila3.git dev --squash
```

## Gestione delle Dipendenze tra Moduli

### Ordine di Importazione
L'ordine di importazione dei moduli è critico per garantire che le dipendenze siano rispettate:

1. **Moduli Core** (nell'ordine):
   - Xot (base per tutti gli altri moduli)
   - Lang (gestione multilingua)
   - Tenant (gestione multi-tenant)
   - User (gestione utenti)
   - Media (gestione file e immagini)
   - Activity (logging delle attività)
   - GDPR (conformità privacy)

2. **Moduli Frontend**:
   - UI (componenti interfaccia utente)
   - Theme (temi grafici)

3. **Moduli Funzionali**:
   - Notify (sistema di notifiche)
   - CMS (gestione contenuti)

4. **Moduli Utilità**:
   - Job (gestione code e lavori asincroni)
   - Chart (generazione grafici)

### Strategie per la Gestione dei Conflitti

1. **Prevenzione**:
   - Mantenere una chiara separazione delle responsabilità tra moduli
   - Documentare le dipendenze tra moduli nel file `module.json`
   - Evitare modifiche dirette ai moduli importati quando possibile

2. **Risoluzione**:
   - Quando si verifica un conflitto durante l'importazione con git subtree:
     - Aprire i file in conflitto e risolvere manualmente le discrepanze
     - Scegliere la versione più recente o combinare le modifiche secondo necessità
     - Commettere i cambiamenti con un messaggio descrittivo
   - Per conflitti complessi, consultare la documentazione del modulo o i maintainer

## Gestione di Modifiche ai Moduli Importati

### Approccio Preferito
- Evitare di modificare direttamente i file nei moduli importati
- Estendere le funzionalità tramite i moduli personalizzati
- Se una modifica è necessaria, considerare:
  1. Contribuire al progetto originale tramite pull request
  2. Creare un fork del modulo con le modifiche necessarie
  3. Applicare un patch localmente (solo come ultima risorsa)

### Documentazione delle Modifiche
Se è necessario modificare un modulo importato:
- Documentare chiaramente ogni modifica nel diario di implementazione
- Specificare il motivo della modifica e le alternative considerate
- Mantenere un registro delle modifiche per facilitare future migrazioni

## Backup e Sicurezza

### Pratiche di Backup
- Eseguire un backup completo del repository prima di operazioni complesse (es. importazioni multiple)
- Considerare l'uso di tag Git per marcare punti importanti nel repository:
  ```bash
  git tag -a v0.1.0-pre-import -m "Stato del repository prima dell'importazione dei moduli"
  ```

### Sicurezza e Gestione Secrets
- Non committare mai credenziali, chiavi API o altri segreti nel repository
- Utilizzare `.env` per le configurazioni sensibili e assicurarsi che sia in `.gitignore`
- Utilizzare strumenti di gestione segreti per ambienti di produzione

## Colli di Bottiglia e Ottimizzazioni

### Potenziali Colli di Bottiglia
- L'importazione di moduli di grandi dimensioni può rallentare il processo di sviluppo
- Repository con molti moduli possono diventare pesanti da clonare e mantenere

### Ottimizzazioni
- Utilizzare `git clone --depth 1` per clonare solo il commit più recente quando si lavora su repository di grandi dimensioni
- Regolare configurazione Git per ottimizzare le performance:
  ```bash
  git config --global core.compression 9  # Massima compressione
  git config --global core.preloadindex true  # Precarica indice per migliorare performance
  ```
- Considerare l'uso di Git LFS per file binari di grandi dimensioni 