---
description:
globs:
alwaysApply: true
---
# Regole per l'Estensione di XotBaseResource (Filament)

## Regola Fondamentale
**Se una classe estende `XotBaseResource`, NON deve mai dichiarare:**
- `protected static ?string $navigationGroup`
- `protected static ?string $navigationLabel`
- `protected static ?string $navigationIcon`
- `protected static ?string $translationPrefix`
- `public static function table(Table $table): Table`
- `public static function getListTableColumns(): array`
- `public static function getTableFilters(): array`
- `public static function getBulkActions(): array`
- `public static function getPages(): array` (se restituisce solo index,create,edit o index,create,edit,view)

## Namespace Corretto
- **SEMPRE** utilizzare `Modules\<NomeModulo>\Filament\Resources`
- **MAI** utilizzare `Modules\<NomeModulo>\App\Filament\Resources`
- I file devono essere in `app/Filament/Resources/` ma il namespace NON include `app`

## Metodi Obbligatori che Restituiscono Array Associativo
I seguenti metodi devono SEMPRE restituire un array associativo con chiavi string:
- `getFormSchema(): array` - chiavi: sezioni del form
- `getTableActions(): array` - chiavi: nomi delle azioni
- `getTableColumns(): array` - chiavi: nomi delle colonne
- `getTableFilters(): array` - chiavi: nomi dei filtri
- `getTableBulkActions(): array` - chiavi: nomi delle azioni bulk

## Traduzioni
- **MAI** utilizzare `->label()` sui componenti Filament
- Utilizzare sempre i file di traduzione in `Modules/<NomeModulo>/lang/<lingua>/`
- Il LangServiceProvider gestisce automaticamente le traduzioni

## Enum vs Array Options
- Se una select ha options che sono un array, convertire agli enum PHP 8.1+
- Utilizzare enum con `HasLabel`, `HasIcon`, `HasColor` quando appropriato

## Motivazione
- La gestione di navigationGroup/navigationLabel/navigationIcon è centralizzata nella classe base o nei provider
- I metodi table(), getListTableColumns(), etc. sono gestiti tramite trait, macro o configurazione centralizzata
- Dichiarare questi elementi causa override indesiderati, perdita di automazione e incoerenza tra moduli
- I metodi che restituiscono array associativo permettono maggiore flessibilità e configurabilità

## Esempio ERRATO
```php
class UserModerationResource extends XotBaseResource
{
    protected static ?string $navigationGroup = 'User Management'; // ERRORE
    protected static ?string $navigationLabel = 'User Moderation'; // ERRORE
    protected static ?string $navigationIcon = 'heroicon-o-users'; // ERRORE

    public static function table(Table $table): Table { ... } // ERRORE

    public static function getFormSchema(): array
    {
        return [
            TextInput::make('name')->label('Nome'), // ERRORE: ->label()
        ];
    }
}
```

## Esempio CORRETTO
```php
class UserModerationResource extends XotBaseResource
{
    // Solo metodi e proprietà specifiche non già gestite dalla base
    // NIENTE navigationGroup/navigationLabel/navigationIcon/table()

    public static function getFormSchema(): array
    {
        return [
            'personal_info' => Section::make()
                ->schema([
                    TextInput::make('name'), // Traduzione automatica via LangServiceProvider
                    TextInput::make('email'),
                ]),
            'preferences' => Section::make()
                ->schema([
                    Select::make('status')
                        ->options(UserStatusEnum::class), // Enum invece di array
                ]),
        ];
    }

    public static function getTableColumns(): array
    {
        return [
            'name' => TextColumn::make('name')->sortable(),
            'email' => TextColumn::make('email')->searchable(),
            'status' => TextColumn::make('status')->badge(),
        ];
    }
}
```

## Checklist
- [ ] Se estendi XotBaseResource, NON dichiarare navigationGroup/navigationLabel/navigationIcon
- [ ] Se estendi XotBaseResource, NON dichiarare il metodo table()
- [ ] Namespace corretto: `Modules\<Nome>\Filament\Resources` (senza `App`)
- [ ] File in `app/Filament/Resources/` ma namespace senza `app`
- [ ] Metodi restituiscono array associativo con chiavi string
- [ ] Nessun `->label()` sui componenti, solo traduzioni via file lang
- [ ] Array options convertiti in enum
- [ ] Sposta la configurazione centralizzata nella classe base o provider
- [ ] Aggiorna la documentazione tecnica e README

## Errori Comuni
- Override accidentale di navigationGroup/navigationLabel/navigationIcon
- Duplicazione del metodo table() tra risorse
- Incoerenza tra moduli per la navigazione Filament
- Namespace errato con `App` incluso
- Utilizzo di `->label()` invece delle traduzioni
- Array options invece di enum

## Filosofia e Zen
- **DRY (Don't Repeat Yourself)**: Centralizzazione evita duplicazioni
- **KISS (Keep It Simple, Stupid)**: Configurazione semplice e uniforme
- **Coerenza**: Tutti i moduli seguono le stesse regole
- **Manutenibilità**: Modifiche globali senza toccare ogni risorsa
- **Scalabilità**: Architettura che cresce senza complessità

## Link e Documentazione
- [README Filament Best Practices](mdc:../laravel/Modules/<nome progetto>/docs/filament-best-practices.mdc)
- [README XotBaseResource](mdc:../laravel/Modules/Xot/docs/README.md)
- [README <nome progetto>](mdc:../laravel/Modules/<nome progetto>/docs/README.md)
- [Namespace vs File Structure](mdc:../laravel/Modules/<nome progetto>/docs/namespace-vs-file-structure.md)
- [Filament Namespace Rules](mdc:../laravel/Modules/<nome progetto>/docs/filament-namespace-rules.md)

## Gestione Doctor come User (STI/Parental)

Nel sistema <nome progetto> (e in tutti i moduli Xot), il dottore (**Doctor**) non è una tabella separata, ma un tipo di User gestito tramite Single Table Inheritance (STI) o Parental. La tabella di riferimento è sempre `users`, e il tipo è identificato dal campo `type` (stringa o enum).

- **Vietato** cercare la colonna `user_id` nella tabella `users` (non esiste).
- **Vietato** creare join o modelli duplicati per Doctor.
- **Tutta la logica di fetch, policy, tenancy, va fatta su User filtrando per type = 'doctor'** (o enum).

### Esempio di query corretta
```php
User::where('id', $id)->where('type', 'doctor')->firstOrFail();
// oppure con enum
User::where('id', $id)->where('type', UserTypeEnum::DOCTOR->value)->firstOrFail();
```

### Motivazione filosofica, politica, zen
- Un solo punto di verità: User è la tabella, Doctor è solo un "type"
- Nessuna duplicazione: niente modelli, tabelle, join inutili
- DRY, KISS, serenità del codice: tutto centralizzato, nessun errore di mapping, refactoring sicuro
- Politica: ogni modulo è autonomo, ma rispetta la centralizzazione delle entità
- Religione: "Non avrai altro modello di dottore all'infuori di User"

---
**Questa regola è vincolante e va applicata in tutti i moduli che usano XotBaseResource.**
