# Architettura dei Service Provider nel Framework Xot

## Regola Fondamentale: "Non Avrai Altri Provider All'Infuori di XotBase"

Tutti i service provider in qualsiasi modulo del progetto <nome progetto> DEVONO estendere esclusivamente le classi base con prefisso `XotBase` fornite dal modulo Xot.

## Gerarchia delle Classi Base

| Provider Specifico del Modulo | Estende | Funzionalità |
|-------------------------------|---------|--------------|
| `ModuleNameServiceProvider` | `XotBaseServiceProvider` | Provider principale del modulo |
| `RouteServiceProvider` | `XotBaseRouteServiceProvider` | Routing del modulo |
| `EventServiceProvider` | `XotBaseEventServiceProvider` | Gestione eventi del modulo |
| `AuthServiceProvider` | `XotBaseAuthServiceProvider` | Autenticazione e policy |
| `FilamentServiceProvider` | `XotBaseFilamentServiceProvider` | Componenti Filament |

## Attenzione alla Tipizzazione delle Proprietà

⚠️ **ERRORE CRITICO**: Mai ridefinire proprietà ereditate con tipo differente:

```php
// ERRATO ❌
protected string $namespace = 'Modules\\SaluteMo\\Http\\Controllers';

// CORRETTO ✅
protected $namespace = 'Modules\\SaluteMo\\Http\\Controllers';
```

Questo errore viola la regola di tipizzazione PHP che proibisce la modifica del tipo di una proprietà ereditata.

## Best Practice per l'Implementazione

1. **Override Minimo**: Sovrascrivere solo i metodi e le proprietà necessarie
2. **Chiamare il parent**: Quasi tutti i metodi sovrascritti devono chiamare `parent::method()`
3. **Nomi di Modulo Standardizzati**: Definire `$name`, `$moduleName` e `$moduleNameLower`
4. **Documentazione PHPDoc**: Tutte le proprietà e i metodi devono avere documentazione completa

## Esempio di Implementazione Corretta

```php
namespace Modules\SaluteMo\Providers;

use Modules\Xot\Providers\XotBaseServiceProvider;

class SaluteMoServiceProvider extends XotBaseServiceProvider
{
    /**
     * Module name
     *
     * @var string
     */
    public string $name = 'SaluteMo';

    /**
     * Module name in lowercase
     *
     * @var string
     */
    public string $nameLower = 'salutemo';

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot(): void
    {
        parent::boot();
        // Logica modulo-specifica qui
    }
}
```

## Risoluzione Problemi Comuni

1. **Fatal Error di Tipizzazione**: Rimuovere il tipo dalle proprietà ereditate
2. **Provider Non Registrato**: Verificare `module.json` contenga i provider
3. **Namespace Errato**: Assicurarsi che sia `Modules\\ModuleName\\Providers`
4. **Route Non Trovate**: Verificare il corretto namespace nel RouteServiceProvider
