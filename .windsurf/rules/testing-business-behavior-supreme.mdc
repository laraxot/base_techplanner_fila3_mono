# üéØ REGOLA SUPREMA: Testing Business Behavior Only

## LA REGOLA PI√ô IMPORTANTE DA RICORDARE SEMPRE

**IL TESTING DEVE VERIFICARE IL COMPORTAMENTO BUSINESS, NON L'IMPLEMENTAZIONE!**

Questa √® la regola fondamentale che ha precedenza su qualsiasi altra considerazione di testing.

## MANTRA ASSOLUTO

üî• **"COMPORTAMENTO BUSINESS, NON IMPLEMENTAZIONE"** üî•

## PRIORIT√Ä OPERATIVE ASSOLUTE

### 1. PRIMA PRIORIT√Ä: Sistemare Test Esistenti
- **MAI cancellare test esistenti**
- **SEMPRE** farli funzionare correggendo l'approccio
- Convertire da test implementativi a test comportamentali
- Mantenere la copertura ma migliorarne la qualit√†

### 2. SECONDA PRIORIT√Ä: Focus su Business Logic
- Testare solo comportamenti visibili all'utente finale
- Testare regole di business e validazioni
- Testare flussi completi (input ‚Üí elaborazione ‚Üí output)
- Testare autorizzazioni e permessi business

## COSA TESTARE (Business Behavior) ‚úÖ

- **Regole di Business**: Validazioni, constraint, policy
- **Flussi Utente**: Dall'input al risultato finale
- **Autorizzazioni**: Permessi e controlli di accesso
- **Effetti Collaterali**: Notifiche, log, cambi di stato
- **Calcoli Business**: Logiche di calcolo specifiche
- **Workflow**: Processi multi-step
- **API Endpoints**: Risposta e comportamento per l'utente
- **UI Interactions**: Comportamento dell'interfaccia

## COSA NON TESTARE (Implementation Details) ‚ùå

- **Propriet√† Modelli**: `$fillable`, `$casts`, `$hidden`, `$table`
- **Trait Usage**: Quali trait usa una classe
- **Relazioni Base**: `belongsTo`, `hasMany` basilari
- **Struttura Interna**: Come funziona internamente il codice
- **Framework Config**: Configurazioni di Laravel/Filament
- **Method Calls**: Se un metodo specifico viene chiamato
- **Database Schema**: Struttura delle tabelle (coperta dalle migrazioni)

## REGOLE DI QUALIT√Ä

### Test Resilienti
- I test devono essere **black-box**: non devono conoscere l'implementazione interna
- Devono sopravvivere ai refactor che non cambiano il comportamento business
- Devono documentare il comportamento atteso del sistema

### Test di Valore
- Ogni test deve avere un chiaro valore business
- Deve proteggere da regressioni funzionali reali
- Deve essere comprensibile a un business analyst

## RESPONSABILIT√Ä ASSOLUTE

- **MAI** cancellare test esistenti senza averli prima sistemati
- **SEMPRE** convertire test implementativi in test comportamentali
- **PRIORIT√Ä** ai test esistenti su quelli nuovi
- **FOCUS** sul valore business, non sulla copertura tecnica

## COLLEGAMENTI E RIFERIMENTI

- [Testing Priority Rule](../../docs/testing-priority-rule.md)
- [Model Testing Philosophy](../../docs/model-testing-philosophy.md)
- [Testing Business Behavior Supreme Rule](../../docs/testing-business-behavior-supreme-rule.md)
- [Laravel Guidelines](../../laravel/.ai/guidelines/testing-fundamental-rule.md)

---

**Questa regola √® SUPREMA e ha precedenza su qualsiasi altra considerazione di testing.**

*Ultimo aggiornamento: Gennaio 2025*