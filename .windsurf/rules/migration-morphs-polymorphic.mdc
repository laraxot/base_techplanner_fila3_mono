# Regole per Morphs Polymorphic e Migrazioni Laraxot

## Principio Fondamentale: Morphs e Flessibilità ID

### REGOLA CRITICA: causer_id DEVE essere string
- `$table->string('causer_id')->nullable()->change();` ✅ CORRETTO
- `$table->unsignedBigInteger('causer_id')->nullable()->change();` ❌ ERRATO

## Motivazioni Architetturali

### Supporto Universal ID Types
- UUID (User): `"550e8400-e29b-41d4-a716-446655440000"`
- Integer (Admin): `"123"` 
- Custom ID (System): `"SYSTEM_001"`
- Morphs deve supportare QUALSIASI formato ID

### Evoluzione e Compatibilità
- Sistema preparato per cambi futuri di strategia ID
- Moduli indipendenti con formati ID diversi
- Polimorfismo reale senza vincoli tecnici
- Zero accoppiamento tra moduli

## Regola Migrazioni: Copia e Timestamp

### PROCESSO CORRETTO LARAXOT
1. NON creare `update_table_name.php`
2. COPIARE migrazione originale `create_table_name.php`
3. MODIFICARE contenuto (tableCreate + tableUpdate)
4. CAMBIARE solo timestamp nel nome file
5. ELIMINARE file originale

### Esempio: 2023_03_31_103351_create_activity_table.php → 2024_01_15_103351_create_activity_table.php

## Pattern XotBaseMigration
- tableCreate: struttura completa aggiornata
- tableUpdate: modifiche per DB esistenti
- Idempotenza assoluta: funziona su DB vuoto e esistente
- Una tabella = Una migrazione = Una verità

## Filosofia
- Evoluzione temporale = Cambio timestamp
- Polimorfismo universale = string per morphs
- Semplicità architettuale = Zero duplicazioni
- Manutenibilità = Un punto di controllo per tabella

*Aggiornamento: 2025-01-06 - Comprensione morphs polymorphic*