# REGOLA CRITICA: NO DATABASE NEI TEST

## VIETATO ASSOLUTO

```php
// ❌ MAI USARE QUESTO
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(TestCase::class, RefreshDatabase::class);
```

## MOTIVAZIONI FILOSOFICHE

### Velocità
- Test con database = LENTI (secondi)
- Test senza database = RAPIDI (millisecondi)
- CI/CD deve essere veloce

### Isolamento
- Database = side effects tra test
- Plain objects = zero interferenze
- Ogni test completamente indipendente

### Determinismo
- Database = stato mutabile imprevedibile
- Plain objects = stato controllato e predicibile
- Risultati sempre identici

### Semplicità
- Database = setup complesso, connessioni, transazioni
- Plain objects = instantanei, zero configurazione
- Focus sulla logica, non sull'infrastruttura

## PATTERN SOSTITUTIVI

```php
// ❌ ERRATO - Database dependency
$user = User::factory()->create(['type' => 'admin']);
$appointment = Appointment::factory()->create(['user_id' => $user->id]);

// ✅ CORRETTO - Plain objects
$user = (object) ['id' => 1001, 'type' => 'admin', 'name' => 'Dr. Mario'];
$appointment = (object) [
    'id' => 2001,
    'user_id' => 1001,
    'start_time' => '2025-01-07 10:00:00',
    'type' => 'consultation'
];
```

## ZEN DEL TESTING

- **Un test veloce è un test che viene eseguito**
- **Un test isolato è un test affidabile**
- **Un test deterministico è un test che non mente**
- **Un test semplice è un test manutenibile**

## ANTI-PATTERN DA ELIMINARE

1. `RefreshDatabase::class`
2. `use TestCase` quando non necessario
3. Factory calls nel business logic testing
4. Dependency injection nei test puri
5. Configuration requirements nei test unitari

## ECCEZIONI (RARE)

Solo per test di INTEGRAZIONE che testano specificatamente:
- Migrazioni database
- Query performance
- Database constraints
- Transaction logic

Ma MAI per business logic pura!