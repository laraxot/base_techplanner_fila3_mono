# Testing Factory Best Practices - Critical Rules

## Faker Boolean Error Resolution

### CRITICAL: Never use $this->faker->boolean(percentage)
```php
// ❌ CAUSES InvalidArgumentException: Unknown format "boolean"
$this->faker->boolean(70)
$this->faker->boolean(15)

// ✅ CORRECT PATTERNS
$this->faker->optional(0.7)->boolean()              // For conditional booleans
$this->faker->optional(0.6)->regexify('[A-Z]')     // For conditional values
$this->faker->optional(0.9)->dateTimeBetween()     // For conditional dates
```

### Factory Pattern Rules
1. **Percentages as decimals**: Use 0.7 not 70 in optional()
2. **Boolean without params**: Use boolean() without parameters
3. **Conditional values**: Always use optional(probability).method()

### Common Factory Corrections
```php
// Insurance number
- $this->faker->boolean(60) ? $this->faker->regexify('[A-Z]{2}[0-9]{8}') : null
+ $this->faker->optional(0.6)->regexify('[A-Z]{2}[0-9]{8}')

// Boolean flags
- $this->faker->boolean(15)
+ $this->faker->optional(0.15)->boolean()

// Date fields
- $this->faker->boolean(90) ? now()->subDays($this->faker->numberBetween(30, 730)) : null
+ $this->faker->optional(0.9)->dateTimeBetween('-2 years', '-1 month')
```

## Testing Without Database Dependencies

### Feature Test Pure Pattern
```php
// ✅ CORRECT - No database dependencies
describe('Business Logic', function () {
    it('validates appointment booking logic', function () {
        $patient = (object) ['type' => 'patient', 'id' => 1001];
        $doctor = (object) ['type' => 'doctor', 'id' => 2001];
        
        expect($patient->type)->toBe('patient');
        expect($doctor->type)->toBe('doctor');
    });
});
```

### Anti-Pattern: Database in Feature Tests
```php
// ❌ CAUSES "Call to a member function connection() on null"
it('validates appointment booking', function () {
    $patient = User::factory()->create(['type' => 'patient']);
    $doctor = User::factory()->create(['type' => 'doctor']);
    // This requires database connection
});
```

## Enum Testing Rules

### Safe Enum Testing
```php
// ✅ CORRECT - No translator dependencies
expect($appointment->type)->toBe(AppointmentTypeEnum::CONSULTATION);
expect($appointment->type->value)->toBe('consultation');
expect($appointment->type->getDuration())->toBe(20);  // If method exists
```

### Avoid Translator-Dependent Methods
```php
// ❌ CAUSES "Target class [translator] does not exist"
expect($appointment->type->getLabel())->toBe('Consultation');
```

## Test Architecture Matrix

| Test Type | Database | Container | Faker | TestCase | Purpose |
|-----------|----------|-----------|--------|----------|---------|
| Feature Pure | ❌ | ❌ | ❌ | ❌ | Business Logic |
| Feature Integrated | ✅ | ✅ | ✅ | ✅ | End-to-end |
| Unit Resource | ✅ | ✅ | ✅ | ✅ | Filament Components |
| Unit Model | ✅ | ✅ | ✅ | ✅ | Eloquent Features |

## Critical Error Prevention

### Before Committing Tests
- [ ] No $this->faker->boolean(number) usage
- [ ] Feature tests use plain objects, not factories
- [ ] No enum getLabel() calls in tests
- [ ] No database factories in pure business logic tests

### Performance Targets
- Feature tests: < 0.1s each
- Unit tests: < 0.5s each  
- Total suite: < 5s
- Zero flaky tests

## Philosophy
- Test behavior, not implementation
- Isolate external dependencies
- Simple objects = clear logic
- Fast feedback loops

*Critical: These patterns prevent 90% of common testing failures*