---
description: Regole dettagliate per l'implementazione e l'utilizzo dei Trait nei moduli Laraxot/<nome progetto>
globs: ["**/*.php", "**/Models/**/*.php", "**/Traits/**/*.php"]
alwaysApply: true
---

# Regole per l'Implementazione e Utilizzo dei Trait in Laraxot/<nome progetto>

## Principi Fondamentali

- **Tipizzazione Rigorosa**: Tutti i metodi devono avere tipi di ritorno e parametri espliciti
- **Documentazione Completa**: PHPDoc per tutte le proprietà e metodi, incluse le proprietà accessibili tramite trait
- **Namespace Corretto**: I trait devono risiedere nel namespace `Modules\{ModuleName}\Traits`
- **Responsabilità Singola**: Ogni trait deve avere uno scopo chiaro e ben definito
- **Sicurezza Tipologica**: Annotare proprietà e metodi per garantire la corretta analisi statica

## Trait Comuni e Loro Regole

### HasTeams

Questo trait gestisce l'appartenenza a team per gli utenti autenticati.

```php
<?php

declare(strict_types=1);

namespace Modules\User\Traits;

use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Modules\User\Models\Team;

/**
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Modules\User\Models\Team> $teams
 * @property-read \Modules\User\Models\Team|null $currentTeam
 */
trait HasTeams
{
    /**
     * Ottiene i team associati all'utente.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany<\Modules\User\Models\Team>
     */
    public function teams(): BelongsToMany
    {
        return $this->belongsToMany(Team::class, 'team_user', 'user_id', 'team_id')
            ->withTimestamps();
    }

    /**
     * Verifica se l'utente appartiene al team specificato.
     */
    public function belongsToTeam(Team $team): bool
    {
        return $this->teams->contains($team) ||
            ($this->currentTeam !== null && $this->currentTeam->id === $team->id);
    }
}
```

**Regole Specifiche:**
1. Deve essere utilizzato solo in modelli che estendono `Authenticatable`
2. Richiede il trait `HasRoles` per la gestione dei ruoli
3. Richiede le tabelle `team` e `team_user` con le colonne specificate
4. I metodi devono gestire correttamente i tipi di ritorno e i parametri

### HasTenants

Questo trait gestisce l'appartenenza a tenant per gli utenti.

```php
<?php

declare(strict_types=1);

namespace Modules\User\Traits;

use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Modules\User\Models\Tenant;

/**
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Modules\User\Models\Tenant> $tenants
 * @property-read \Modules\User\Models\Tenant|null $currentTenant
 */
trait HasTenants
{
    /**
     * Ottiene i tenant associati all'utente.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany<\Modules\User\Models\Tenant>
     */
    public function tenants(): BelongsToMany
    {
        return $this->belongsToMany(Tenant::class, 'tenant_user', 'user_id', 'tenant_id')
            ->withTimestamps();
    }

    /**
     * Verifica se l'utente appartiene al tenant specificato.
     */
    public function belongsToTenant(Tenant $tenant): bool
    {
        return $this->tenants->contains($tenant) ||
            ($this->currentTenant !== null && $this->currentTenant->id === $tenant->id);
    }
}
```

**Regole Specifiche:**
1. Deve essere utilizzato solo in modelli che implementano `HasTenants` di Filament
2. Richiede il trait `HasRoles` per la gestione dei ruoli
3. Richiede le tabelle `tenants` e `tenant_user` con le colonne specificate
4. I metodi devono gestire correttamente i tipi di ritorno e i parametri

### HasAuthenticationLogTrait

Questo trait gestisce il logging delle autenticazioni per gli utenti.

```php
<?php

declare(strict_types=1);

namespace Modules\User\Traits;

use Illuminate\Database\Eloquent\Relations\HasMany;
use Modules\User\Models\AuthenticationLog;

/**
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Modules\User\Models\AuthenticationLog> $authentications
 */
trait HasAuthenticationLogTrait
{
    /**
     * Ottiene i log di autenticazione associati all'utente.
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany<\Modules\User\Models\AuthenticationLog>
     */
    public function authentications(): HasMany
    {
        return $this->hasMany(AuthenticationLog::class);
    }

    /**
     * Registra un nuovo accesso per l'utente.
     */
    public function logAuthentication(array $data): AuthenticationLog
    {
        return $this->authentications()->create($data);
    }
}
```

**Regole Specifiche:**
1. Il trait può essere utilizzato in qualsiasi modello che necessita di logging di autenticazione
2. Richiede la tabella `authentication_logs` con le colonne specificate
3. I metodi devono gestire correttamente i tipi di ritorno e i parametri
4. Le notifiche devono essere configurate correttamente

## Regole Generali per i Trait

### Tipizzazione e Documentazione

```php
/**
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\RelatedModel> $relationshipName
 * @property string $propertyName
 * @property bool $isPropertyName
 */
trait ExampleTrait
{
    /**
     * Descrizione del metodo.
     *
     * @param string $param Descrizione del parametro
     * @return bool Descrizione del valore di ritorno
     */
    public function exampleMethod(string $param): bool
    {
        // Implementazione
    }
}
```

### Gestione dei Casi Null

```php
/**
 * Metodo che gestisce correttamente i casi null.
 */
public function findRelatedModel(?int $id): ?RelatedModel
{
    if ($id === null) {
        return null;
    }

    return RelatedModel::find($id);
}
```

### Definizione delle Relazioni

```php
/**
 * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany<\App\Models\Role>
 */
public function roles(): BelongsToMany
{
    return $this->belongsToMany(Role::class);
}
```

## Anti-pattern da Evitare

### ❌ Mancanza di Tipizzazione

```php
// ❌ MAI fare questo
public function getMethods()
{
    // Implementazione...
}
```

### ❌ Documentazione Incompleta

```php
// ❌ MAI fare questo
trait SomeTrait
{
    public function someMethod(string $param): bool
    {
        // Manca PHPDoc
    }
}
```

### ❌ Uso Improprio di mixed

```php
// ❌ MAI fare questo
public function getValue(string $key): mixed
{
    // Utilizzare un tipo specifico o union type
}
```

## Documentazione dei Trait

Ogni trait deve essere documentato in:

1. File dedicato nella cartella `docs` del modulo
2. PHPDoc all'interno del codice
3. Collegamenti bidirezionali se utilizzato in più moduli

Esempio di documentazione:

```markdown
# HasTeams Trait

## Descrizione
Questo trait gestisce l'appartenenza a team per gli utenti autenticati.

## Requisiti
- Il modello deve estendere `Authenticatable`
- Richiede il trait `HasRoles`
- Tabelle: `teams`, `team_user`

## Metodi Principali
- `teams()`: Relazione BelongsToMany con i team
- `belongsToTeam(Team $team)`: Verifica appartenenza a team
- `switchTeam(Team $team)`: Cambia team attivo

## Proprietà Accessibili
- `teams`: Collection di team associati
- `currentTeam`: Team attualmente attivo

## Esempio di Utilizzo
```php
use Modules\User\Traits\HasTeams;

class User extends Authenticatable
{
    use HasTeams;

    // Resto dell'implementazione...
}
```
```

## Sicurezza e Best Practices

1. **Incapsulamento**: Utilizzare metodi protetti per logica interna
2. **Interfacce**: Considerare l'implementazione di interfacce per trait complessi
3. **Coesione**: Mantenere i trait focalizzati su una singola responsabilità
4. **Test**: Testare tutti i metodi forniti dai trait
5. **Composizione**: Preferire composizione su ereditarietà per funzionalità condivise

## Migrazione da Trait Deprecated

Se un trait viene deprecato:

1. Documentare la ragione
2. Fornire un percorso di migrazione chiaro
3. Aggiornare tutti i riferimenti in documenti correlati
4. Creare un trait di compatibilità se necessario

## Note Importanti

- I trait dovrebbero seguire SRP (Single Responsibility Principle)
- Evitare conflitti di nomi con metodi nei modelli utilizzando trait
- Documentare tutti i trait nella cartella `docs` del modulo appropriato
- Assicurarsi che i trait siano compatibili con PHPStan livello 9
- Utilizzare generics appropriati nelle collezioni e relazioni
