<?php

declare(strict_types=1);

namespace Modules\Geo\Tests\Unit;

use Modules\Geo\Database\Factories\PlaceFactory;
use Modules\Geo\Models\Place;
use Tests\TestCase;

class PlaceTest extends TestCase
{
    /** @test */
    public function itHasValidFactory(): void
    {
        $place = PlaceFactory::new()->create();

        $this->assertInstanceOf(Place::class, $place);
        $this->assertNotNull($place->latitude);
        $this->assertNotNull($place->longitude);
    }

    /** @test */
    public function itHasLinkedRelationship(): void
    {
        $place = PlaceFactory::new()->create();

        $this->assertTrue(method_exists($place, 'linked'));
        $this->assertNotNull($place->linked());
    }

    /** @test */
    public function itHasPlaceTypeRelationship(): void
    {
        $place = PlaceFactory::new()->create();

        $this->assertTrue(method_exists($place, 'placeType'));
        $this->assertNotNull($place->placeType());
    }

    /** @test */
    public function itValidatesCoordinates(): void
    {
        $place = PlaceFactory::new()->create([
            'latitude' => 45.4642,
            'longitude' => 9.1900,
        ]);

        $this->assertTrue($place->hasValidCoordinates());
    }

    /** @test */
    public function itGetsFormattedAddress(): void
    {
        $place = PlaceFactory::new()->create([
            'formatted_address' => 'Piazza del Duomo, Milano',
        ]);

        $this->assertEquals('Piazza del Duomo, Milano', $place->getFormattedAddress());
    }

    /** @test */
    public function itGetsMapIcon(): void
    {
        $place = PlaceFactory::new()->create();

        $this->assertNotNull($place->getMapIcon());
    }
}
