<?php

declare(strict_types=1);

namespace Modules\Geo\Filament\Widgets;

use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Contracts\View\View;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\View as ViewFacade;
use Modules\Geo\Models\Place;
use Webbingbrasil\FilamentMaps\Widgets\MapWidget;

class ImprovedLocationMapWidget extends MapWidget
{
    /** @var view-string */
    protected static string $view = 'geo::filament.widgets.location-map-widget';

    protected int|string|array $columnSpan = 'full';

    public Htmlable|string|null $heading = 'Mappa';

    protected const CACHE_TTL = 3600;
    protected const CLUSTER_SIZE = 50;
    protected const MAX_MARKERS = 1000;

    protected function getViewData(): array
    {
        return [
            'heading' => $this->heading,
            'maxHeight' => $this->getMaxHeight(),
            'options' => $this->getOptions(),
            'markers' => $this->getMarkers(),
            'isLoading' => $this->isLoading(),
            'error' => $this->getError(),
        ];
    }

    protected function getMaxHeight(): string
    {
        return $this->maxHeight ?? 'min(800px, 90vh)';
    }

    protected function getOptions(): array
    {
        /** @var array{zoom?: int|string, type?: string, center?: array{lat?: float|string, lng?: float|string}} $config */
        $config = Config::get('maps', []);

        return [
            'zoom' => (int) ($config['zoom'] ?? 12),
            'center' => $this->getMapCenter(),
            'mapTypeId' => (string) ($config['type'] ?? 'roadmap'),
            'mapTypeControl' => true,
            'streetViewControl' => true,
            'fullscreenControl' => true,
            'zoomControl' => true,
            'styles' => $this->getMapStyles(),
            'accessibility' => true,
            'keyboardShortcuts' => true,
            'gestureHandling' => 'cooperative',
            'cluster' => [
                'enable' => true,
                'maxZoom' => 15,
                'gridSize' => self::CLUSTER_SIZE,
                'styles' => $this->getClusterStyles(),
            ],
        ];
    }

    protected function getMapStyles(): array
    {
        return [
            [
                'featureType' => 'all',
                'elementType' => 'labels.text.fill',
                'stylers' => [
                    ['color' => '#ffffff'],
                    ['visibility' => 'on'],
                ],
            ],
        ];
    }

    protected function getClusterStyles(): array
    {
        return [
            [
                'url' => asset('images/cluster-icon.png'),
                'height' => 50,
                'width' => 50,
                'textColor' => '#ffffff',
                'textSize' => 12,
            ],
        ];
    }

    /** @return Collection<int, Place> */
    public function getPlaces(): Collection
    {
        return Cache::remember('map_places', self::CACHE_TTL, function () {
            return Place::with(['placeType'])
                ->limit(self::MAX_MARKERS)
                ->get();
        });
    }

    public function getMarkers(): array
    {
        $places = $this->getPlaces();

        if ($places->count() > self::MAX_MARKERS) {
            return $this->getClusteredMarkers($places);
        }

        /* @var Collection<int, Place> $places */

        return $places->map(function (Place $place): array {
            return [
                'position' => [
                    'lat' => (float) $place->latitude,
                    'lng' => (float) $place->longitude,
                ],
                'title' => $place->name ?? 'Unnamed Place',
                'icon' => $this->getMarkerIcon($place),
                'ariaLabel' => $this->getAriaLabel($place),
            ];
        })->all();
    }

    protected function getClusteredMarkers(Collection $places): array
    {
        return [];
    }

    protected function getAriaLabel(Place $place): string
    {
        return sprintf(
            'Location: %s, Coordinates: %f, %f',
            $place->name ?? 'Unnamed Place',
            (float) $place->latitude,
            (float) $place->longitude
        );
    }

    protected function isLoading(): bool
    {
        return false;
    }

    protected function getError(): ?string
    {
        return null;
    }

    protected function getMapCenter(): array
    {
        /** @var array{center?: array{lat?: float|string, lng?: float|string}} $config */
        $config = Config::get('maps', []);
        $defaultLat = 45.4642;
        $defaultLng = 9.1900;

        return [
            'lat' => (float) ($config['center']['lat'] ?? $defaultLat),
            'lng' => (float) ($config['center']['lng'] ?? $defaultLng),
        ];
    }

    protected function getMarkerIcon(Place $place): ?array
    {
        /** @var array{icons?: array<string, array{url?: string, size?: array{int, int}}>} $config */
        $config = Config::get('maps.markers', []);
        $type = $place->placeType;

        if (null === $type || ! isset($config['icons'][$type->getSlug()])) {
            return null;
        }

        $icon = $config['icons'][$type->getSlug()];

        if (! isset($icon['url'])) {
            return null;
        }

        return [
            'url' => asset($icon['url']),
            'scaledSize' => [
                'width' => (int) ($icon['size'][0] ?? 32),
                'height' => (int) ($icon['size'][1] ?? 32),
            ],
        ];
    }

    public function render(): View
    {
        return ViewFacade::make($this->getView(), $this->getViewData());
    }

    public function getView(): string
    {
        return static::$view;
    }
}
