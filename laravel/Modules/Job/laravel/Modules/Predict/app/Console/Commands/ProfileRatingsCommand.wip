<?php

declare(strict_types=1);

namespace Modules\Predict\Console\Commands;

use Webmozart\Assert\Assert;
use Illuminate\Console\Command;
use Modules\Rating\Models\Rating;
use Modules\Predict\Models\Profile;

class ProfileRatingsCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'blog:profile-ratings {userId}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Display ratings of the user';

    /**
     * Execute the console command.
     */
    public function handle(): void
    {
        $userId = $this->argument('userId');

        $this->validateUserId($userId);

        $profile = $this->getProfile($userId);
        $ratings = $this->getRatings($profile);

        if (!empty($ratings)) {
            $this->displayRatings($ratings);
        } else {
            $this->warn('âš¡ No records found');
        }
    }

    /**
     * Validate the user ID argument.
     *
     * @param string $userId
     * @throws \InvalidArgumentException
     */
    private function validateUserId(string $userId): void
    {
        Assert::stringNotEmpty($userId, 'User ID must be a non-empty string.');
    }

    /**
     * Retrieve the user profile.
     *
     * @param string $userId
     * @return Profile
     * @throws \RuntimeException
     */
    private function getProfile(string $userId): Profile
    {
        $profile = Profile::firstWhere(['user_id' => $userId]);

        Assert::notNull($profile, 'Profile not found for the given User ID.');

        return $profile;
    }

    /**
     * Get the ratings from the profile.
     *
     * @param Profile $profile
     * @return array
     */
    private function getRatings(Profile $profile): array
    {
        return $profile->ratings()
            ->select('value', 'user_id', 'title as answer', 'model_id', 'model_type')
            ->get()
            ->map(function ($item) {
                Assert::isInstanceOf($item, Rating::class);
                return $this->formatRating($item);
            })
            ->toArray();
    }

    /**
     * Format a single rating item.
     *
     * @param Rating $item
     * @return array
     */
    private function formatRating(Rating $item): array
    {
        return [
            'value' => $item->value,
            'user_id' => $item->user_id,
            'answer' => $item->answer,
            'model_id' => $item->model_id,
            'model_type' => $item->model_type,
            // You can add more fields here if needed
        ];
    }

    /**
     * Display the ratings in a table format.
     *
     * @param array $ratings
     */
    private function displayRatings(array $ratings): void
    {
        $headers = array_keys($ratings[0]);

        $this->newLine();
        $this->table($headers, $ratings);
        $this->newLine();
    }
}
