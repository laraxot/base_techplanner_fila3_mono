# Regola struttura path per i moduli Laravel

Tutti i file di risorsa (Resource), enum e pages dei moduli Laravel devono essere posizionati in `Modules/<NomeModulo>/app/` e **mai** direttamente nella root del modulo o in sottocartelle come `Filament/Resources/` o `Enums/` fuori da `app/`.

## Esempio corretto
# Regola struttura path per i moduli Laravel

Tutti i file di risorsa (Resource), enum e pages dei moduli Laravel devono essere posizionati in `Modules/<NomeModulo>/app/` e **mai** direttamente nella root del modulo o in sottocartelle come `Filament/Resources/` o `Enums/` fuori da `app/`.

## Esempio corretto
# Regola struttura path per i moduli Laravel

Tutti i file di risorsa (Resource), enum e pages dei moduli Laravel devono essere posizionati in `Modules/<NomeModulo>/app/` e **mai** direttamente nella root del modulo o in sottocartelle come `Filament/Resources/` o `Enums/` fuori da `app/`.

## Esempio corretto
# Regola struttura path per i moduli Laravel

Tutti i file di risorsa (Resource), enum e pages dei moduli Laravel devono essere posizionati in `Modules/<NomeModulo>/app/` e **mai** direttamente nella root del modulo o in sottocartelle come `Filament/Resources/` o `Enums/` fuori da `app/`.

## Esempio corretto
- Modules/SaluteOra/app/Filament/Resources/UserResource.php
- Modules/SaluteOra/app/Filament/Resources/UserResource/Pages/CreateUser.php
- Modules/SaluteOra/app/Enums/UserType.php
- Modules/SaluteOra/app/Enums/UserState.php

## Esempio errato
- Modules/SaluteOra/Filament/Resources/UserResource.php
- Modules/SaluteOra/Enums/UserType.php

Questa regola garantisce coerenza, manutenibilità e rispetto delle convenzioni PSR-4 e delle best practice del progetto.

Consulta anche la documentazione specifica dei moduli per dettagli e casi particolari.

---

# Gestione degli "State" nei moduli Laravel

**Regola:** Per ogni campo di stato (es. `state` di User) usare sempre una State Class Spatie ([spatie/laravel-model-states](https://github.com/spatie/laravel-model-states)), **mai** un enum PHP.

## Motivazione
- Permette transizioni, validazione, logica custom, metodi di stato e side effect.
- Fondamentale per domini "stateful" (utenti, workflow, moderazione, ecc.).

## Esempio corretto
```php
use Spatie\ModelStates\State;
use Spatie\ModelStates\StateConfig;

abstract class UserState extends State {
    public static function config(): StateConfig {
        return parent::config()
            ->default(Pending::class)
            ->states([
                Pending::class,
                Approved::class,
                Rejected::class,
            ])
            ->allowTransition(Pending::class, Approved::class)
            ->allowTransition(Pending::class, Rejected::class);
    }
}
class Pending extends UserState {}
class Approved extends UserState {}
class Rejected extends UserState {}
```
Nel modello:
```php
use Spatie\ModelStates\HasStates;
class User extends Model {
    use HasStates;
    protected function states(): array {
        return [
            'state' => UserState::class,
        ];
    }
}
```

## Errori comuni
- **Undefined array key ...**: manca la dichiarazione di uno stato o la classe non esiste/è nel namespace errato.
- **Enum PHP usato come state**: va migrato a State Class.

## Docs collegate
- [.windsurf/rules/model-states.mdc](../../../.windsurf/rules/model-states.mdc)
- [SaluteOra/docs/uso-label-filament.mdc](../../SaluteOra/docs/uso-label-filament.mdc)
- https://github.com/spatie/laravel-model-states

---

# Regole pratiche per gestione di enum e state class

## 1. Path e namespace
- Tutti i file enum e state devono essere in `Modules/<NomeModulo>/app/Enums/` o `Modules/<NomeModulo>/app/States/<Dominio>/`.
- Namespace sempre PSR-4: `Modules\<NomeModulo>\App\Enums\...` o `Modules\<NomeModulo>\App\States\<Dominio>\...`.

## 2. Pattern per colonne Filament
- Per campi "state" usare sempre una StateClass Spatie e un custom column (`SelectStateColumn`) per la tabella.
- Per valori statici (tipo, ruolo, ecc.) usare enum PHP e `SelectColumn`.

## 3. Errori comuni
- Path errato (file enum/state fuori da app/).
- Namespace errato.
- Usare enum PHP per campi che richiedono logica di stato.
- Non registrare tutti gli stati in StateConfig.

## 4. Scelta rapida
- **Stato dinamico, workflow, transizioni?** → State Class Spatie.
- **Valori statici, nessuna logica?** → enum PHP.

## 5. Collegamenti
- [.windsurf/rules/model-states.mdc](../../../.windsurf/rules/model-states.mdc)
- [SaluteOra/docs/uso-label-filament.mdc](../../SaluteOra/docs/uso-label-filament.mdc)
- https://github.com/spatie/laravel-model-states

[← Torna a SaluteOra/docs](../../SaluteOra/docs/uso-label-filament.mdc)

# Regola sui Path dei File di Codice nei Moduli Laravel

## Regola Fondamentale

Tutti i file di codice (Actions, Models, Controllers, ecc.) dei moduli Laravel DEVONO essere posizionati nella cartella `app/` del modulo:

- **Path corretto:** `Modules/NomeModulo/app/Actions/...`
- **Path errato:** `Modules/NomeModulo/Actions/...`

### Motivazione
- Rispetta PSR-4 e autoload Composer
- Garantisce coerenza tra moduli
- Evita errori di caricamento e path
- Facilita la manutenzione e la ricerca

### Esempio
```php
// Corretto
Modules/SaluteOra/app/Actions/Patient/Calendar/FetchEventsAction.php

// Errato
Modules/SaluteOra/Actions/Patient/Calendar/FetchEventsAction.php
```

## Collegamenti
- Vedi anche: `naming-conventions.md`, `directory-structure.md`, `best-practices.md`
- Aggiornare sempre la documentazione dei moduli e Xot in caso di modifica della struttura.

## Actions Queueable

Tutte le Actions che possono essere eseguite in modo asincrono o che richiedono scalabilità devono SEMPRE usare il trait `Spatie\QueueableAction\QueueableAction`.

- Permette esecuzione sincrona/asincrona
- Compatibile con Horizon, retry, chain
- Standardizza la gestione delle actions

Esempio:
```php
use Spatie\QueueableAction\QueueableAction;

final class FetchEventsAction
{
    use QueueableAction;
    // ...
}
```

Vedi anche: [SaluteOra/docs/queueable-actions-guide.md](../../SaluteOra/docs/queueable-actions-guide.md)

# Regola Namespace per Actions

**Il namespace dei file sotto app/ deve essere sempre `Modules\\<NomeModulo>\\Actions\\...` e MAI `Modules\\<NomeModulo>\\App\\Actions\\...`**

Motivazione: PSR-4, autoload Composer, coerenza, manutenzione.

Esempio:
```php
// Corretto
namespace Modules\SaluteOra\Actions\Patient\Calendar;
// Errato
namespace Modules\SaluteOra\App\Actions\Patient\Calendar;
```

Vedi anche: SaluteOra/docs/directory-structure.md
