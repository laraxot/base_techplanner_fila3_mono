<?php
/**
 * guardare come fa sentry
 */

declare(strict_types=1);

namespace Modules\Xot\Exceptions\Handlers;

use Illuminate\Contracts\Container\Container;
use Illuminate\Contracts\Debug\ExceptionHandler;
use Symfony\Component\HttpFoundation\Response as SymfonyResponse;
use Throwable;

class HandlerDecorator implements ExceptionHandler
{
    public function __construct(
        private readonly HandlersRepository $handlers
    ) {}

    public function __call(string $name, array $parameters): mixed
    {
        if (method_exists($this->handlers, $name)) {
            return $this->handlers->$name(...$parameters);
        }

        throw new \BadMethodCallException(sprintf(
            'Il metodo %s non esiste nell\'handler delle eccezioni',
            $name
        ));
    }

    /**
     * Report or log an exception.
     *
     * @param \Throwable $e
     */
    public function report(Throwable $e): void
    {
        $reporters = $this->handlers->getReporters($e);
        foreach ($reporters as $reporter) {
            if (method_exists($reporter, 'report')) {
                $reporter->report($e);
            }
        }
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Throwable $e
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function render($request, Throwable $e): SymfonyResponse
    {
        $renderers = $this->handlers->getRenderers($e);
        foreach ($renderers as $renderer) {
            if (method_exists($renderer, 'render')) {
                return $renderer->render($request, $e);
            }
        }

        throw $e;
    }

    /**
     * Render an exception to the console.
     *
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     * @param \Throwable $e
     */
    public function renderForConsole($output, Throwable $e): void
    {
        $renderers = $this->handlers->getConsoleRenderers($e);
        foreach ($renderers as $renderer) {
            if (method_exists($renderer, 'render')) {
                $renderer->render($output, $e);
                return;
            }
        }

        throw $e;
    }

    public function reporter(): HandlersRepository
    {
        return $this->handlers;
    }

    public function renderer(): HandlersRepository
    {
        return $this->handlers;
    }

    public function consoleRenderer(): HandlersRepository
    {
        return $this->handlers;
    }

    public function shouldReport(\Throwable $e): bool
    {
        return $this->handlers->shouldReport($e);
    }
}
