---
description: Regole complete per l'implementazione dei modelli in Laraxot/<nome progetto>
globs: ["**/*.php", "**/Models/*.php"]
alwaysApply: true
---

# Regole per i Modelli in Laraxot/<nome progetto>

## Principi Fondamentali

- **Ereditarietà Corretta:** I modelli DEVONO estendere SOLO il `BaseModel` del proprio modulo
- **No Casting Property:** MAI utilizzare la proprietà `$casts`, implementare il metodo `casts()`
- **Proprietà Protette:** Tutte le proprietà di sistema devono essere `protected`
- **Tipizzazione Completa:** Annotare TUTTE le proprietà e i metodi con tipi corretti
- **Documentazione:** PHPDoc completa per tutte le proprietà e relazioni

## Ereditarietà dei Modelli

### ✅ Implementazione Corretta

```php
<?php

declare(strict_types=1);

namespace Modules\Performance\Models;

class PerformanceIndividuale extends BaseModel
{
    // Implementazione...
}
```

### ❌ Anti-pattern da Evitare

```php
<?php

// ❌ MAI fare questo
namespace Modules\Performance\Models;

use Illuminate\Database\Eloquent\Model;
use Modules\Xot\Models\XotBaseModel;

class PerformanceIndividuale extends Model // NO! Non estendere direttamente Model
{
    // ...
}

class PerformanceIndividuale extends XotBaseModel // NO! Non estendere XotBaseModel
{
    // ...
}
```

## Proprietà del Modello

### Proprietà $fillable

```php
<?php

declare(strict_types=1);

namespace Modules\Performance\Models;

class PerformanceIndividuale extends BaseModel
{
    /**
     * @var list<string>
     */
    protected $fillable = [
        'stabi',
        'tipo',
        'importo',
        'anno',
        'valutatore_id',
    ];

    // resto dell'implementazione...
}
```

### Proprietà $hidden e $with

```php
/**
 * @var list<string>
 */
protected $hidden = ['password', 'remember_token'];

/**
 * @var list<string>
 */
protected $with = ['relatedModel'];
```

## Metodo casts() vs Proprietà $casts

### ✅ Implementazione Corretta

```php
/**
 * Get the attributes that should be cast.
 *
 * @return array<string, string>
 */
protected function casts(): array
{
    return [
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
        'is_active' => 'boolean',
        'importo' => 'decimal:2',
        'type' => WorkerType::class,
    ];
}
```

### ❌ Anti-pattern da Evitare

```php
// ❌ MAI fare questo
protected $casts = [
    'created_at' => 'datetime',
    'is_active' => 'boolean',
];
```

## Documentazione delle Proprietà

```php
/**
 * @property int $id
 * @property int|null $stabi
 * @property string|null $tot_budget_assegnato
 * @property string|null $tot_quota_effettiva
 * @property string|null $tot_resti
 * @property string|null $delta
 * @property int|null $anno
 * @property \Carbon\Carbon|null $created_at
 * @property \Carbon\Carbon|null $updated_at
 * @property-read \Modules\User\Models\User|null $valutatore
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Modules\Performance\Models\PerformanceIndividuale> $valutazioni
 */
class OrganizzativaTotStabi extends BaseModel
{
    // Implementazione...
}
```

## Relazioni

### Relazioni One-to-Many e Many-to-Many

```php
/**
 * @return \Illuminate\Database\Eloquent\Relations\HasMany<\Modules\Performance\Models\PerformanceIndividuale>
 */
public function valutazioni(): \Illuminate\Database\Eloquent\Relations\HasMany
{
    return $this->hasMany(PerformanceIndividuale::class, 'stabi', 'stabi');
}

/**
 * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany<\Modules\User\Models\User>
 */
public function utenti(): \Illuminate\Database\Eloquent\Relations\BelongsToMany
{
    return $this->belongsToMany(User::class, 'user_stabi', 'stabi_id', 'user_id')
        ->withTimestamps();
}
```

### Relazioni One-to-One e Belongs-To

```php
/**
 * @return \Illuminate\Database\Eloquent\Relations\BelongsTo<\Modules\User\Models\User, \Modules\Performance\Models\PerformanceIndividuale>
 */
public function valutatore(): \Illuminate\Database\Eloquent\Relations\BelongsTo
{
    return $this->belongsTo(User::class, 'valutatore_id');
}

/**
 * @return \Illuminate\Database\Eloquent\Relations\HasOne<\Modules\Performance\Models\ValutazioneDettaglio>
 */
public function dettaglio(): \Illuminate\Database\Eloquent\Relations\HasOne
{
    return $this->hasOne(ValutazioneDettaglio::class);
}
```

## Mutator e Accessor

```php
/**
 * Get the user's full name.
 */
public function getFullNameAttribute(): string
{
    return "{$this->nome} {$this->cognome}";
}

/**
 * Set the user's password.
 */
public function setPasswordAttribute(?string $value): void
{
    if ($value !== null) {
        $this->attributes['password'] = bcrypt($value);
    }
}
```

## Scopes

```php
/**
 * Scope a query to only include active users.
 *
 * @param \Illuminate\Database\Eloquent\Builder<\Modules\User\Models\User> $query
 * @return \Illuminate\Database\Eloquent\Builder<\Modules\User\Models\User>
 */
public function scopeActive(\Illuminate\Database\Eloquent\Builder $query): \Illuminate\Database\Eloquent\Builder
{
    return $query->where('is_active', true);
}

/**
 * Scope a query to filter by year.
 *
 * @param \Illuminate\Database\Eloquent\Builder<\Modules\Performance\Models\PerformanceIndividuale> $query
 * @param int $year
 * @return \Illuminate\Database\Eloquent\Builder<\Modules\Performance\Models\PerformanceIndividuale>
 */
public function scopeByYear(\Illuminate\Database\Eloquent\Builder $query, int $year): \Illuminate\Database\Eloquent\Builder
{
    return $query->where('anno', $year);
}
```

## Utilizzo di Enum

```php
/**
 * @property \Modules\Performance\Enums\WorkerType $type
 */
class IndividualePesi extends BaseModel
{
    /**
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'created_at' => 'datetime',
            'updated_at' => 'datetime',
            'type' => WorkerType::class,
        ];
    }
}
```

## Dipendenze tra Moduli

### Regole per Importazioni

```php
// ✅ CORRETTO: Utilizzare il modello dal namespace del modulo corrente
use Modules\Performance\Models\StabiDirigente;

// ❌ ERRATO: Utilizzare un modello da un altro modulo quando esiste nel modulo corrente
use Modules\Sigma\Models\StabiDirigente; // NO!
```

### Documentazione delle Dipendenze

```php
/**
 * Note sulla dipendenza cross-module:
 * Questo modello utilizza User dal modulo User per la relazione valutatore.
 * Se il modulo User viene modificato, verificare la compatibilità.
 *
 * @see \Modules\User\Models\User
 */
```

## Esempi Completi di Modelli

### OrganizzativaTotStabi (Performance)

```php
<?php

declare(strict_types=1);

namespace Modules\Performance\Models;

use Modules\User\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Carbon\Carbon;

/**
 * @property int $id
 * @property int|null $stabi
 * @property string|null $tot_budget_assegnato
 * @property string|null $tot_budget_assegnato_min_punteggio
 * @property string|null $tot_quota_effettiva
 * @property string|null $tot_quota_effettiva_min_punteggio
 * @property string|null $tot_resti
 * @property string|null $tot_resti_min_punteggio
 * @property string|null $delta
 * @property string|null $delta_min_punteggio
 * @property int|null $anno
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 * @property-read Collection<int, PerformanceIndividuale> $valutazioni
 */
class OrganizzativaTotStabi extends BaseModel
{
    /**
     * @var string
     */
    protected $table = 'tot_stabi_performance_organizzativa';

    /**
     * @var list<string>
     */
    protected $fillable = [
        'stabi',
        'tot_budget_assegnato',
        'tot_budget_assegnato_min_punteggio',
        'tot_quota_effettiva',
        'tot_quota_effettiva_min_punteggio',
        'tot_resti',
        'tot_resti_min_punteggio',
        'delta',
        'delta_min_punteggio',
        'anno',
    ];

    /**
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'created_at' => 'datetime',
            'updated_at' => 'datetime',
        ];
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany<PerformanceIndividuale>
     */
    public function valutazioni(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(PerformanceIndividuale::class, 'stabi', 'stabi');
    }
}
```

## Note Importanti

- Usare sempre `declare(strict_types=1);` all'inizio di ogni file
- Specificare tutti i tipi di ritorno e parametri
- Documentare tutte le proprietà con PHPDoc appropriato
- Mantenere coerenza nei namespace e nelle importazioni
- Utilizzare type-hint per tutti i parametri dei metodi
