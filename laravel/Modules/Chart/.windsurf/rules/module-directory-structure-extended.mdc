# Struttura dei Moduli nel Framework <nome progetto>: Analisi Approfondita

## Principi Fondamentali dell'Organizzazione dei Moduli

La struttura dei moduli nel framework <nome progetto> segue principi rigorosi che derivano da una combinazione di best practice Laravel, requisiti di PSR-4, e filosofia architetturale specifica del framework Xot. La corretta implementazione di questi principi è fondamentale per garantire l'integrità dell'autoloading, la coesione semantica del codice, e la manutenibilità a lungo termine del sistema.

## Anatomia di un Modulo Completo

Un modulo <nome progetto> completamente strutturato contiene la seguente gerarchia di directory e file:

```
Modules/
  ModuleName/                       # Nome del modulo (PascalCase)
    app/                            # Tutti i sorgenti PHP (OBBLIGATORIO)
      Actions/                      # Classi Action (pattern di single responsibility)
      Console/                      # Comandi Artisan
        Commands/                   # Comandi specifici del modulo
      Exceptions/                   # Eccezioni personalizzate
      Filament/                     # Componenti Filament (STRUTTURA CRITICA)
        Pages/                      # Pagine Filament (estendono XotBasePage)
        Resources/                  # Risorse Filament (estendono XotBaseResource)
          ModelName/                # Directory per risorsa specifica
            Pages/                  # Pagine specifiche per la risorsa
              ListModelNames.php    # Vista lista (estende XotBaseListRecords)
              CreateModelName.php   # Vista creazione (estende XotBaseCreateRecord)
              EditModelName.php     # Vista modifica (estende XotBaseEditRecord)
        Widgets/                    # Widget Filament (estendono XotBaseWidget)
      Http/                         # Componenti HTTP (STRUTTURA CRITICA)
        Controllers/                # Controller
        Livewire/                   # Componenti Livewire
        Middleware/                 # Middleware HTTP
        Requests/                   # Form Request per validazione
        Resources/                  # API Resources
      Models/                       # Modelli Eloquent
      Policies/                     # Policy di autorizzazione
      Providers/                    # Service Provider (STRUTTURA CRITICA)
        FilamentServiceProvider.php # Provider per Filament
        RouteServiceProvider.php    # Provider per il routing
        EventServiceProvider.php    # Provider per gli eventi
        ModuleNameServiceProvider.php # Provider principale del modulo
      Repositories/                 # Classi repository (pattern repository)
      Services/                     # Servizi del dominio
      States/                       # Stati dei modelli (con Spatie State Machine)
        ModelName/                  # Stati specifici per modello
          States/                   # Classi di stato
          Transitions/              # Classi di transizione
      Traits/                       # Trait PHP
      View/                         # Componenti di vista
        Components/                 # Componenti Blade
    config/                         # File di configurazione
    database/                       # Definizioni database
      factories/                    # Factory per test
      migrations/                   # Migrazioni del database
      seeders/                      # Seeder del database
    docs/                           # Documentazione (TUTTO IN MINUSCOLO)
      README.md                     # Indice principale della documentazione
      architecture/                 # Documenti sull'architettura
      providers/                    # Documentazione dei provider
      filament/                     # Documentazione Filament
    lang/                           # File di traduzione
      it/                           # Traduzioni italiane
      en/                           # Traduzioni inglesi
    resources/                      # Asset frontend
      assets/                       # Asset statici
        js/                         # Script JavaScript
        css/                        # Stili CSS
      views/                        # Template Blade
        filament/                   # Viste Filament (STRUTTURA CRITICA)
          resources/                # Template per risorse
          pages/                    # Template per pagine
          widgets/                  # Template per widget (KEBAB-CASE)
    routes/                         # Definizioni di route
      api.php                       # Route API
      web.php                       # Route web
    tests/                          # Test automatici
      Feature/                      # Test di feature
      Unit/                         # Test unitari
    composer.json                   # Dipendenze del modulo
    module.json                     # Metadati del modulo
    package.json                    # Dipendenze frontend
    webpack.mix.js                  # Configurazione build frontend
```

## Regole Critiche e Loro Motivazioni Architetturali

### 1. La Directory `app/` come Container Principale

**Regola Inviolabile**: Tutte le classi PHP DEVONO essere posizionate sotto la directory `app/` del modulo.

**Motivazioni Architetturali**:
- **Autoloading PSR-4**: La configurazione dell'autoloader in `composer.json` mappa `Modules\\ModuleName\\` alla radice del modulo.
- **Coerenza con Laravel**: Rispecchia la struttura standard di Laravel che posiziona tutte le classi sotto `app/`.
- **Prevenzione dell'Ambiguità**: Evita conflitti di namespace e problemi di risoluzione delle classi.
- **Isolamento Semantico**: Separa chiaramente il codice applicativo dagli asset, configurazioni e risorse.

**Esempi di Violazioni Comuni**:
```
// ERRATO ❌
Modules/ModuleName/Controllers/ExampleController.php
Modules/ModuleName/Http/Controllers/ExampleController.php

// CORRETTO ✅
Modules/ModuleName/app/Http/Controllers/ExampleController.php
```

### 2. Struttura HTTP Rigorosamente Gerarchica

**Regola Inviolabile**: Tutti i componenti HTTP devono seguire la gerarchia `app/Http/{tipo}/`.

**Motivazioni Architetturali**:
- **Mappatura Concettuale**: Riflette la relazione gerarchica tra HTTP come protocollo e i suoi vari componenti.
- **Discovery Automatica**: Facilita la scoperta automatica di controller, middleware, ecc.
- **Separazione delle Preoccupazioni**: Mantiene una chiara separazione tra diversi tipi di componenti HTTP.
- **Omogeneità Cross-Module**: Garantisce coerenza nella localizzazione dei componenti tra moduli diversi.

**Dettagli di Implementazione**:
- **Controllers**: `app/Http/Controllers/`
- **Middleware**: `app/Http/Middleware/`
- **Requests**: `app/Http/Requests/`
- **Resources**: `app/Http/Resources/`
- **Livewire**: `app/Http/Livewire/` (IMPORTANTE: NON `Http/Livewire/`)

### 3. Componenti Filament con Struttura Rigorosa

**Regola Inviolabile**: I componenti Filament devono seguire una struttura di directory specifica e estendere solo classi `XotBase*`.

**Motivazioni Architetturali**:
- **Estensibilità Controllata**: Permette di evolvere l'implementazione Filament sottostante senza impatto sui moduli.
- **Uniformità dell'Esperienza**: Garantisce comportamenti coerenti tra tutti i moduli.
- **Incapsulamento delle Dipendenze**: Isola i moduli dai cambiamenti nelle API di Filament.
- **Flessibilità di Personalizzazione**: Centralizza le personalizzazioni nelle classi base per evitare duplicazioni.

**Struttura Critica per Filament**:
```
app/
  Filament/
    Pages/           # Estende XotBasePage
    Resources/       # Estende XotBaseResource
      Model/
        Pages/       # Estende XotBaseListRecords, ecc.
    Widgets/         # Estende XotBaseWidget
```

### 4. Directory di Risorse con Mapping Specifica

**Regola Inviolabile**: Le risorse vista devono seguire una struttura che rispecchia i tipi di componenti.

**Motivazioni Architetturali**:
- **Corrispondenza Strutturale**: Le viste devono riflettere la struttura delle classi che le utilizzano.
- **Localizzazione Prevedibile**: Facilita il trovare la vista associata a un componente.
- **Separazione dei Contesti**: Mantiene viste di tipo diverso in directory separate.

**Struttura Critica per le Viste**:
```
resources/
  views/
    filament/           # Base per tutte le viste Filament
      resources/        # Viste per risorse specifiche
      pages/            # Viste per pagine standalone
      widgets/          # Viste per widget (KEBAB-CASE)
```

**Convenzione di Riferimento**:
```php
// Per widget
protected static string $view = 'modulename::filament.widgets.widget-name';

// Per pagine
protected static string $view = 'modulename::filament.pages.page-name';
```

### 5. Documentazione con Nomenclatura Rigorosa

**Regola Inviolabile**: Tutti i file e le cartelle in `docs/` devono essere in minuscolo, eccetto `README.md`.

**Motivazioni Architetturali**:
- **Coerenza Visiva**: Uniformità nella presentazione della documentazione.
- **Compatibilità Cross-Platform**: Evita problemi con filesystem case-sensitive.
- **Convenzione Universale**: Allineamento con standard di documentazione comuni.
- **Distinzione Speciale**: `README.md` è universalmente riconosciuto come punto di ingresso della documentazione.

**Esempi di Nomenclatura Corretta**:
```
docs/
  README.md            # CORRETTO ✅
  architecture/        # CORRETTO ✅
  service-providers.md # CORRETTO ✅

  Architecture/        # ERRATO ❌
  ServiceProviders.md  # ERRATO ❌
  Readme.md            # ERRATO ❌
```

## Strumenti di Verifica e Correzione della Struttura

### Verifica della Struttura del Modulo

Il seguente comando può essere utilizzato per verificare che un modulo segua correttamente la struttura richiesta:

```bash
find Modules/ModuleName -type d -not -path "*/vendor/*" | sort
```

### Correzione della Directory HTTP

Se un modulo ha componenti HTTP nella posizione errata, utilizzare:

```bash
# Crea le directory corrette
mkdir -p Modules/ModuleName/app/Http/{Controllers,Middleware,Requests,Resources,Livewire}

# Sposta i file nella posizione corretta
for dir in Controllers Middleware Requests Resources; do
  if [ -d "Modules/ModuleName/Http/$dir" ]; then
    mv Modules/ModuleName/Http/$dir/* Modules/ModuleName/app/Http/$dir/ 2>/dev/null
    rmdir Modules/ModuleName/Http/$dir
  fi
done

# Rimuovi la directory HTTP vuota
rmdir Modules/ModuleName/Http 2>/dev/null
```

### Correzione della Nomenclatura della Documentazione

Per correggere i nomi dei file e delle cartelle nella documentazione:

```bash
find Modules/ModuleName/docs -type f -not -name "README.md" | while read file; do
  dir=$(dirname "$file")
  filename=$(basename "$file")
  new_filename=$(echo "$filename" | tr 'A-Z' 'a-z')
  if [ "$filename" != "$new_filename" ]; then
    mv "$file" "$dir/$new_filename"
    echo "Rinominato: $filename -> $new_filename"
  fi
done

find Modules/ModuleName/docs -type d | sort -r | while read dir; do
  dirname=$(basename "$dir")
  new_dirname=$(echo "$dirname" | tr 'A-Z' 'a-z')
  if [ "$dirname" != "$new_dirname" ] && [ "$dirname" != "docs" ]; then
    parent=$(dirname "$dir")
    mv "$dir" "$parent/$new_dirname"
    echo "Rinominato directory: $dirname -> $new_dirname"
  fi
done
```

## Impatto delle Violazioni Strutturali

Le violazioni della struttura dei moduli possono causare una serie di problemi, tra cui:

1. **Errori di Autoloading**: Classi non trovate dal sistema di autoloading.
2. **Confusione per gli Sviluppatori**: Difficoltà nel trovare i file.
3. **Incongruenze di Comportamento**: Funzionalità che si comportano diversamente tra moduli.
4. **Problemi di Manutenzione**: Aumento dei costi di manutenzione e aggiornamento.
5. **Errori di Runtime**: Fallimenti inaspettati causati da riferimenti errati.

## Conclusione: La Struttura come Manifestazione di Design

La struttura dei moduli nel framework <nome progetto> non è semplicemente una convenzione arbitraria, ma una manifestazione concreta dei principi di design e delle scelte architetturali che guidano il sistema. Aderire a questa struttura non è solo una questione di conformità, ma di rispetto per l'integrità architettonica del framework e di contributo alla sua sostenibilità e manutenibilità nel lungo periodo.

Il rispetto rigoroso di queste convenzioni strutturali è un prerequisito per lo sviluppo di moduli che si integrano armoniosamente nell'ecosistema <nome progetto> e che possono evolversi in modo sostenibile nel tempo.
