---
description:
globs:
alwaysApply: true
---
# Best Practices Messaggi di Validazione Laravel

## Quando applicare (WHEN)
- Quando definisci regole di validazione in FormRequest o controller
- Quando personalizzi messaggi di errore
- Quando traduci messaggi di validazione

## Cosa fare (THEN)
- Personalizza SEMPRE i nomi dei campi con `attributes()` usando `__()`
- Per array di campi usa `campo.*.sotto_campo` e placeholder `:position`
- Scrivi messaggi custom con `messages()` per casi complessi
- Centralizza i messaggi comuni in `validation.php`, override solo se necessario
- Usa i file Laravel-Lang/lang per copertura multilingua
- Documenta ogni eccezione o regola custom

## Perché (BECAUSE)
- Migliora l'esperienza utente con messaggi chiari e localizzati
- Facilita la manutenzione e l'estensione multilingua
- Evita errori e ambiguità nei form

## Esempi

### FormRequest
```php
class StoreUserRequest extends BaseFormRequest {
    public function rules() {
        return [
            'email' => ['required', 'email', 'max:255'],
            'password' => ['required', 'min:8'],
        ];
    }
    public function messages() {
        return [
            'email.required' => __('user.fields.email_required'),
            'password.min' => __('user.fields.password_min'),
        ];
    }
    public function attributes() {
        return [
            'email' => __('user.fields.email'),
            'password' => __('user.fields.password'),
        ];
    }
}
```

### File di traduzione
```php
// resources/lang/it/user.php
return [
    'fields' => [
        'email' => 'Email',
        'password' => 'Password',
        'email_required' => 'L\'email è obbligatoria',
        'password_min' => 'La password deve essere di almeno 8 caratteri',
    ],
];
```

## Checklist
- [ ] Nomi campi personalizzati in attributes()
- [ ] Messaggi custom in messages() dove serve
- [ ] Nessun testo hardcoded nei controller
- [ ] File di traduzione aggiornati
- [ ] Placeholder usati correttamente per array
- [ ] Documentazione aggiornata

## Errori Comuni
- Messaggi hardcoded nei controller
- Mancanza di attributi personalizzati
- Mancanza di traduzioni per i messaggi custom
- Mancanza di placeholder per array

## FAQ
**D: Posso usare solo validation.php di Laravel?**
R: Sì, ma per progetti multilingua e modulari è meglio separare per modulo.

**D: Come gestisco messaggi diversi per array?**
R: Usa la sintassi `campo.*.sotto_campo` e placeholder `:position`.

## Collegamenti
- [Laravel Validation Docs](mdc:https:/laravel.com/docs/validation)
- [Laravel Lang](mdc:https:/github.com/Laravel-Lang/lang)
- [README validazione](mdc:../../Modules/Lang/docs/validation-messages.md)
