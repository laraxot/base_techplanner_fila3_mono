# Regole per la Localizzazione

## Configurazione

### 1. File di Configurazione
- ✅ SEMPRE sincronizzare `config/app.php` e `config/laravellocalization.php`
- ✅ SEMPRE definire le stesse lingue in tutti i file di configurazione
- ❌ NON usare lingue non configurate in `supportedLocales`
- ✅ SEMPRE definire una lingua di fallback

### 2. ServiceProvider
- ✅ SEMPRE verificare le configurazioni all'avvio
- ✅ SEMPRE gestire gli errori di configurazione
- ✅ SEMPRE loggare i problemi di localizzazione
- ❌ NON assumere che le configurazioni siano corrette

### 3. Middleware
- ✅ SEMPRE usare `LocaleMiddleware`
- ✅ SEMPRE gestire il redirect delle lingue
- ✅ SEMPRE mantenere la coerenza degli URL
- ❌ NON bypassare i middleware di localizzazione

## Implementazione

### 1. Traduzioni
- ✅ SEMPRE usare file di traduzione
- ✅ SEMPRE seguire la struttura standard
- ❌ NON hardcodare stringhe
- ✅ SEMPRE gestire i fallback

### 2. Route
- ✅ SEMPRE usare il gruppo di route localizzate
- ✅ SEMPRE gestire il prefisso della lingua
- ❌ NON mescolare route localizzate e non
- ✅ SEMPRE mantenere la coerenza degli URL

### 3. Views
- ✅ SEMPRE usare helper di traduzione
- ✅ SEMPRE gestire tutte le lingue supportate
- ❌ NON hardcodare testi
- ✅ SEMPRE gestire i fallback

## Best Practices

### 1. Configurazione
```php
// config/app.php
'locale' => 'it',
'fallback_locale' => 'it',
'available_locales' => ['it', 'en'],

// config/laravellocalization.php
'supportedLocales' => [
    'it' => [
        'name' => 'Italiano',
        'script' => 'Latn',
        'native' => 'Italiano',
        'regional' => 'it_IT',
    ],
    'en' => [
        'name' => 'English',
        'script' => 'Latn',
        'native' => 'English',
        'regional' => 'en_GB',
    ],
],
```

### 2. ServiceProvider
```php
public function boot()
{
    $defaultLocale = config('app.locale');
    $supportedLocales = config('laravellocalization.supportedLocales');

    if (!isset($supportedLocales[$defaultLocale])) {
        throw new UnsupportedLocaleException(
            "La lingua predefinita '$defaultLocale' non è supportata"
        );
    }
}
```

### 3. Route
```php
Route::group([
    'prefix' => LaravelLocalization::setLocale(),
    'middleware' => ['localeSessionRedirect', 'localizationRedirect'],
], function () {
    // Route localizzate
});
```

## Errori Comuni

### 1. UnsupportedLocaleException
- **Causa**: Lingua predefinita non in `supportedLocales`
- **Soluzione**: Sincronizzare le configurazioni
- **Prevenzione**: Verificare all'avvio

### 2. MissingTranslationException
- **Causa**: Chiave di traduzione mancante
- **Soluzione**: Aggiungere tutte le traduzioni
- **Prevenzione**: Test completi

### 3. InvalidLocaleException
- **Causa**: Lingua non valida in URL
- **Soluzione**: Validare le lingue
- **Prevenzione**: Usare middleware

## Note Importanti
1. **Configurazione**:
   - Verificare sempre la coerenza
   - Mantenere aggiornate le lingue
   - Gestire i fallback

2. **Manutenzione**:
   - Aggiornare le traduzioni
   - Verificare le configurazioni
   - Testare tutte le lingue

3. **Performance**:
   - Cachare le traduzioni
   - Ottimizzare i caricamenti
   - Gestire la memoria

4. **Sicurezza**:
   - Validare gli input
   - Sanitizzare le traduzioni
   - Proteggere da XSS

## Struttura dei File di Configurazione
- I file di configurazione delle sezioni sono in `laravel/config/local/<nome progetto>/database/content/sections/`
- Ogni sezione ha un file JSON che definisce i blocchi e le loro proprietà
- I blocchi di tipo "language-selector" devono usare il view corretto definito nel JSON

## Componenti di Lingua
- Il selettore di lingua deve essere implementato come blocco di tipo "language-selector"
- Il view deve corrispondere a quello definito nel JSON della sezione
- Per l'header, il view deve essere "pub_theme::components.blocks.language-selector"

## Best Practices
1. **Configurazione**:
   - Verificare sempre il file JSON della sezione per il view corretto
   - Non assumere il percorso del view senza verificare la configurazione
   - Mantenere la coerenza tra configurazione e implementazione

2. **Implementazione**:
   - Usare il view specificato nel JSON
   - Mantenere la struttura dei blocchi come definita
   - Seguire le convenzioni di naming

3. **Verifica**:
   - Controllare sempre il file di configurazione prima di modificare un componente
   - Verificare che il view corrisponda a quello definito
   - Assicurarsi che la struttura dei blocchi sia corretta

## Errori Comuni
1. ❌ Assumere il percorso del view senza verificare la configurazione
2. ❌ Implementare un selettore di lingua senza seguire la struttura dei blocchi
3. ❌ Modificare un componente senza controllare il file JSON della sezione

## Esempi
```json
{
    "name": "Selettore Lingua",
    "type": "language-selector",
    "data": {
        "view": "pub_theme::components.blocks.language-selector"
    }
}
```

## Collegamenti
- [Documentazione Localizzazione](../../laravel/Modules/Lang/docs/README.md)
- [Documentazione Sezioni](../../laravel/Themes/One/docs/sections.md)
- [Best Practices](../../laravel/Themes/One/docs/best_practices.md)
