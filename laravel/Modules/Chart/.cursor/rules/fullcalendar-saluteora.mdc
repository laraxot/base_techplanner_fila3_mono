---
description:
globs:
alwaysApply: true
---
# Regole FullCalendar Multi-Tenant per <nome progetto>

## Principi Fondamentali

### Estensione delle Classi Base
- **SEMPRE** estendere direttamente `Saade\FilamentFullCalendar\Widgets\FullCalendarWidget`
- **MAI** utilizzare `Modules\Xot\Filament\Widgets\XotBaseFullCalendarWidget` (non esiste nel modulo Xot)
- Utilizzare il trait `Modules\<nome progetto>\Traits\HasFullCalendarConfig` per configurazioni comuni

### AdminPanelProvider - Configurazione Centralizzata
- **SEMPRE** configurare FullCalendar nel `AdminPanelProvider.php`
- **SEMPRE** utilizzare configurazioni centralizzate da `config/fullcalendar.php`
- **SEMPRE** implementare il metodo `getFullCalendarConfig()` privato
- **SEMPRE** utilizzare plugin specifici: `dayGrid`, `timeGrid`, `list`, `interaction`, `multiMonth`, `scrollGrid`

### Architettura Multi-Tenant con Parental STI
- **Single Table Inheritance**: Utilizzo di `tightenco/parental` per tipi utente
- **3 tipi di utente**: Patient, Doctor, Admin (non ruoli ma tipi)
- **Tenancy di Filament**: Utilizzare `Filament::getTenant()` per studio corrente
- **Isolamento dati**: Ogni widget filtra automaticamente per permessi utente
- **Sicurezza**: Policy e controlli di accesso sempre implementati

### Namespace e Struttura
- Widget calendar: `Modules\<nome progetto>\Filament\Widgets\`
- Modelli: `Modules\<nome progetto>\Models\`
- Enum: `Modules\<nome progetto>\Enums\`
- Trait: `Modules\<nome progetto>\Traits\`
- Middleware: `Modules\<nome progetto>\Http\Middleware\`
- Provider: `Modules\<nome progetto>\Providers\Filament\AdminPanelProvider`

## AdminPanelProvider - Implementazione Corretta

### Struttura Obbligatoria

```php
<?php

namespace Modules\<nome progetto>\Providers\Filament;

use Filament\Panel;
use Modules\Xot\Providers\Filament\XotBasePanelProvider;
use Saade\FilamentFullCalendar\FilamentFullCalendarPlugin;

class AdminPanelProvider extends XotBasePanelProvider
{
    protected string $module = '<nome progetto>';

    public function panel(Panel $panel): Panel
    {
        // Configurazione plugin FullCalendar
        $calendarPlugin = FilamentFullCalendarPlugin::make()
            ->schedulerLicenseKey(config('fullcalendar.scheduler_license_key'))
            ->selectable(true)
            ->editable(true)
            ->timezone(config('fullcalendar.localization.timezone', 'Europe/Rome'))
            ->locale(config('fullcalendar.localization.locale', 'it'))
            ->plugins([
                'dayGrid',
                'timeGrid',
                'list',
                'interaction',
                'multiMonth',
                'scrollGrid',
            ])
            ->config($this->getFullCalendarConfig());

        $panel = parent::panel($panel);
        $panel->plugin($calendarPlugin);

        return $panel;
    }

    private function getFullCalendarConfig(): array
    {
        // Implementazione completa con tutte le configurazioni
    }
}
```

### Configurazioni Obbligatorie nel Provider

#### 1. Localizzazione Completa
- **SEMPRE** utilizzare configurazioni da `config('fullcalendar.localization')`
- **SEMPRE** impostare `locale => 'it'` e `timezone => 'Europe/Rome'`
- **SEMPRE** includere `buttonText` localizzato

#### 2. Sicurezza Avanzata
- **SEMPRE** implementare `eventAllow` per controlli drag&drop
- **SEMPRE** implementare `selectAllow` per validazione selezioni
- **SEMPRE** verificare `can_edit` nelle proprietà estese

#### 3. Gestione Emergenze
- **SEMPRE** implementare `eventDidMount` per icone emergenza 🚨
- **SEMPRE** aggiungere classi CSS dinamiche con `eventClassNames`
- **SEMPRE** supportare tooltip con proprietà estese

#### 4. Business Hours Sanitarie
- **SEMPRE** configurare orari di lavoro: Lun-Sab 08:00-19:00
- **SEMPRE** applicare `eventConstraint` e `selectConstraint`
- **SEMPRE** utilizzare slot da 30 minuti per appuntamenti

## Configurazione config/fullcalendar.php

### Sezioni Obbligatorie

#### Scheduler License Key
```php
'scheduler_license_key' => env('FULLCALENDAR_SCHEDULER_LICENSE_KEY'),
```

#### Configurazioni Widget Specifiche
```php
'widgets' => [
    'patient' => [
        'editable' => false,
        'selectable' => false,
        'initialView' => 'timeGridWeek',
        // ... configurazioni sola lettura
    ],
    'doctor' => [
        'editable' => true,
        'selectable' => true,
        'initialView' => 'timeGridWeek',
        // ... configurazioni CRUD complete
    ],
    'admin' => [
        'editable' => true,
        'selectable' => true,
        'initialView' => 'dayGridMonth',
        // ... configurazioni vista globale
    ],
],
```

#### Performance e Caching
```php
'performance' => [
    'cache_ttl' => 300,
    'max_events' => 100,
    'lazy_fetching' => true,
    'enable_caching' => true,
    'prefetch_events' => true,
    'event_limit_per_day' => 20,
],
```

#### Sicurezza Avanzata
```php
'security' => [
    'mask_patient_names' => false,
    'audit_trail' => true,
    'log_user_actions' => true,
    'csrf_protection' => true,
    'rate_limiting' => true,
    'max_requests_per_minute' => 60,
],
```

#### Configurazioni Responsive
```php
'responsive' => [
    'mobile' => [
        'initial_view' => 'listWeek',
        'height' => 400,
        'aspect_ratio' => 1.0,
    ],
    'tablet' => [
        'initial_view' => 'timeGridWeek',
        'height' => 500,
        'aspect_ratio' => 1.2,
    ],
    'desktop' => [
        'initial_view' => 'timeGridWeek',
        'height' => 'auto',
        'aspect_ratio' => 1.35,
    ],
],
```

#### Regole di Validazione
```php
'validation' => [
    'min_duration_minutes' => 15,
    'max_duration_hours' => 8,
    'max_future_days' => 365,
    'min_advance_hours' => 1,
    'allow_past_events' => false,
    'allow_overlapping' => false,
    'require_patient' => true,
    'require_doctor' => true,
    'require_studio' => true,
],
```

## Implementazione Widget

### Proprietà Obbligatorie
```php
class MyCalendarWidget extends FullCalendarWidget
{
    use HasFullCalendarConfig;

    // Modello associato SEMPRE richiesto
    public Model|string|null $model = Appointment::class;

    // Ordinamento per dashboard
    protected static ?int $sort = 1;

    // Altezza massima consigliata
    protected static ?string $maxHeight = '600px';
}
```

### Metodi Richiesti

#### canView()
- **SEMPRE** implementare controllo accesso basato su tipo utente
- **SEMPRE** verificare tenancy per dottori
- **SEMPRE** utilizzare enum UserType per confronti

#### fetchEvents()
- **SEMPRE** utilizzare eager loading con `with()`
- **SEMPRE** filtrare per range di date: `whereBetween('start_time', [$fetchInfo['start'], $fetchInfo['end']])`
- **SEMPRE** restituire array di `EventData` objects
- **SEMPRE** implementare caching con `cache()->remember()`
- **MAI** restituire più di 100 eventi per chiamata

#### getFormSchema()
- **SEMPRE** restituire array associativo con chiavi string
- **SEMPRE** raggruppare campi in Section con chiavi descrittive
- **MAI** utilizzare `->label()` (gestito da LangServiceProvider)

#### config()
- **SEMPRE** utilizzare il trait `HasFullCalendarConfig`
- **SEMPRE** chiamare `parent::config()` se sovrascritto
- **SEMPRE** includere configurazione localizzata italiana

### Gestione Eventi

#### EventData Structure
```php
EventData::make()
    ->id($appointment->id)                    // SEMPRE richiesto
    ->title($this->formatEventTitle($appointment)) // SEMPRE formattato con trait
    ->start($appointment->start_time)         // SEMPRE datetime
    ->end($appointment->end_time)             // SEMPRE datetime
    ->backgroundColor($this->getAppointmentStatusColor($appointment->status->value))
    ->borderColor($this->getAppointmentTypeColor($appointment->type->value))
    ->textColor('#ffffff')                    // Contrasto leggibile
    ->extendedProps([                         // Dati aggiuntivi
        'patient_name' => $appointment->patient?->full_name,
        'doctor_name' => $appointment->doctor?->full_name,
        'status' => $appointment->status->value,
        'type' => $appointment->type->value,
        'tooltip' => $this->formatTooltip($appointment),
        'can_edit' => $this->canEditAppointment($appointment),
        'emergency' => $appointment->emergency,
    ])
```

#### Colori Standardizzati
- Utilizzare metodi del trait: `getAppointmentTypeColor()`, `getAppointmentStatusColor()`
- Schema colori da `config('fullcalendar.colors')`
- Stati appuntamenti: blu (scheduled), verde (confirmed), rosso (cancelled)
- Priorità emergenze: rosso intenso (critical), arancione (high), verde (low)
- **MAI** hardcodare colori nei widget

## Widget Specifici Implementati

### PatientCalendarWidget
- **Estende**: `FullCalendarWidget`
- **Trait**: `HasFullCalendarConfig`
- **Vista**: `timeGridWeek`
- **Accesso**: `UserType::PATIENT`
- **Filtro**: `where('patient_id', auth()->id())`
- **Funzionalità**: Solo visualizzazione (sola lettura)
- **Configurazione**: `config('fullcalendar.widgets.patient')`

### DoctorCalendarWidget
- **Estende**: `FullCalendarWidget`
- **Trait**: `HasFullCalendarConfig`
- **Vista**: `timeGridWeek`
- **Accesso**: `UserType::DOCTOR` + tenancy
- **Filtro**: `where('studio_id', Filament::getTenant()->id)`
- **Funzionalità**: CRUD completo, drag&drop, resize
- **Configurazione**: `config('fullcalendar.widgets.doctor')`

### AdminCalendarWidget
- **Estende**: `FullCalendarWidget`
- **Trait**: `HasFullCalendarConfig`
- **Vista**: `dayGridMonth`
- **Accesso**: `UserType::ADMIN`
- **Filtro**: Tutti gli appuntamenti (opzionale per studio)
- **Funzionalità**: Vista globale, filtri avanzati
- **Configurazione**: `config('fullcalendar.widgets.admin')`

## Configurazioni Avanzate

### JavaScript Callbacks nel Provider

#### eventDidMount - Gestione Emergenze e Tooltip
```javascript
'eventDidMount' => 'function(info) {
    // Tooltip per eventi
    if (info.event.extendedProps.tooltip) {
        info.el.setAttribute("title", info.event.extendedProps.tooltip);
    }

    // Icona emergenza
    if (info.event.extendedProps.emergency) {
        const icon = document.createElement("span");
        icon.innerHTML = "🚨";
        icon.style.marginRight = "4px";
        info.el.querySelector(".fc-event-title").prepend(icon);
    }
}',
```

#### eventClassNames - Classi CSS Dinamiche
```javascript
'eventClassNames' => 'function(arg) {
    const classes = ["fc-event-<nome progetto>"];

    if (arg.event.extendedProps.emergency) {
        classes.push("fc-event-emergency");
    }

    if (arg.event.extendedProps.type) {
        classes.push("fc-event-type-" + arg.event.extendedProps.type);
    }

    if (arg.event.extendedProps.status) {
        classes.push("fc-event-status-" + arg.event.extendedProps.status);
    }

    return classes;
}',
```

#### selectAllow - Validazione Orari di Lavoro
```javascript
'selectAllow' => 'function(selectInfo) {
    const start = selectInfo.start;
    const businessHours = ' . json_encode($config['business_hours']) . ';
    const dayOfWeek = start.getDay();
    const hour = start.getHours();

    if (!businessHours.days_of_week.includes(dayOfWeek === 0 ? 7 : dayOfWeek)) {
        return false;
    }

    const startHour = parseInt(businessHours.start_time.split(":")[0]);
    const endHour = parseInt(businessHours.end_time.split(":")[0]);

    return hour >= startHour && hour < endHour;
}',
```

#### eventAllow - Controlli Sicurezza Drag&Drop
```javascript
'eventAllow' => 'function(dropInfo, draggedEvent) {
    return draggedEvent.extendedProps.can_edit === true;
}',
```

## CSS Personalizzato Obbligatorio

### Classi CSS per Temi <nome progetto>
```css
/* Tema <nome progetto> */
.fc-<nome progetto>-theme {
    --fc-border-color: #e5e7eb;
    --fc-button-bg-color: #3b82f6;
    --fc-button-border-color: #3b82f6;
    --fc-button-hover-bg-color: #2563eb;
    --fc-button-active-bg-color: #1d4ed8;
}

/* Eventi emergenza */
.fc-event-emergency {
    background-color: #ef4444 !important;
    border-color: #dc2626 !important;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

/* Eventi per tipo */
.fc-event-type-consultation { border-left: 4px solid #3b82f6; }
.fc-event-type-treatment { border-left: 4px solid #f59e0b; }
.fc-event-type-emergency { border-left: 4px solid #ef4444; }

/* Eventi per stato */
.fc-event-status-completed { opacity: 0.8; }
.fc-event-status-cancelled {
    text-decoration: line-through;
    background-color: #6b7280 !important;
}
```

## Sicurezza e Controlli Accesso

### Middleware EnsureUserType
- **SEMPRE** utilizzare per proteggere panel
- **SEMPRE** verificare tipo utente con enum
- **SEMPRE** loggare accessi se configurato
- Sintassi: `EnsureUserType::class.':patient'`

### Policy AppointmentPolicy
- **SEMPRE** implementare controlli granulari
- **SEMPRE** utilizzare match expression con UserType
- **SEMPRE** verificare tenancy per dottori
- **SEMPRE** filtrare dati sensibili per pazienti

### Privacy e Audit
- Mascheramento nomi pazienti se configurato
- Audit trail per modifiche eventi
- Logging delle azioni utente
- Crittografia dati sensibili

## Performance e Ottimizzazioni

### Caching Avanzato
- **SEMPRE** utilizzare caching per eventi: `cache()->remember()`
- **SEMPRE** generare chiave cache con `getCacheKey()` del trait
- **SEMPRE** impostare TTL appropriato (300 secondi default)
- **SEMPRE** invalidare cache su modifiche

### Query Optimization
- **SEMPRE** utilizzare eager loading: `with(['patient', 'doctor', 'studio'])`
- **SEMPRE** limitare query con `limit()` (100 eventi max)
- **SEMPRE** utilizzare `lazy_fetching` per grandi dataset
- **SEMPRE** filtrare per range di date

### Responsive Design
- **SEMPRE** utilizzare configurazioni responsive
- **SEMPRE** adattare vista per mobile (`listWeek`)
- **SEMPRE** ridurre altezza per tablet
- **SEMPRE** testare su dispositivi diversi

## Variabili d'Ambiente

### .env Configuration Obbligatoria
```env
# FullCalendar Scheduler License (opzionale)
FULLCALENDAR_SCHEDULER_LICENSE_KEY=your-license-key-here

# Configurazioni cache
FULLCALENDAR_CACHE_TTL=300
FULLCALENDAR_MAX_EVENTS=100

# Configurazioni sicurezza
FULLCALENDAR_RATE_LIMIT=60
FULLCALENDAR_AUDIT_TRAIL=true

# Configurazioni notifiche
FULLCALENDAR_EMAIL_NOTIFICATIONS=true
FULLCALENDAR_SMS_NOTIFICATIONS=false
```

## Testing Obbligatorio

### Test AdminPanelProvider
```php
public function test_fullcalendar_plugin_is_configured()
{
    $provider = new AdminPanelProvider();
    $panel = $provider->panel(app(\Filament\Panel::class));

    $this->assertNotNull($panel);
    // Verifica che il plugin FullCalendar sia registrato
}

public function test_fullcalendar_config_is_complete()
{
    $config = config('fullcalendar');

    $this->assertArrayHasKey('scheduler_license_key', $config);
    $this->assertArrayHasKey('localization', $config);
    $this->assertArrayHasKey('widgets', $config);
    $this->assertArrayHasKey('performance', $config);
    $this->assertArrayHasKey('security', $config);
    $this->assertArrayHasKey('responsive', $config);
    $this->assertArrayHasKey('validation', $config);
}
```

## Errori Comuni da Evitare

### ❌ Errori di Configurazione AdminPanelProvider
- Non configurare il plugin FullCalendar nel provider
- Non implementare il metodo `getFullCalendarConfig()`
- Non utilizzare configurazioni centralizzate
- Non includere tutti i plugin necessari
- Non configurare scheduler license key

### ❌ Errori di Implementazione Widget
- Estendere classi Xot invece di Filament direttamente
- Non utilizzare trait HasFullCalendarConfig
- Non implementare controlli di accesso canView()
- Hardcodare colori nei widget
- Utilizzare `->label()` nei form components
- Non utilizzare enum per confronti tipo utente

### ❌ Errori di Performance
- Caricare troppi eventi contemporaneamente (>100)
- Non utilizzare caching
- Query N+1 nelle relazioni
- Non limitare range di date
- Non utilizzare eager loading

### ❌ Errori di Sicurezza
- Non verificare tenancy per dottori
- Esporre dati sensibili senza autorizzazione
- Non implementare middleware di protezione
- Non loggare azioni per audit trail
- Non mascherare nomi pazienti quando necessario

### ❌ Errori di Configurazione
- Non utilizzare configurazione centralizzata
- Non localizzare in italiano
- Non rispettare business hours sanitarie
- Non implementare responsive design
- Non configurare tooltip e accessibilità

## Documentazione Aggiornata

### File di Documentazione da Mantenere
- [fullcalendar_configuration.md](../laravel/Modules/<nome progetto>/docs/fullcalendar_configuration.md) - Configurazioni complete con AdminPanelProvider
- [fullcalendar_parental_widgets.md](../laravel/Modules/<nome progetto>/docs/fullcalendar_parental_widgets.md) - Architettura completa con Parental STI
- [fullcalendar_implementation_guide.md](../laravel/Modules/<nome progetto>/docs/fullcalendar_implementation_guide.md) - Guida step-by-step
- [theme-calendar-integration.md](../laravel/Modules/<nome progetto>/docs/theme-calendar-integration.md) - Integrazione con temi

### Aggiornamento Documentazione
- **SEMPRE** aggiornare documentazione per nuove configurazioni AdminPanelProvider
- **SEMPRE** documentare configurazioni personalizzate
- **SEMPRE** includere esempi di codice funzionanti
- **SEMPRE** linkare documentazione correlata
- **SEMPRE** mantenere coerenza tra file .md e .mdc

## Filosofia e Zen

### Principi Guida
- **Centralizzazione**: Tutte le configurazioni nel AdminPanelProvider
- **Semplicità**: Widget facili da comprendere e mantenere
- **Coerenza**: Schema colori e comportamenti uniformi tra widget
- **Accessibilità**: Supporto screen reader e navigazione keyboard
- **Performance**: Caricamento rapido e fluido con caching intelligente
- **Sicurezza**: Protezione dati sensibili sempre prioritaria

### Approccio Sanitario
- Priorità alla sicurezza dei dati pazienti
- Interfaccia intuitiva per operatori sanitari
- Gestione emergenze con priorità visive chiare (🚨)
- Workflow ottimizzati per ambiente ospedaliero multi-studio
- Conformità normative settore sanitario
- Audit trail completo per responsabilità legali

### Architettura Multi-Tenant
- Isolamento completo dati tra studi
- Tenancy trasparente per dottori
- Scalabilità orizzontale per nuovi studi
- Performance ottimizzate per tenant
- Backup e restore per tenant specifici

Ricorda: ogni configurazione deve essere centralizzata nell'AdminPanelProvider e ogni widget calendar deve essere progettato pensando all'operatore sanitario che lo utilizzerà in situazioni di stress e urgenza. La chiarezza, l'immediatezza e la sicurezza sono fondamentali per un sistema sanitario affidabile.
