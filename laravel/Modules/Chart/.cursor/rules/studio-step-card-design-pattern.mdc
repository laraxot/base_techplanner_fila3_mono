---
description: 
globs: 
alwaysApply: false
---
# Regola Cursor - Studio Step Card Design Pattern

## Ambito
- Globale (applicabile a tutti i widget con selezione studio/elementi)
- Specifico per wizard step con design card requirements

## Motivazione Critica  
- Prevenire errori architetturali come Select vs Card design specifications
- Garantire aderenza alle specifiche UI/UX definite
- Assicurare pattern consistenti per card-based selections

## Regole Obbligatorie

### 1. Specifications First
```php
// ✅ SEMPRE verificare specifiche design PRIMA di implementare
// Per design card: SEMPRE utilizzare card/pulsanti, MAI Select

// Design target: Card con pulsanti cliccabili
protected function getStepSchema(): array
{
    return [
        // Campo nascosto per valore selezionato  
        Form\TextInput::make('selected_item')->readonly()->hidden(),
        
        // Vista custom con card cliccabili
        Form\View::make('module::path.to.card-selector')
            ->viewData(fn (Get $get) => [
                'items' => $this->getItemsForSelection($get),
                'selectedItemId' => $get('selected_item')
            ])
    ];
}
```

### 2. Card Implementation Pattern
```blade
{{-- Pattern Vista Card Selector --}}
<div x-data="{ selectedItemId: @js($selectedItemId) }">
    @foreach($items as $item)
        <div 
            x-bind:class="{ 'ring-2 ring-blue-500': selectedItemId == '{{ $item->id }}' }"
            class="card-container cursor-pointer"
            x-on:click="selectItem({{ $item->id }}, '{{ $item->name }}')"
        >
            <h2 class="text-xl font-bold">{{ $item->name }}</h2>
            <p class="text-gray-600">{{ $item->description }}</p>
            
            <div class="action-button">
                <span x-show="selectedItemId != '{{ $item->id }}'">Seleziona</span>
                <span x-show="selectedItemId == '{{ $item->id }}'">Selezionato</span>
            </div>
        </div>
    @endforeach
</div>

<script>
function selectItem(itemId, itemName) {
    $wire.set('data.selected_item', itemId);
    // Notifica opzionale
}
</script>
```

### 3. Anti-pattern da Evitare
```php
// ❌ MAI utilizzare Select per design che richiede card
Select::make('selected_item')
    ->options($this->getItemOptions())
    ->searchable()

// ❌ MAI assumere approccio senza verificare specifiche design
// ❌ MAI prioritizzare velocità implementativa over design compliance
```

### 4. Checklist Design Compliance
```php
// ✅ Prima di implementare qualsiasi selection component:
// [ ] Letto specifiche design originali
// [ ] Verificato se richiede card layout o dropdown
// [ ] Confermato approccio con design specifications
// [ ] Implementato pattern corretto (card vs select)
// [ ] Testato UX conforme a specifiche
```

## Pattern Riutilizzabile

### Metodi Widget Standard
```php
// Pattern per oggetti completi (non solo options)
private function getItemsForSelectionFull(Get $get): Collection
{
    // Restituisce oggetti completi con tutti i dati per card display
    return Model::with(['relationships'])
        ->where($this->getFilterConditions($get))
        ->get();
}

// Pattern per campo nascosto + vista custom
protected function getSelectionSchema(string $fieldName, string $viewName): array
{
    return [
        Form\TextInput::make($fieldName)->readonly()->hidden(),
        Form\View::make($viewName)->viewData([...])
    ];
}
```

### JavaScript Alpine.js Pattern
```javascript
// Pattern per gestione selezione lato client
function selectItem(itemId, itemName) {
    this.selectedItemId = itemId;
    $wire.set('data.' + fieldName, itemId);
    
    // Feedback UX opzionale
    $dispatch('notify', {
        type: 'success',
        title: 'Elemento selezionato',
        body: 'Hai selezionato ' + itemName
    });
}
```

## Esempi Caso d'Uso

### Studio Selection (SaluteOra)
- **Design**: Card studi con nome, indirizzo, telefono, pulsante
- **Pattern**: Card cliccabili → TextInput nascosto
- **UX**: Ring blu per selezione, badge "Selezionato"

### Product Selection (E-commerce)
- **Design**: Card prodotto con immagine, prezzo, descrizione
- **Pattern**: Card cliccabili → hidden field + checkout
- **UX**: Visual feedback, quantity selectors

### Doctor Selection (Medical)
- **Design**: Card dottore con foto, specializzazione, rating
- **Pattern**: Card responsive → appointment booking
- **UX**: Availability indicators, booking CTAs

## Error Prevention

### Validation Pattern
```php
/** @test */
public function test_card_selection_populates_hidden_field()
{
    // Test che click su card popola campo nascosto correttamente
    // Test che UI mostra stato selezione visuale
    // Test che wizard può procedere con valore selezionato
}

public function test_design_specification_compliance()
{
    // Test che layout rispetta specifiche design
    // Test responsive behavior
    // Test accessibility compliance
}
```

## Storia Bugfix

### Caso Studio: FindDoctorAndAppointmentWidget
- **Errore**: Implementato Select invece di card design
- **Correzione**: Card/pulsanti → TextInput nascosto
- **Lesson**: Always specifications first, implementation second
- **Impatto**: UX migliorata, compliance design, pattern riutilizzabile

## Collegamenti Documentazione

- [SaluteOra: Studio Step Correction](mdc:../Modules/SaluteOra/docs/widgets/studio-step-correction-note.md)
- [SaluteOra: Find Doctor Analysis](mdc:../Modules/SaluteOra/docs/widgets/find-doctor-widget-studio-step-analysis.md)
- [UI Components: Card Patterns](mdc:../Modules/UI/docs/components.md)

---

Ultimo aggiornamento: 16 Gennaio 2025
Motivazione: Prevenzione errori architetturali design compliance
Priorità: ALTA - Pattern fondamentale per UX quality
