---
description:
globs:
alwaysApply: false
---
# Regola Obbligatoria: getTableColumns() in XotBaseListRecords

## Regola Fondamentale
Tutte le classi che estendono `XotBaseListRecords` DEVONO implementare il metodo `getTableColumns()`.

## Motivazione
Il trait `HasXotTable` e `TableLayoutEnum` richiedono questo metodo per:
- Automazione delle tabelle
- Compatibilità con layout grid/list
- Funzionamento corretto delle pagine lista

## Errore Senza getTableColumns()
```
BadMethodCallException
Method ClassName::getTableColumns does not exist.
```

## Implementazione Obbligatoria

### Firma del Metodo
```php
/**
 * Define the table columns for the list.
 *
 * @return array<string, \Filament\Tables\Columns\Column>
 */
public function getTableColumns(): array
{
    return [
        'id' => TextColumn::make('id')->sortable(),
        'name' => TextColumn::make('name')->searchable()->sortable(),
        'status' => BadgeColumn::make('status')
            ->colors([...])
            ->formatStateUsing(function (string $state): string { ... }),
        'created_at' => TextColumn::make('created_at')
            ->dateTime()
            ->sortable()
            ->toggleable(isToggledHiddenByDefault: true),
    ];
}
```

## Regole per l'Implementazione

### 1. Array Associativo con Chiavi Stringa
- ✅ `'id' => TextColumn::make('id')`
- ❌ `TextColumn::make('id')` (senza chiave)

### 2. Colonne Basate sul Modello
- Utilizzare campi dalla proprietà `$fillable` del modello
- Utilizzare relazioni definite nel modello
- Non inventare campi inesistenti

### 3. Nessuna Label Hardcoded
- ❌ `->label('ID')`
- ✅ Gestite automaticamente dal LangServiceProvider

### 4. Tipi di Colonna Appropriati
- `TextColumn` per testo, numeri, date, relazioni
- `BadgeColumn` per stati/status con colori
- `IconColumn` per valori booleani
- ❌ MAI `TextColumn::boolean()` (non esiste)

### 5. PHPDoc Completo
```php
/**
 * Define the table columns for the [entity] list.
 *
 * @return array<string, \Filament\Tables\Columns\Column>
 */
```

## Colonne Standard Raccomandate

### Sempre Includere
- `id`: Identificativo primario
- `created_at`: Data creazione (spesso nascosta)
- `updated_at`: Data aggiornamento (spesso nascosta)

### Per Entità con Stati
- `status`: Badge colorato con `formatStateUsing()`

### Per Entità con Relazioni
- Relazioni importanti (es. `user.name`, `category.name`)

### Configurazioni Raccomandate
```php
// ID sempre ordinabile
'id' => TextColumn::make('id')->sortable(),

// Nomi sempre ricercabili e ordinabili
'name' => TextColumn::make('name')->searchable()->sortable(),

// Date con formato e ordinamento
'created_at' => TextColumn::make('created_at')
    ->dateTime()
    ->sortable()
    ->toggleable(isToggledHiddenByDefault: true),

// Stati con badge colorati
'status' => BadgeColumn::make('status')
    ->colors([
        'secondary' => 'draft',
        'success' => 'published',
        'danger' => 'archived',
    ])
    ->formatStateUsing(function (string $state): string {
        return match ($state) {
            'draft' => 'Bozza',
            'published' => 'Pubblicato',
            'archived' => 'Archiviato',
            default => ucfirst($state)
        };
    }),

// Valori booleani con icone
'is_active' => IconColumn::make('is_active')
    ->boolean()
    ->trueIcon('heroicon-o-check-circle')
    ->falseIcon('heroicon-o-x-circle'),

// Relazioni con placeholder
'user' => TextColumn::make('user.name')
    ->searchable()
    ->sortable()
    ->placeholder('Non assegnato'),
```

## Import Necessari
```php
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Columns\IconColumn;
```

## Classi Interessate
Tutte le classi con pattern `*Resource\Pages\List*` che estendono:
- `XotBaseListRecords`
- Classi derivate da `XotBaseListRecords`

## Esempi di Fix Documentati
- [ListAppointments Fix](../laravel/Modules/SaluteOra/docs/list_appointments_gettablecolumns_fix.md)
- [ListAppointmentWorkflows Fix](../laravel/Modules/SaluteOra/docs/list_appointment_workflows_fix.md)

## Checklist Pre-Commit
- [ ] Metodo `getTableColumns()` implementato
- [ ] Array associativo con chiavi stringa
- [ ] Colonne basate sui campi del modello
- [ ] Nessuna label hardcoded
- [ ] PHPDoc completo con tipi generics
- [ ] Import delle classi Filament necessarie
- [ ] Test che la lista si carichi senza errori

## Conseguenze della Violazione
- ❌ `BadMethodCallException` all'accesso alle liste
- ❌ Impossibilità di utilizzare layout grid/list
- ❌ Malfunzionamento del trait `HasXotTable`
- ❌ Interfaccia utente non funzionante

## Filosofia
- **Filosofia**: Automazione intelligente, coerenza architetturale
- **Logica**: Un solo metodo per definire le colonne delle tabelle
- **Religione**: "Non avrai altro metodo all'infuori di getTableColumns"
- **Politica**: Centralizzazione logica, specificazione locale
- **Zen**: Serenità nelle liste, nessun errore, automazione perfetta

*Ultimo aggiornamento: Dicembre 2024*
