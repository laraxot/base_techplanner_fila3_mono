# Regole e Best Practices Laraxot - <nome progetto>

## Struttura del Modello e Tipizzazione

- Tutti i modelli devono estendere `BaseModel` del proprio modulo
- Dichiarare esplicitamente i tipi di ritorno e parametri
- La proprietà `$fillable` deve essere `protected` con annotazione corretta:
  ```php
  /** @var list<string> */
  protected $fillable = ['campo1', 'campo2'];
  ```
- Documentare proprietà con annotazioni PHPDoc complete:
  ```php
  /**
   * @property int $id
   * @property string|null $nome
   * @property Carbon|null $created_at
   * @property Carbon|null $updated_at
   */
  ```

## Casting e Metodi del Modello

- Usare esclusivamente il metodo `casts()` (mai la proprietà `$casts`):
  ```php
  /**
   * @return array<string, string>
   */
  protected function casts(): array
  {
      return [
          'created_at' => 'datetime',
          'updated_at' => 'datetime',
      ];
  }
  ```
- Tutti i metodi devono avere tipo di ritorno esplicito
- Utilizzare generics per collezioni: `Collection<int, User>`

## Migrazioni e Database

- Per aggiungere colonne a tabelle esistenti:
  1. Copiare la migrazione originale con timestamp aggiornato
  2. Aggiungere la colonna nella sezione update con controllo di esistenza
  3. Mai implementare il metodo `down()` in migrazioni `XotBaseMigration`

## Filament Resources e Componenti

- Namespace corretto: `Modules\<NomeModulo>\Filament`
- Label, heading e descrizioni dai file di traduzione
- Le view custom Filament devono usare `<x-filament::page>` come wrapper
- Action custom devono sovrascrivere `setUp()` per configurazione
- Nome univoco e documentato passato a `parent::make()`
- Tipizzazione rigorosa di tutti i metodi

## Componenti Blade UI

- Componenti Blade UI condivisi in `Modules/UI/resources/views/components/ui/`
- Mai in `resources/views/components/`
- Documentare in `Modules/UI/docs/components.md`

## Documentazione e Traduzioni

- Aggiornare la documentazione più vicina e la root docs
- Link bidirezionali tra doc di modulo e root
- Tutte le label, heading e descrizioni dai file di traduzione:
  ```php
  'fields' => [
      'campo_nome' => [
          'label' => 'Etichetta',
          'help' => 'Testo aiuto',
          'placeholder' => 'Placeholder'
      ]
  ]
  ```

## PHPStan e Qualità del Codice

- Eseguire PHPStan da `/var/www/html/<nome progetto>/laravel`
- Usare `./vendor/bin/phpstan analyze` (mai `php artisan test:phpstan`)
- Livello 9 come standard minimo
- Dichiarare `declare(strict_types=1);` in ogni file
- Evitare `mixed` quando possibile
- Usare funzioni sicure di `thecodingmachine/safe`
- Correggere tutti gli errori prima di committare

## Trait e Interfacce

- Trait con PHPDoc completi per proprietà e metodi
- Tipi di ritorno esplicitamente specificati
- Parametri con tipi specificati
- Relazioni con tipi generici corretti
- Interfacce segregate per comportamenti specifici

## Actions e Data Transfer Objects

- Usare Spatie Laravel Data invece dei servizi
- Preferire Spatie QueueableActions
- Data objects con proprietà readonly
- Implementare validazione esplicita
- Tipizzare correttamente tutte le classi

Ultimo aggiornamento: 2025-06-03
