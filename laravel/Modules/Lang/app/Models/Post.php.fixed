<?php

declare(strict_types=1);

namespace Modules\Lang\Models;

use Eloquent;
use GeneaLabs\LaravelModelCaching\Traits\Cachable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
// --- traits ---
use Illuminate\Database\Eloquent\Relations\MorphTo;
// use Laravel\Scout\Searchable;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;
use Modules\Xot\Traits\Updater;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

/**
 * Modules\Lang\Models\Post.
 *
 * @property int             $id
 * @property int|null        $user_id
 * @property string|null     $post_type
 * @property int|null        $post_id
 * @property string|null     $lang
 * @property string|null     $title
 * @property string|null     $subtitle
 * @property string|null     $guid
 * @property string|null     $txt
 * @property string|null     $image_src
 * @property string|null     $image_alt
 * @property string|null     $image_title
 * @property string|null     $meta_description
 * @property string|null     $meta_keywords
 * @property int|null        $author_id
 * @property Carbon|null     $created_at
 * @property Carbon|null     $updated_at
 * @property int|null        $category_id
 * @property string|null     $image
 * @property string|null     $content
 * @property int|null        $published
 * @property string|null     $created_by
 * @property string|null     $updated_by
 * @property string|null     $url
 * @property array|null      $url_lang
 * @property array|null      $image_resize_src
 * @property string|null     $linked_count
 * @property string|null     $related_count
 * @property string|null     $relatedrev_count
 *
 * @method static \Illuminate\Database\Eloquent\Builder|Post newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Post newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Post query()
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereAuthorId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereCategoryId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereContent($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereCreatedBy($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereGuid($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereImage($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereImageAlt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereImageSrc($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereImageTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereLang($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereMetaDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereMetaKeywords($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post wherePostId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post wherePostType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post wherePublished($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereSubtitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereTxt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereUpdatedBy($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Post whereUserId($value)
 *
 * @mixin Eloquent
 */
class Post extends Model
{
    use HasFactory;
    use HasSlug;
    use Updater;
    // use Searchable;
    use Cachable;

    /**
     * @var string[]
     */
    protected $fillable = [
        'id', 'post_id', 'post_type', 'lang', 'title', 'subtitle', 'guid',
        'txt', 'image_src', 'image_alt', 'image_title', 'meta_description', 'meta_keywords',
        'author_id', 'created_at', 'updated_at', 'category_id', 'image', 'content',
        'published', 'created_by', 'updated_by',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'id' => 'integer',
        'post_id' => 'integer',
        'author_id' => 'integer',
        'category_id' => 'integer',
        'published' => 'integer',
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array<int, string>
     */
    protected $appends = [
        'url',
        'url_lang',
        'image_resize_src',
        'linked_count',
        'related_count',
        'relatedrev_count',
    ];

    /**
     * Get the options for generating the slug.
     */
    public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('title')
            ->saveSlugsTo('guid');
    }

    /**
     * Get the owning commentable model.
     */
    public function post(): MorphTo
    {
        return $this->morphTo();
    }

    /**
     * ---.
     */
    public function getUrlAttribute(): ?string
    {
        return null;
    }

    /**
     * ---.
     */
    public function getUrlLangAttribute(): ?array
    {
        return null;
    }

    /**
     * ---.
     */
    public function getImageResizeSrcAttribute(): ?array
    {
        return null;
    }

    /**
     * ---.
     */
    public function getLinkedCountAttribute(): ?string
    {
        return null;
    }

    /**
     * ---.
     */
    public function getRelatedCountAttribute(): ?string
    {
        return null;
    }

    /**
     * ---.
     */
    public function getRelatedrevCountAttribute(): ?string
    {
        return null;
    }

    /**
     * ---.
     */
    public function getTitleAttribute(?string $value): string
    {
        if (\is_string($value) && '' !== $value && ! str_contains($value, ' ')) {
            return $value;
        }
        if ('' === $value) {
            // Assicuriamoci che i valori siano stringhe prima della concatenazione
            $postType = isset($this->attributes['post_type']) && is_string($this->attributes['post_type']) 
                ? $this->attributes['post_type'] : '';
            $postId = isset($this->attributes['post_id']) && is_scalar($this->attributes['post_id']) 
                ? (string) $this->attributes['post_id'] : '';
            $value = $postType . ' ' . $postId;
        } else {
            // Assicuriamoci che post_type e post_id siano stringhe
            $postType = is_string($this->post_type) ? $this->post_type : '';
            $postId = is_scalar($this->post_id) ? (string) $this->post_id : '';
            $value = $postType . ' ' . $postId;
        }

        $this->title = $value;

        $this->save();

        return $value;
    }

    /**
     * ---.
     */
    public function getGuidAttribute(?string $value): ?string
    {
        if (\is_string($value) && '' !== $value && ! str_contains($value, ' ')) {
            return $value;
        }
        $value = $this->title;
        if ('' === $value) {
            // Assicuriamoci che i valori siano stringhe prima della concatenazione
            $postType = isset($this->attributes['post_type']) && is_string($this->attributes['post_type']) 
                ? $this->attributes['post_type'] : '';
            $postId = isset($this->attributes['post_id']) && is_scalar($this->attributes['post_id']) 
                ? (string) $this->attributes['post_id'] : '';
            $value = $postType . ' ' . $postId;
        }

        $value = Str::slug($value);

        $this->guid = $value;

        $this->save();

        return $value;
    }
}
