# Memoria Critica: Filosofia di Testing dei Modelli

## REGOLA ASSOLUTA
**CONCENTRARSI SEMPRE SULLA LOGICA DI BUSINESS, NON SUI DETTAGLI IMPLEMENTATIVI!**
**I MODELLI SONO "SLIM" - NON TESTARE DETTAGLI IMPLEMENTATIVI INUTILI!**

## REGOLA IMPORTANTISSIMA DA RICORDARE SEMPRE
- La logica di business è ciò che conta per il valore del software
- I dettagli implementativi sono responsabilità del framework
- I test devono validare comportamenti e funzionalità, non configurazioni

## Cosa NON Testare (STUPIDO E INUTILE)
- ❌ Campi `$fillable` - è come testare che Laravel funzioni
- ❌ Campi `$hidden` - dettagli implementativi
- ❌ Campi `$casts` - configurazione base del framework
- ❌ Campi `$dates` - convenzioni Laravel standard
- ❌ Campi `$with` - configurazione relazioni

## Cosa Testare (LOGICA DI BUSINESS)
- ✅ Metodi custom con logica di dominio
- ✅ Relazioni e metodi di accesso
- ✅ Mutator e accessor personalizzati
- ✅ Metodi scope e query builder
- ✅ Metodi di utilità specifici

## Filosofia
- Modelli "slim" = solo logica essenziale
- Test sui modelli = logica di business, non implementazione
- Dettagli implementativi = responsabilità del framework
- Testare i fillable = testare che Laravel funzioni = INUTILE

## Esempi
```php
// ✅ CORRETTO - Logica di business
test('appointment can be cancelled only if not completed', function () {
    $appointment = Appointment::factory()->create(['status' => 'scheduled']);
    expect($appointment->canBeCancelled())->toBeTrue();
});

// ❌ ERRATO - Dettagli implementativi
test('appointment has correct fillable fields', function () {
    $appointment = new Appointment();
    expect($appointment->getFillable())->toContain('patient_id');
}); // STUPIDO!
```

## Workflow
1. Identificare test inutili sui modelli
2. Rimuovere/disabilitare test inutili
3. Concentrarsi sui test di logica di business
4. Validare test esistenti
5. Solo DOPO creare nuovi test se necessari

## Motivazione
- Modelli "slim" per design
- Test sui fillable non aggiungono valore
- Concentrarsi sulla logica di business è più produttivo
- Rispettare principio di responsabilità singola

**RICORDA SEMPRE**: I modelli sono "slim", non testare dettagli implementativi inutili!
