# Memory: Modelli SaluteOra - DoctorStudio

## Modello DoctorStudio - Informazioni Critiche

### Architettura Cross-Database
- **Estende**: `StudioUser` con trait `HasParent`
- **Cross-Database**: Relazione tra database 'user' (Doctor) e 'salute_ora' (Studio)
- **Connessione**: Deve utilizzare connessione Studio per relazioni cross-database

### Proprietà Principali
```php
protected $fillable = [
    'id',
    'user_id',      // Riferimento a users database
    'studio_id',    // Riferimento a salute_ora database
    'schedule',     // Orari di lavoro (array)
    'is_primary',   // Studio principale del dottore
];
```

### Funzionalità Principali

#### 1. Gestione Orari (`getOpeningHours()`)
- Converte `schedule` in `OpeningHours` (Spatie)
- Gestisce orari mattutini/pomeridiani
- Include eccezioni ricorrenti (1° gennaio, 25 dicembre)
- Restituisce `OpeningHours::create([])` se schedule vuoto

#### 2. Slot Temporali (`getAvailableTimeSlotsByDate()`)
- Genera slot disponibili per data specifica
- Verifica apertura studio nella data
- Crea slot di 60 minuti per fascia oraria
- Restituisce Collection di slot strutturati

#### 3. Date Abilitate (`getEnabledDatesByMonth()`)
- Restituisce date disponibili per mese
- Filtra date passate (no prenotazioni nel passato)
- Verifica orari apertura per ogni data
- Logica: mese < corrente = vuoto, mese = corrente = dal giorno successivo

### Struttura Schedule
```php
$schedule = [
    'monday' => [
        'morning_from' => '08:00',
        'morning_to' => '12:00',
        'afternoon_from' => '14:00',
        'afternoon_to' => '18:00'
    ],
    // altri giorni...
];
```

### Relazioni
- `doctor()`: BelongsTo Doctor (database 'user')
- `studio()`: BelongsTo Studio (database 'salute_ora')
- `appointments()`: HasMany Appointment
- `user()`: BelongsTo User
- `creator()`, `updater()`: BelongsTo Profile (audit)

### Best Practices

#### 1. Type Safety
- `declare(strict_types=1)`
- Type hints espliciti per tutti i metodi
- PHPDoc completo per proprietà e relazioni
- Gestione null con Safe\DateTime

#### 2. Error Handling
```php
if (!$date) {
    return collect([]);
}

if (!$openingHours->isOpenOn($date)) {
    return collect([]);
}
```

#### 3. Performance
- Lazy loading delle relazioni
- Caching degli orari di apertura
- Query ottimizzate per slot temporali

#### 4. Sicurezza
- Isolamento dati per studio (multi-tenancy)
- Controlli di accesso basati su tenant
- Audit trail con created_by, updated_by, deleted_by
- Soft delete per mantenere storico

### Esempi di Utilizzo

#### Ottenere Orari di Apertura
```php
$doctorStudio = DoctorStudio::find(1);
$openingHours = $doctorStudio->getOpeningHours();

if ($openingHours->isOpenOn('2025-01-27')) {
    // Studio aperto
}
```

#### Generare Slot Disponibili
```php
$availableSlots = $doctorStudio->getAvailableTimeSlotsByDate('2025-01-27');
// Restituisce Collection di slot disponibili
```

#### Ottenere Date Abilitate
```php
$enabledDates = $doctorStudio->getEnabledDatesByMonth('2025-02');
// Restituisce array di date disponibili per febbraio
```

## Regole Critiche

### Cross-Database Relations
- **IMPORTANTE**: DoctorStudio attraversa database differenti
- **Doctor**: Database 'user'
- **Studio**: Database 'salute_ora'
- **Connessione**: Utilizzare connessione Studio

### Multi-Tenancy
- Isolamento dati per studio
- Controlli di accesso basati su tenant
- Policy per relazioni cross-database

### Validazione Dati
- Validazione orari di apertura
- Controllo date passate
- Verifica integrità relazioni

## Collegamenti

- [DoctorStudio Model Documentation](../../laravel/Modules/SaluteOra/docs/doctor-studio-model.md)
- [SaluteOra README](../../laravel/Modules/SaluteOra/docs/README.md)
- [Appointment States](../../laravel/Modules/SaluteOra/docs/appointment-states.md)

---

**Ultimo aggiornamento**: 27 Gennaio 2025  
**Versione**: 1.0
description:
globs:
alwaysApply: false
---
