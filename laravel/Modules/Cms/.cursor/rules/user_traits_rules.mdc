---
description: Regole per i Trait del Modulo User
globs: ["**/User/Models/Traits/*.php", "**/User/app/Models/Traits/*.php"]
alwaysApply: true
---

# Regole per i Trait del Modulo User

## HasTeams

### Requisiti
- Il trait deve essere utilizzato **solo** in modelli che estendono `Authenticatable`
- Richiede il trait `HasRoles` per la gestione dei ruoli
- Richiede le tabelle `team` e `team_user` con le colonne specificate
- I metodi devono gestire correttamente i tipi di ritorno e i parametri

### Implementazione Corretta
```php
namespace Modules\User\Models\Traits;

use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Modules\User\Models\Team;

/**
 * Trait HasTeams.
 * 
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Modules\User\Models\Team> $teams
 */
trait HasTeams
{
    /**
     * Get teams for this user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany<\Modules\User\Models\Team>
     */
    public function teams(): BelongsToMany
    {
        return $this->belongsToMany(Team::class, 'team_user', 'user_id', 'team_id')
                    ->withTimestamps();
    }

    /**
     * Check if user belongs to given team.
     *
     * @param \Modules\User\Models\Team|int $team
     * 
     * @return bool
     */
    public function belongsToTeam(Team|int $team): bool
    {
        $teamId = $team instanceof Team ? $team->id : $team;
        
        return $this->teams()->where('team_id', $teamId)->exists();
    }
}
```

## HasTenants

### Requisiti
- Il trait deve essere utilizzato **solo** in modelli che implementano `HasTenants` di Filament
- Richiede il trait `HasRoles` per la gestione dei ruoli
- Richiede le tabelle `tenants` e `tenant_user` con le colonne specificate
- I metodi devono gestire correttamente i tipi di ritorno e i parametri

### Implementazione Corretta
```php
namespace Modules\User\Models\Traits;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Modules\User\Models\Tenant;

/**
 * Trait HasTenants.
 * 
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Modules\User\Models\Tenant> $tenants
 */
trait HasTenants
{
    /**
     * Get tenants for this user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany<\Modules\User\Models\Tenant>
     */
    public function tenants(): BelongsToMany
    {
        return $this->belongsToMany(Tenant::class, 'tenant_user', 'user_id', 'tenant_id')
                    ->withTimestamps();
    }

    /**
     * Scope a query to only users belonging to the given tenant.
     *
     * @param \Illuminate\Database\Eloquent\Builder<static> $query
     * @param \Modules\User\Models\Tenant|int $tenant
     * 
     * @return \Illuminate\Database\Eloquent\Builder<static>
     */
    public function scopeBelongsToTenant(Builder $query, Tenant|int $tenant): Builder
    {
        $tenantId = $tenant instanceof Tenant ? $tenant->id : $tenant;
        
        return $query->whereHas('tenants', function (Builder $query) use ($tenantId): void {
            $query->where('tenant_id', $tenantId);
        });
    }
}
```

## HasAuthenticationLogTrait

### Requisiti
- Il trait può essere utilizzato in qualsiasi modello che necessita di logging di autenticazione
- Richiede la tabella `authentication_logs` con le colonne specificate
- I metodi devono gestire correttamente i tipi di ritorno e i parametri
- Le notifiche devono essere configurate correttamente

### Implementazione Corretta
```php
namespace Modules\User\Models\Traits;

use Illuminate\Database\Eloquent\Relations\HasMany;
use Modules\User\Models\AuthenticationLog;
use Illuminate\Http\Request;

/**
 * Trait HasAuthenticationLogTrait.
 * 
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Modules\User\Models\AuthenticationLog> $authentications
 */
trait HasAuthenticationLogTrait
{
    /**
     * Get authentication logs for this user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany<\Modules\User\Models\AuthenticationLog>
     */
    public function authentications(): HasMany
    {
        return $this->hasMany(AuthenticationLog::class);
    }

    /**
     * Log new authentication.
     *
     * @param \Illuminate\Http\Request $request
     * 
     * @return \Modules\User\Models\AuthenticationLog
     */
    public function logAuthentication(Request $request): AuthenticationLog
    {
        return $this->authentications()->create([
            'ip_address' => $request->ip(),
            'user_agent' => $request->userAgent(),
            'login_at' => now(),
        ]);
    }
}
```

## Regole Generali per Traits

1. **PHPDoc completi**:
   - Tutti i trait devono avere PHPDoc completi per proprietà e metodi
   - Utilizzare `@property-read` per le proprietà di sola lettura
   - Documentare tutti i parametri e tipi di ritorno

2. **Tipizzazione**:
   - I tipi di ritorno devono essere specificati esplicitamente
   - I parametri dei metodi devono avere tipi specificati
   - Utilizzare tipi union quando appropriato (es. `Model|int`)

3. **Relazioni**:
   - Le relazioni devono essere definite con i tipi corretti
   - Utilizzare tipi generici per le collezioni (es. `Collection<Model>`)
   - Specificare correttamente i tipi di ritorno delle relazioni

4. **Gestione null**:
   - I metodi devono gestire correttamente i casi null
   - Utilizzare tipi nullable quando appropriato (es. `?string`)
   - Implementare controlli di esistenza dove necessario

## Validazione e Testing

- Eseguire PHPStan livello 9+ per verificare tipizzazione corretta
- Implementare test unitari per ogni trait
- Verificare compatibilità con tutti i modelli target

## Documentazione Obbligatoria

Ogni trait deve essere documentato in:
1. `Modules/User/docs/traits.md`
2. Collegamenti bidirezionali in documentazione root
3. PHPDoc completo all'interno del codice

## Backlink e Riferimenti

- [Modules/User/docs/traits.md](mdc:../../laravel/Modules/User/docs/traits.md)
- [Modules/User/docs/authentication.md](mdc:../../laravel/Modules/User/docs/authentication.md)
- [docs/USER_MODULE.md](mdc:../../docs/USER_MODULE.md)

*Ultimo aggiornamento: maggio 2025*