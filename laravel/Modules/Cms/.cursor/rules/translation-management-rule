# Regole per la Gestione delle Traduzioni nei Moduli

## IMPORTANTE: Proprietà Base
- NON rimuovere MAI `public ?array $data = []` da XotBaseWidget
- Questa proprietà è ESSENZIALE per il funzionamento di Livewire
- È usata per il binding dei dati nei form

## Struttura Traduzioni
```php
// ❌ NON FARE:
->label('Etichetta')
->placeholder('Placeholder')
->helperText('Testo di aiuto')

// ❌ NON FARE:
use Modules\Xot\Filament\Traits\TransTrait;  // Se già incluso nella classe base

// ✅ FARE:
// Le traduzioni sono gestite automaticamente tramite LangServiceProvider
// Non è necessario specificare label, placeholder, helperText nel codice
```

## Struttura File Traduzioni
```php
// resources/lang/it/module_name.php
return [
    'fields' => [
        'field_name' => [
            'label' => 'Etichetta',
            'placeholder' => 'Placeholder',
            'helper_text' => 'Testo di aiuto',
            'tooltip' => 'Tooltip del campo',
        ],
    ],
    'actions' => [
        'action_name' => [
            'label' => 'Etichetta Azione',
            'icon' => 'heroicon-o-icon-name',
            'color' => 'primary|warning|danger|success|info',
        ],
    ],
];
```

## Best Practices
1. **Ereditarietà**:
   - NON aggiungere TransTrait se già incluso nella classe base
   - Verificare la gerarchia delle classi
   - Evitare duplicazioni

2. **Traduzioni**:
   - NON usare ->label(), ->placeholder(), ->helperText()
   - Lasciare che LangServiceProvider gestisca le traduzioni
   - Definire le traduzioni nei file di lingua
   - Mantenere una struttura coerente per fields e actions

3. **Binding Dati**:
   - Mantenere `public ?array $data = []` in XotBaseWidget
   - Non modificare questa proprietà
   - È fondamentale per Livewire

4. **Organizzazione File**:
   - Mantenere traduzioni in `resources/lang/it/`
   - Usare nomi file coerenti con il modulo
   - Strutturare traduzioni per fields e actions

## Anti-Pattern
❌ NON FARE:
```php
// Rimuovere $data da XotBaseWidget
// Aggiungere TransTrait se già incluso
// Usare ->label(), ->placeholder(), ->helperText()
// Hardcodare traduzioni nel codice
```

✅ FARE:
```php
// Lasciare $data in XotBaseWidget
// Lasciare che LangServiceProvider gestisca le traduzioni
// Definire le traduzioni nei file di lingua
// Mantenere struttura coerente per fields e actions
```

## Checklist Implementazione
1. [ ] Verificare che $data sia presente in XotBaseWidget
2. [ ] NON aggiungere TransTrait se già incluso
3. [ ] NON usare ->label(), ->placeholder(), ->helperText()
4. [ ] Definire traduzioni nei file di lingua
5. [ ] Mantenere struttura coerente per fields e actions
6. [ ] Verificare esistenza file traduzioni
7. [ ] Aggiornare traduzioni prima di rimuovere metodi

## Note Importanti
- $data è ESSENZIALE per Livewire
- NON duplicare TransTrait
- Lasciare che LangServiceProvider gestisca le traduzioni
- Documentare le traduzioni nei file di lingua
- Mantenere struttura coerente per fields e actions 