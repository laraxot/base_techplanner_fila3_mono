# Regole e Best Practices Laraxot/WindSurf - <nome progetto>

## Modelli e Ereditarietà

### Regola Base dell'Ereditarietà
- I modelli DEVONO estendere **esclusivamente** `BaseModel` del proprio modulo
- MAI estendere direttamente `Illuminate\Database\Eloquent\Model` o `Modules\Xot\Models\XotBaseModel`
- Questa regola garantisce isolamento, override locale, coerenza e compliance PHPStan livello 10

### Proprietà dei Modelli
- Proprietà `$fillable` DEVE essere `protected` con annotazione corretta:
  ```php
  /** @var list<string> */
  protected $fillable = ['campo1', 'campo2'];
  ```
- Proprietà `$hidden` necessita annotazione:
  ```php
  /** @var list<string> */
  protected $hidden = ['password', 'remember_token'];
  ```
- Proprietà `$dates` e `$with` richiedono annotazione `@var list<string>`
- MAI definire il type casting nei modelli individuali, è gestito dal BaseModel del modulo

### Casting e Attributi
- MAI utilizzare la proprietà `$casts`, implementare il metodo `casts()`:
  ```php
  /**
   * @return array<string, string>
   */
  protected function casts(): array
  {
      return [
          'created_at' => 'datetime',
          'updated_at' => 'datetime',
          'is_active' => 'boolean',
      ];
  }
  ```
- Documentare tutte le proprietà del modello con PHPDoc:
  ```php
  /**
   * @property int $id
   * @property string|null $nome
   * @property Carbon|null $created_at
   * @property Carbon|null $updated_at
   * @property-read Collection<int, RelatedModel> $relatedModels
   */
  ```

## Migrazioni e Database

### Regole per le Migrazioni
- Utilizzare classi anonime per le migrazioni:
  ```php
  return new class extends XotBaseMigration { ... }
  ```
- MAI implementare il metodo `down()` in migrazioni che estendono `XotBaseMigration`
- Per aggiungere colonne a tabelle esistenti:
  1. Copiare la migrazione originale con timestamp aggiornato
  2. Aggiungere la colonna con controllo `if (! $this->hasColumn(...))`
  3. MAI creare nuove migrazioni separate per aggiungere colonne
- Documentare sempre la motivazione della modifica e aggiornare link bidirezionali

## Namespace e Directory

### Regole di Namespace
- Il namespace corretto è SEMPRE `Modules\<NomeModulo>\...` (senza segmento `app`)
- Esempi:
  ```php
  // ✅ CORRETTO
  namespace Modules\Performance\Models;

  // ❌ ERRATO
  namespace Modules\Performance\App\Models;
  ```
- Mappa corretta per directory vs namespace:
  - `app/Models/` → `Modules\NomeModulo\Models`
  - `app/Http/Controllers/` → `Modules\NomeModulo\Http\Controllers`
  - `app/Filament/Resources/` → `Modules\NomeModulo\Filament\Resources`
  - `app/Actions/` → `Modules\NomeModulo\Actions`
  - `app/Console/Commands/` → `Modules\NomeModulo\Console\Commands`

### Strict Types e Tipizzazione
- Utilizzare `declare(strict_types=1);` in ogni file PHP
- Tutti i metodi DEVONO avere tipo di ritorno esplicito
- Tutti i parametri DEVONO avere tipo dichiarato
- Evitare `mixed` quando possibile, preferire union types o interfacce
- Utilizzare generics per collection: `Collection<int, User>`
- Utilizzare le funzioni sicure di `thecodingmachine/safe`

## Filament Resources

### Namespace e Configurazione
- Namespace corretto: `Modules\<NomeModulo>\Filament`
- Le risorse DEVONO estendere `XotBaseResource` o una classe che lo estende
- Utilizzare `getFormSchema()` invece di `form()`
- Utilizzare tabelle configurate tramite i metodi appropriati
- Le azioni custom DEVONO sovrascrivere `setUp()` per configurare tutte le proprietà

### Traduzioni e Label
- MAI utilizzare `->label()` o altre stringhe hardcoded
- Tutte le label, heading e descrizioni devono provenire dai file di traduzione:
  ```php
  // Modules/<NomeModulo>/lang/<lingua>/resource-name.php
  return [
      'fields' => [
          'nome' => [
              'label' => 'Nome Utente',
              'help' => 'Inserire il nome completo',
              'placeholder' => 'Es. Mario Rossi'
          ]
      ],
      'actions' => [
          'create' => [
              'label' => 'Crea Nuovo',
              'success' => 'Elemento creato con successo',
              'error' => 'Errore durante la creazione'
          ]
      ]
  ];
  ```

### View Custom e Componenti
- Le view custom Filament DEVONO usare `<x-filament::page>` come wrapper principale
- Componenti Blade UI condivisi in `Modules/UI/resources/views/components/ui/`
- MAI in `resources/views/components/`
- Documentare ogni componente in `Modules/UI/docs/components.md`

## PHPStan e Qualità del Codice

### Esecuzione di PHPStan
- Eseguire PHPStan sempre da `/var/www/html/<nome progetto>/laravel`
- Utilizzare `./vendor/bin/phpstan analyze` (MAI `php artisan test:phpstan`)
- Minimo livello 9 per nuovi sviluppi
- Utilizzare `--memory-limit=2G` per moduli grandi

### Errori Comuni e Soluzioni
- Undefined property: aggiungere annotazioni `@property`
- Method not found: verificare namespace e importazioni
- Param/return type missing: aggiungere tipi espliciti
- Return type mismatch: allineare PHPDoc con tipi nativi
- Factory property access: utilizzare metodi Faker corretti

## Documentazione e Manutenzione

### Struttura della Documentazione
- Documentazione globale: `/var/www/html/<nome progetto>/docs/`
- Documentazione di modulo: `Modules/<NomeModulo>/docs/`
- MAI usare `resources/views/docs/`
- Aggiornare sempre sia la documentazione più vicina che la root docs
- Creare collegamenti bidirezionali tra documentazioni correlate

### Regole di Manutenzione
- Studiare sempre la documentazione esistente prima di modificare il codice
- Aggiornare la documentazione quando si aggiungono/modificano funzionalità
- Documentare ogni correzione di bug o errore
- Mantenere i link bidirezionali aggiornati

## Trait e Pattern

### Trait del Modulo User
- `HasTeams`: solo in modelli che estendono Authenticatable, richiede HasRoles
- `HasTenants`: solo in modelli che implementano HasTenants di Filament
- `HasAuthenticationLogTrait`: utilizzabile in qualsiasi modello che necessita logging di autenticazione
- Tutti i trait devono avere PHPDoc completi per proprietà e metodi

### Pattern Architectural
- Preferire Spatie Laravel Data per Data Transfer Objects
- Utilizzare Spatie QueueableActions invece dei servizi
- Seguire Single Responsibility Principle
- Implementare Interface Segregation quando appropriato
- Mantenere coerenza nei naming delle azioni

## Dipendenze tra Moduli

### Regole di Dipendenza
- Ogni modulo dovrebbe usare modelli dal proprio namespace quando esistono
- Minimizzare e documentare l'uso di modelli cross-module
- Se un modello esiste in più moduli, usare quello del namespace corrente
- Preferire trait per funzionalità condivise invece di ereditarietà diretta
- Documentare chiaramente tutte le dipendenze cross-module

Ultimo aggiornamento: 2025-06-03
