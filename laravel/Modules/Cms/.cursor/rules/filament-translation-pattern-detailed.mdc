# Sistema di Traduzione nei Componenti Filament: Analisi Approfondita

## Fondamenti Filosofici del Sistema di Traduzione <nome progetto>

L'approccio alla traduzione nel framework <nome progetto> è governato da un principio architetturale fondamentale: la separazione completa tra etichette UI e codice. Questo principio non è solo una best practice tecnica, ma riflette una comprensione profonda della natura mutevole delle interfacce utente, delle specificità linguistiche e culturali, e della necessità di scale di traduzione e manutenzione nel tempo.

## Il Principio Cardinale: "Mai Usare ->label()"

### Regola Fondamentale
**È assolutamente proibito utilizzare il metodo `->label()` nei componenti Filament.**

Questa regola non ammette eccezioni e si estende a tutti i metodi simili:
- `->label()`
- `->placeholder()`
- `->helperText()`
- `->hint()`

### Motivazioni Filosofiche e Architetturali

1. **Separazione delle Preoccupazioni**: Il codice del componente deve occuparsi solo della struttura e del comportamento, non del contenuto testuale.
2. **Principio di Singola Fonte di Verità**: Tutte le traduzioni devono esistere nei file di lingua, non sparse nel codice.
3. **Scalabilità Linguistica**: L'aggiunta di una nuova lingua deve richiedere solo l'aggiunta di file di traduzione, senza modifiche al codice.
4. **Coerenza Espressiva**: La stessa etichetta in contesti diversi deve usare la stessa traduzione.
5. **Manutenibilità**: Le modifiche ai testi non devono richiedere modifiche al codice.

### Conseguenze della Violazione

Violare questo principio comporta:
- Incoerenza nelle traduzioni
- Difficoltà nel mantenere la coerenza linguistica
- Aumento del costo di manutenzione
- Impossibilità di beneficiare del sistema automatico di gestione delle traduzioni

## L'Architettura del Sistema di Traduzione

Il sistema di traduzione si basa sul `LangServiceProvider` che automatizza il processo di associazione tra chiavi di traduzione e componenti UI.

### Struttura dei File di Traduzione

```
Modules/
  ModuleName/
    lang/
      it/                   # Lingua italiana
        resources.php       # Traduzioni per risorse
        pages.php           # Traduzioni per pagine
        widgets.php         # Traduzioni per widget
        common.php          # Traduzioni comuni
        validation.php      # Messaggi di validazione
      en/                   # Lingua inglese
        ...
```

### Schema di Organizzazione Chiavi-Valore

Le traduzioni devono seguire uno schema gerarchico preciso:

```php
// resources.php
return [
    'user' => [           // Nome della risorsa
        'name' => 'User', // Nome visualizzato
        'fields' => [     // Campi del form
            'name' => [
                'label' => 'Name',
                'help' => 'Enter your full name',
            ],
            'email' => [
                'label' => 'Email Address',
                'help' => 'We will never share your email',
            ],
        ],
        'messages' => [   // Messaggi vari
            'created' => 'User created successfully',
            'updated' => 'User updated successfully',
        ],
    ],
];
```

### Integrazione con Filament

Il `LangServiceProvider` si occupa di collegare automaticamente le chiavi di traduzione ai componenti Filament:

```php
// Implementazione interna del LangServiceProvider
protected function registerTranslations(): void
{
    // Determina la locale corrente
    $locale = app()->getLocale();

    // Registra per ogni tipo di componente
    $this->registerFieldLabels($locale);
    $this->registerResourceLabels($locale);
    $this->registerPageLabels($locale);
    $this->registerWidgetLabels($locale);
}
```

## Implementazione Corretta nelle Varie Tipologie di Componenti

### 1. Campi dei Form

#### Approccio Errato ❌

```php
TextInput::make('name')
    ->label('Nome Utente')
    ->placeholder('Inserisci il tuo nome')
    ->helperText('Il nome completo come appare sui documenti');
```

#### Approccio Corretto ✅

```php
TextInput::make('name')
    // Il LangServiceProvider associerà automaticamente le traduzioni
    // dal file di lingua appropriato
```

### 2. Risorse Filament

#### Approccio Errato ❌

```php
class UserResource extends XotBaseResource
{
    protected static ?string $modelLabel = 'Utente';
    protected static ?string $pluralModelLabel = 'Utenti';
}
```

#### Approccio Corretto ✅

```php
class UserResource extends XotBaseResource
{
    // Nessuna definizione esplicita di etichette
    // Il LangServiceProvider caricherà automaticamente le traduzioni
}
```

### 3. Widget Filament

#### Approccio Errato ❌

```php
class StatsWidget extends XotBaseWidget
{
    protected static ?string $heading = 'Statistiche';

    protected function getViewData(): array
    {
        return [
            'title' => 'Panoramica Performance',
            'description' => 'Visualizzazione delle metriche chiave',
        ];
    }
}
```

#### Approccio Corretto ✅

```php
class StatsWidget extends XotBaseWidget
{
    // Nessuna etichetta hard-coded

    protected function getViewData(): array
    {
        return [
            // I dati verranno tradotti tramite il sistema di traduzione
        ];
    }
}
```

## Pattern di Traduzione nei Template Blade

Anche nei template Blade è fondamentale seguire il pattern di traduzione:

### Approccio Errato ❌

```blade
<div class="header">
    <h1>Dashboard Utente</h1>
    <p>Gestisci il tuo profilo e le impostazioni</p>
</div>
```

### Approccio Corretto ✅

```blade
<div class="header">
    <h1>{{ __('user.dashboard.title') }}</h1>
    <p>{{ __('user.dashboard.description') }}</p>
</div>
```

## Convenzioni di Nomenclatura per le Chiavi di Traduzione

La nomenclatura delle chiavi di traduzione segue specifiche convenzioni che assicurano coerenza e prevedibilità:

### 1. Risorse

```php
'resource_name' => [
    'name' => 'Nome Singolare',
    'name_plural' => 'Nome Plurale',
    'fields' => [
        'field_name' => [
            'label' => 'Etichetta Campo',
            'help' => 'Testo di Aiuto',
            'placeholder' => 'Testo Placeholder',
        ],
    ],
];
```

### 2. Pagine

```php
'page_name' => [
    'title' => 'Titolo Pagina',
    'navigation_label' => 'Etichetta Navigazione',
    'sections' => [
        'section_name' => 'Nome Sezione',
    ],
];
```

### 3. Widget

```php
'widget_name' => [
    'title' => 'Titolo Widget',
    'description' => 'Descrizione Widget',
    'empty_state' => 'Messaggio Stato Vuoto',
];
```

## Risoluzione dei Problemi Comuni

### 1. Etichette Mancanti

Se un'etichetta appare in inglese nonostante sia stata impostata la lingua italiana, è possibile che:

- La chiave di traduzione non esista nel file di lingua
- La struttura della chiave di traduzione non sia corretta
- Il LangServiceProvider non sia correttamente registrato

**Soluzione**: Verificare la presenza della traduzione e la sua struttura.

### 2. Traduzioni Non Aggiornate

Se le modifiche alle traduzioni non si riflettono nell'interfaccia, è possibile che:

- La cache delle traduzioni sia attiva
- La cache dell'applicazione non sia stata aggiornata

**Soluzione**:
```bash
php artisan cache:clear
php artisan config:clear
php artisan view:clear
```

### 3. Incoerenza Tra Lingue

Se alcune parti dell'interfaccia appaiono in lingue diverse, è possibile che:

- Alcune traduzioni siano mancanti in una lingua
- Il locale dell'applicazione cambi in modo imprevisto

**Soluzione**: Verificare la completezza delle traduzioni e il corretto funzionamento del middleware di localizzazione.

## Test delle Traduzioni

È fondamentale testare le traduzioni per ogni lingua supportata:

```php
// Test di unità per la completezza delle traduzioni
public function testTranslationsCompleteness(): void
{
    $languages = ['it', 'en'];
    $baseKeys = $this->getAllTranslationKeys('en'); // Lingua base

    foreach ($languages as $lang) {
        if ($lang === 'en') continue;

        $langKeys = $this->getAllTranslationKeys($lang);
        $missingKeys = array_diff_key($baseKeys, $langKeys);

        $this->assertEmpty($missingKeys, "Missing translations in {$lang}: " . implode(', ', array_keys($missingKeys)));
    }
}
```

## Convenzioni Linguistiche Specifiche

### Italiano

1. Usare la forma di cortesia per istruzioni dirette
2. Preferire frasi complete per i messaggi di errore
3. Utilizzare articoli determinativi prima di nomi di funzionalità

### Inglese

1. Usare frasi brevi e dirette
2. Evitare forme passive dove possibile
3. Utilizzare la grafia americana (es. "color" non "colour")

## Conclusione: Traduzione come Espressione di Rispetto

Il sistema di traduzione nel framework <nome progetto> non è semplicemente un meccanismo per adattare l'interfaccia a lingue diverse, ma un'espressione del rispetto per:

1. **Diversità Linguistica**: Riconoscendo l'importanza di ciascuna lingua supportata
2. **Esperienza Utente**: Fornendo un'interfaccia coerente e naturale
3. **Sostenibilità del Codice**: Separando chiaramente le preoccupazioni
4. **Evoluzione del Prodotto**: Permettendo cambiamenti linguistici senza impatto sul codice

Seguire rigorosamente i pattern di traduzione è dunque un imperativo sia tecnico che culturale nel contesto dello sviluppo <nome progetto>.
