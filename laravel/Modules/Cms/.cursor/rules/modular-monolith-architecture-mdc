# Modular Monolith Architecture Rules

## Module Structure
- Each module must be self-contained with its own domain logic
- Follow the hexagonal architecture pattern (ports and adapters)
- Keep modules loosely coupled through well-defined interfaces
- Place all module-specific code within the module's namespace

## Directory Structure
- Follow the standard module structure:
  ```
  ModuleName/
  ├── Application/    # Use cases and application services
  ├── Domain/         # Business logic and entities
  ├── Infrastructure/ # Database, external services
  └── UI/             # Web interfaces, API endpoints
  ```
- Keep shared code in a dedicated `Shared` directory at the module root

## Communication
- Use events for cross-module communication
- Define clear contracts (interfaces) for module interactions
- Prefer asynchronous communication when possible
- Document all cross-module dependencies

## Dependencies
- Dependencies must point inward (UI → Application → Domain)
- Domain layer should have no external dependencies
- Use dependency injection for all external services
- Document all module dependencies

## Testing
- Each module should have its own test suite
- Mock external dependencies in unit tests
- Test module boundaries with integration tests
- Document test coverage requirements

## Documentation
- Document module purpose and responsibilities
- Document all public APIs and events
- Keep a CHANGELOG.md for each module
- Document module configuration options

## Code Quality
- Follow PSR-12 coding standards
- Use type hints and return type declarations
- Keep methods small and focused
- Document complex business logic

## Versioning
- Follow semantic versioning for modules
- Document breaking changes
- Provide migration guides for major updates
- Maintain backward compatibility when possible

## Security
- Validate all input at module boundaries
- Implement proper authorization checks
- Sanitize all output
- Document security considerations

## Performance
- Profile critical paths
- Implement caching where appropriate
- Document performance characteristics
- Optimize database queries

## Error Handling
- Use custom exceptions for business errors
- Log errors with appropriate context
- Provide meaningful error messages
- Document expected error conditions
