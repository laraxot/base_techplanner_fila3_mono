---
description:
globs:
alwaysApply: true
---
# Laraxot Development Workflow

Questo workflow guida attraverso tutte le fasi di sviluppo di un progetto Laraxot, dall'inizializzazione al deployment, seguendo rigorosamente le convenzioni e best practice del framework.

## Invocazione
Usa `/laraxot` in Windsurf Cascade per eseguire questo workflow completo.

## Fase 1: Inizializzazione e Setup

### 1.1 Controllo Ambiente
```bash
# Verifica la versione PHP e le estensioni necessarie
php -v
php -m | grep -E "(pdo|mbstring|xml|ctype|json|openssl|tokenizer|bcmath)"

# Controllo Composer
composer --version

# Verifica Node.js per frontend assets
node -v
npm -v
```

### 1.2 Setup Directory di Lavoro
```bash
# Assicurati di essere nella directory Laravel corretta
cd /var/www/html/_bases/base_<nome progetto>/laravel

# Verifica struttura directory
ls -la Modules/
```

### 1.3 Controllo Dipendenze
```bash
# Aggiorna dipendenze Composer
composer install --optimize-autoloader

# Aggiorna autoload per riconoscere nuovi moduli
composer dump-autoload

# Installa dipendenze NPM se necessario
npm install
```

## Fase 2: Analisi del Codice e Quality Assurance

### 2.1 Controllo Namespace e Struttura
Verifica che tutti i namespace seguano le convenzioni Laraxot:

**REGOLA CRITICA**: I namespace NON devono mai includere il segmento 'App'
- ✅ CORRETTO: `Modules\<nome progetto>\Models\User`
- ❌ ERRATO: `Modules\<nome progetto>\App\Models\User`

**Controlli da eseguire:**
1. Verifica namespace in tutti i file PHP nei moduli
2. Controlla che i modelli estendano BaseModel del proprio modulo
3. Verifica che le migrazioni estendano XotBaseMigration
4. Controlla che i Service Provider estendano XotBaseServiceProvider

### 2.2 Analisi Statica con PHPStan
```bash
# SEMPRE eseguire da /laravel directory
cd /var/www/html/_bases/base_<nome progetto>/laravel

# Esegui PHPStan livello 9 (minimo per nuovi sviluppi)
./vendor/bin/phpstan analyze --level=9 --memory-limit=2G

# Per modulo specifico
./vendor/bin/phpstan analyze Modules/<nome progetto> --level=9

# Mai usare artisan per phpstan
# ❌ ERRATO: php artisan test:phpstan
```

### 2.3 Controllo Coding Standards
```bash
# PHP CS Fixer per standard PSR-12
./vendor/bin/php-cs-fixer fix --dry-run --diff

# Pint per Laravel coding standards
./vendor/bin/pint --test
```

## Fase 3: Controllo Migrazioni e Database

### 3.1 Validazione Migrazioni
Verifica che le migrazioni seguano le regole Laraxot:

**REGOLE OBBLIGATORIE:**
- ✅ Usare classi anonime che estendono XotBaseMigration
- ✅ MAI implementare il metodo down()
- ✅ Sempre verificare esistenza con hasTable() e hasColumn()
- ✅ Per aggiungere colonne: copiare migrazione originale con nuovo timestamp

```bash
# Controllo status migrazioni
php artisan migrate:status

# Test migrazioni in ambiente locale
php artisan migrate --pretend
```

### 3.2 Controllo Modelli
Verifica conformità modelli:
- Estensione di BaseModel del modulo (non XotBaseModel direttamente)
- Proprietà $fillable con annotazione `@var list<string>`
- Metodo casts() invece di proprietà $casts
- PHPDoc completi per tutte le proprietà

## Fase 4: Controllo Traduzioni e Filament

### 4.1 Validazione File di Traduzione
Verifica struttura espansa per traduzioni:

**STRUTTURA OBBLIGATORIA:**
```php
// ✅ CORRETTO
'fields' => [
    'nome_campo' => [
        'label' => 'Etichetta Campo',
        'placeholder' => 'Placeholder',
        'help' => 'Testo di aiuto'
    ]
]

// ❌ ERRATO
'fields' => [
    'nome_campo' => 'Etichetta Campo'
]
```

### 4.2 Controllo Componenti Filament
Verifica che:
- MAI usare ->label() nei form components
- Actions custom sovrascrivano setUp()
- Widgets estendano classi base appropriate
- View custom usino <x-filament::page> come wrapper

## Fase 5: Testing

### 5.1 Unit Tests
```bash
# Esegui tutti i test
php artisan test

# Test specifici per modulo
php artisan test --filter=<nome progetto>

# Test con coverage
php artisan test --coverage
```

### 5.2 Feature Tests
```bash
# Test delle API
php artisan test tests/Feature/Api/

# Test Filament
php artisan test tests/Feature/Filament/
```

## Fase 6: Documentazione

### 6.1 Aggiornamento Documentazione
**REGOLA**: Aggiornare SEMPRE documentazione modulo E root con collegamenti bidirezionali

1. Aggiorna documentazione specifica in `Modules/{NomeModulo}/docs/`
2. Aggiorna documentazione root in `/docs/` se necessario
3. Crea collegamenti bidirezionali tra documenti correlati
4. Aggiorna le regole in `.windsurf/rules/` e `.cursor/rules/`

### 6.2 Controllo Convenzioni Naming
Verifica che tutti i file e cartelle in docs/ siano in minuscolo:
- ✅ `my-document.md`
- ❌ `MY-DOCUMENT.md`
- Eccezione: solo `README.md` può avere maiuscole

## Best Practice Recap

1. **Namespace**: Mai includere 'App' nei namespace dei moduli
2. **Ereditarietà**: Modelli estendono BaseModel del proprio modulo
3. **Migrazioni**: Classi anonime, no down(), sempre verificare esistenza
4. **Traduzioni**: Struttura espansa obbligatoria
5. **Filament**: Mai ->label(), sempre traduzioni da file
6. **Documentazione**: Aggiornare modulo E root con backlink
7. **PHPStan**: Sempre livello 9+, eseguire da /laravel
8. **Componenti UI**: Solo in Modules/UI/resources/views/components/ui/

---

**Ultimo aggiornamento**: Dicembre 2024
**Versione**: 2.0
**Compatibilità**: Laraxot <nome progetto>, PHP 8.2+, Laravel 10+
