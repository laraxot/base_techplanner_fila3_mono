---
description:
globs:
alwaysApply: false
---
# Regole per il Modulo Tenant

## Architettura Modular Monolith

### 1. Struttura a Livelli
- Ogni modulo deve seguire la struttura a livelli:
  ```
  Modules/Tenant
  ├── Domain         # Logica di dominio pura
  ├── Application    # Casi d'uso
  ├── Infrastructure # Accesso a DB, servizi esterni
  ├── UI             # Controller, Livewire, API, Filament
  ```

### 2. Regole d'Oro
- Ogni modulo ha uno scopo chiaro
- Gli internals sono nascosti: esporre solo contracts/eventi
- Dipendere da astrazioni, mai da dettagli di altri moduli
- Usare service provider per registrare servizi
- Comunicare tra moduli solo tramite eventi o contracts

### 3. Testing
- La logica di dominio e i casi d'uso devono essere testabili in puro PHP
- Test unitari per ogni componente
- Test di integrazione per la comunicazione tra moduli

## Best Practices

### 1. Service Provider
```php
class TenantServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        $this->registerConfig();
        $this->registerCommands();
        $this->registerBindings();
    }

    public function boot(): void
    {
        $this->loadMigrations();
        $this->loadRoutes();
        $this->loadViews();
    }
}
```

### 2. Eventi
```php
// Eventi
namespace Modules\Tenant\Events;

class TenantCreated
{
    public function __construct(
        public Tenant $tenant
    ) {
    }
}

// Listener
namespace Modules\Tenant\Listeners;

class HandleTenantCreated implements ShouldQueue
{
    public function handle(TenantCreated $event): void
    {
        // Implementazione
    }
}
```

### 3. Contracts
```php
namespace Modules\Tenant\Contracts;

interface TenantRepositoryInterface
{
    public function findById(int $id): ?Tenant;
    public function create(array $data): Tenant;
    public function update(Tenant $tenant, array $data): bool;
    public function delete(Tenant $tenant): bool;
}
```

## Checklist

### Prima del Commit
- [ ] La struttura a livelli è rispettata
- [ ] Non ci sono dipendenze dirette tra moduli
- [ ] Gli eventi sono utilizzati per la comunicazione tra moduli
- [ ] I test sono presenti e passano
- [ ] La documentazione è aggiornata

### Code Review
- [ ] Il codice segue i principi SOLID
- [ ] Le dipendenze sono gestite correttamente
- [ ] Gli eventi sono utilizzati appropriatamente
- [ ] I test coprono i casi d'uso principali
- [ ] La documentazione è chiara e completa

## Collegamenti
- [README.md](../../Modules/Tenant/docs/README.md)
- [testing.md](../../Modules/Tenant/docs/testing.md)
- [events.md](../../Modules/Tenant/docs/events.md)
- [dependencies.md](../../Modules/Tenant/docs/dependencies.md)
