---
description: Rules for implementing and extending ServiceProviders in Laraxot <nome progetto>
globs: ["**/Providers/*ServiceProvider.php", "**/Providers/Filament/*Provider.php"]
alwaysApply: true
---

# ServiceProvider Implementation Rules in Laraxot <nome progetto>

## Core Principles

1. **Inheritance**: All module ServiceProviders MUST extend `Modules\Xot\Providers\XotBaseServiceProvider`, NEVER directly extend `Illuminate\Support\ServiceProvider`

2. **Don't Duplicate XotBaseServiceProvider Functionality**: XotBaseServiceProvider handles most common bootstrapping tasks automatically. NEVER re-implement functionality that is already provided by the parent class

3. **Directory Structure**: ServiceProviders MUST be placed in `Modules/{ModuleName}/Providers/`, NEVER in `app/Providers/`

4. **Naming Convention**: Use English naming conventions for all classes, methods, and properties

5. **Type Safety**: All methods and properties MUST have explicit type declarations

6. **Documentation**: Complete PHPDoc for all classes, methods, and properties

## ServiceProvider Structure

```php
<?php

declare(strict_types=1);

namespace Modules\{ModuleName}\Providers;

use Modules\Xot\Providers\XotBaseServiceProvider;

/**
 * Service provider for the {ModuleName} module.
 * Extends XotBaseServiceProvider to inherit common functionality.
 */
class {ModuleName}ServiceProvider extends XotBaseServiceProvider
{
    /**
     * The module namespace.
     *
     * @var string
     */
    protected string $module_name = '{ModuleName}';

    /**
     * Boot the application events.
     * XotBaseServiceProvider already handles:
     * - Loading views, translations, factories, and migrations
     * - Setting up route model bindings
     * - Registering public assets
     * - Auto-discovering module components
     *
     * @return void
     */
    public function boot(): void
    {
        parent::boot();

        // ONLY add module-specific customizations here
        // Do NOT duplicate functionality already provided by XotBaseServiceProvider
    }

    /**
     * Register the service provider.
     * XotBaseServiceProvider already handles:
     * - Repository bindings
     * - Config merging
     * - Service registration
     *
     * @return void
     */
    public function register(): void
    {
        parent::register();

        // ONLY register module-specific services not handled by XotBaseServiceProvider
    }
}
```

## SVG Icon Registration

When registering custom SVG icons:

```php
/**
 * Register module's SVG icons.
 *
 * @return void
 */
protected function registerSvgIcons(): void
{
    FilamentAsset::register([
        Svg::make('icon-name', __DIR__.'/../resources/svg/icon-name.svg'),
    ], $this->module_name);

    FilamentIcon::register([
        '{module-prefix}-icon-name' => Svg::make('icon-name', __DIR__.'/../resources/svg/icon-name.svg'),
    ]);
}
```

## Translation Files

Reference icons in translation files using the prefixed name:

```php
return [
    'navigation' => [
        'label' => 'Upload',
        'icon' => '{module-prefix}-icon-name',
    ],
];
```

## Features Already Handled by XotBaseServiceProvider

NEVER duplicate these functionalities that are already provided by XotBaseServiceProvider:

1. **Loading Module Resources**
   - Views (`loadViewsFrom`)
   - Translations (`loadTranslationsFrom`)
   - Migrations (`loadMigrationsFrom`)
   - Routes (`loadRoutesFrom`)
   - Configurations (`mergeConfigFrom`)

2. **Asset Registration**
   - Standard public assets
   - Standard SVG icons in predefined locations
   - CSS/JS resources

3. **Component Auto-Discovery**
   - Blade components
   - Livewire components
   - Filament resources in standard locations

4. **Repository Bindings**
   - Standard repository interface bindings
   - Model bindings

5. **Caching Configuration**
   - Configuration caching
   - Route caching

## What to Add in Module ServiceProviders

ONLY add these module-specific customizations:

1. **Custom SVG Icons** with module-specific prefixes
2. **Custom Filament Panels** specific to the module
3. **Custom Services** not auto-discovered by conventions
4. **Event Listeners** specific to the module
5. **Custom Commands** specific to the module
6. **Middleware** specific to the module

## Common Errors to Avoid

1. **❌ WRONG**: Directly extending `Illuminate\Support\ServiceProvider`
   **✅ CORRECT**: Extend `Modules\Xot\Providers\XotBaseServiceProvider`

2. **❌ WRONG**: Re-implementing functionality already provided by XotBaseServiceProvider
   **✅ CORRECT**: Only add module-specific customizations

3. **❌ WRONG**: Placing ServiceProviders in `app/Providers/`
   **✅ CORRECT**: Place in `Modules/{ModuleName}/Providers/`

4. **❌ WRONG**: Using relative paths without module context
   **✅ CORRECT**: Use `$this->module_name` for context and proper paths

5. **❌ WRONG**: Registering resources without calling parent methods
   **✅ CORRECT**: Always call `parent::boot()` and `parent::register()`

6. **❌ WRONG**: Using non-prefixed icon names that may conflict
   **✅ CORRECT**: Prefix icon names with module identifier

## PHPStan Compliance

- All ServiceProviders must pass PHPStan level 9 analysis
- Always run analysis from Laravel root directory:

```bash
cd /var/www/html/<nome progetto>/laravel
./vendor/bin/phpstan analyze Modules/{ModuleName}/Providers --level=9
```

## Testing and Documentation

- Test that all registered resources are properly loaded
- Document all custom ServiceProvider functionality in the module's docs folder
- Create bidirectional links between module docs and root docs

*Last updated: June 2025*
