# Regole per Form Widget Filament

## Struttura Base
```php
class MyFormWidget extends XotBaseWidget
{
    // 1. Definire sempre la proprietà data
    public ?array $data = [];

    // 2. Inizializzare il form in mount()
    public function mount(): void
    {
        $this->form->fill();
    }

    // 3. Implementare getFormSchema()
    public function getFormSchema(): array
    {
        return [
            // Schema del form
        ];
    }

    // 4. Configurare il form con statePath
    public function form(Form $form): Form
    {
        return $form
            ->schema($this->getFormSchema())
            ->statePath('data');
    }
}
```

## Errori Comuni
- ❌ NON dimenticare di definire `public ?array $data = []`
- ❌ NON dimenticare di chiamare `$this->form->fill()` in `mount()`
- ❌ NON dimenticare di specificare `statePath('data')` nel form
- ❌ NON usare proprietà pubbliche per i campi del form

## Best Practices
- ✅ Usare sempre `$data` per i dati del form
- ✅ Inizializzare sempre il form in `mount()`
- ✅ Usare `statePath('data')` per il binding dei campi
- ✅ Documentare lo schema del form
- ✅ Validare i dati nel form schema

## Validazione
```php
public function getFormSchema(): array
{
    return [
        TextInput::make('email')
            ->required()
            ->email()
            ->unique('users', 'email'),
        
        Checkbox::make('newsletter')
            ->label('Subscribe to newsletter'),
    ];
}
```

## State Management
- Tutti i dati del form devono essere in `$data`
- Usare `$this->form->getState()` per accedere ai dati
- Usare `$this->form->fill()` per popolare i dati
- Usare `wire:model` con il prefisso `data.`

## Troubleshooting
1. Se un campo non si aggiorna:
   - Verificare che esista in `$data`
   - Verificare il `statePath('data')`
   - Verificare il binding `wire:model="data.field"`

2. Se la validazione non funziona:
   - Verificare le regole nel form schema
   - Verificare che il campo sia nel form schema
   - Verificare che il campo sia in `$data` 