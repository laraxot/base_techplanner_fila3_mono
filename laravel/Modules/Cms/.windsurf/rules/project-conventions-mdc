---
trigger: manual
description:
globs:
---
# Convenzioni del Progetto

## Struttura dei Moduli

Ogni modulo deve seguire questa struttura standard:
```
ModuleName/
├── Config/
├── Console/
├── Database/
│   ├── Migrations/
│   └── Seeders/
├── Http/
│   ├── Controllers/
│   ├── Middleware/
│   └── Requests/
├── Models/
├── Resources/
│   ├── js/
│   └── views/
├── Routes/
└── Services/
```

## Convenzioni di Denominazione

1. **Classi e Interfacce**
   - Utilizzare PascalCase
   - Nomi descrittivi e autoesplicativi
   - Evitare abbreviazioni non standard

2. **Metodi e Proprietà**
   - Utilizzare camelCase
   - Nomi che descrivono l'azione o il contenuto
   - Prefissi per metodi privati: `_privateMethod`

3. **File di Migrazione**
   - Utilizzare snake_case
   - Formato: `YYYY_MM_DD_HHMMSS_description.php`
   - Nomi descrittivi della modifica

4. **File di Configurazione**
   - Utilizzare snake_case
   - Nome del modulo come prefisso
   - Esempio: `module_name.php`

## Best Practices Generali

1. **Codice**
   - Seguire PSR-12
   - Utilizzare type hinting
   - Documentare classi e metodi con PHPDoc
   - Mantenere i metodi brevi e focalizzati

2. **Database**
   - Utilizzare migrazioni per tutte le modifiche
   - Implementare rollback per ogni migrazione
   - Aggiungere indici appropriati
   - Utilizzare foreign key constraints

3. **Testing**
   - Test unitari per ogni classe
   - Test di integrazione per le funzionalità principali
   - Copertura minima del 80%
   - Test sia per casi positivi che negativi

4. **Documentazione**
   - README.md in ogni modulo
   - Documentazione API aggiornata
   - Esempi di utilizzo
   - Changelog mantenuto

## Gestione delle Dipendenze

1. **Composer**
   - Specificare versioni esatte per le dipendenze critiche
   - Utilizzare versioni minime per le dipendenze non critiche
   - Mantenere composer.lock aggiornato

2. **Moduli**
   - Minimizzare le dipendenze tra moduli
   - Utilizzare interfacce per l'accoppiamento
   - Documentare le dipendenze esplicite

## Sicurezza

1. **Autenticazione**
   - Utilizzare middleware di autenticazione
   - Implementare autorizzazione basata su ruoli
   - Validare tutti gli input

2. **Dati Sensibili**
   - Non committare credenziali
   - Utilizzare variabili d'ambiente
   - Crittografare dati sensibili

## Performance

1. **Query Database**
   - Ottimizzare le query
   - Utilizzare eager loading
   - Implementare caching appropriato

2. **Assets**
   - Minificare CSS/JS
   - Ottimizzare immagini
   - Utilizzare CDN quando appropriato

## Deployment

1. **Processo**
   - Test automatici prima del deploy
   - Migrazioni automatiche
   - Rollback plan

2. **Ambienti**
   - Separazione chiara tra dev/staging/prod
   - Configurazioni specifiche per ambiente
   - Logging appropriato per ogni ambiente
