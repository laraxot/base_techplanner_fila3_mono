# Business Logic Implementation

**When**: Implementing asynchronous business logic or reusable actions in the application.

**Then**:
- ALWAYS use `spatie/laravel-queueable-action` for asynchronous business logic and reusable actions.
- NEVER use `Service` classes for such implementations.

**Because**:
- Promotes code reuse and testability.
- Ensures consistency in handling asynchronous tasks.
- Enhances maintainability by using a standardized approach.

**Examples**:

*Correct*:
```php
namespace Modules\Example\Actions;

use Spatie\QueueableAction\QueueableAction;

class ProcessDataAction
{
    use QueueableAction;

    public function execute(array $data): void
    {
        // Business logic here
    }
}
```

*Incorrect*:
```php
namespace Modules\Example\Services;

class DataProcessingService
{
    public function process(array $data): void
    {
        // Business logic here
    }
}
```

**See**:
- [Queueable Actions Documentation](https://spatie.be/docs/laravel-queueable-action)
