# Translation Audit Best Practices - Windsurf Rules

## REGOLA CRITICA: Audit Sistematico delle Traduzioni

### SEMPRE fare audit completo invece di fix parziali
- Analizzare TUTTI i file che usano un namespace di traduzione
- Verificare l'esistenza di TUTTI i file di traduzione per TUTTE le lingue
- Creare file completi con traduzioni robuste, non solo quelle minime

### Pattern di Audit
1. **Analisi Statica**: `grep -r "__('" path/` per trovare tutte le traduzioni
2. **Verifica Esistenza**: controllare esistenza file per ogni lingua
3. **Creazione Sistematica**: creare file per TUTTE le lingue supportate
4. **Documentazione**: aggiornare SEMPRE docs del modulo E docs root

## Namespace Strategy per Traduzioni

### Modular Namespace Pattern
```php
// ✅ CORRETTO - Namespace modulari
'user::auth.*'      // Autenticazione generale
'user::messages.*'  // Messaggi widget-specifici
'user::fields.*'    // Etichette campi form
'user::actions.*'   // Azioni e bottoni

// ❌ ERRATO - Tutto in un namespace
'user::*'  // Troppo generico, causa conflitti
```

### File Structure Standard
```php
// Struttura robusta con messaggi extra
return [
    // Core messages (richiesti subito)
    'login_success' => 'Accesso effettuato con successo.',
    'login_error' => 'Errore durante l\'accesso.',
    
    // Future-proofing messages (non ancora usati ma prevedibili)
    'session_expired' => 'Sessione scaduta.',
    'too_many_attempts' => 'Troppi tentativi.',
    
    // Categories for organization
    'validation' => [
        'field_required' => 'Campo obbligatorio.',
        'invalid_email' => 'Email non valida.',
    ],
];
```

## Prevenzione Errori Futuri

### Controlli Automatici
- Implementare linting per traduzioni mancanti
- CI/CD check per completezza file di traduzione
- Template standardizzati per nuovi widget

### Documentation Memory System
- **Docs folders = project memory**: SEMPRE aggiornare
- **Bidirectional linking**: ogni doc deve linkare docs correlate
- **Pattern documentation**: documentare pattern per riuso futuro

## LoginWidget Lessons Learned

### Problema Originale
```php
// LoginWidget usava queste traduzioni inesistenti:
__('user::messages.credentials_incorrect')
__('user::messages.login_success')
__('user::messages.validation_error')
__('user::messages.login_error')

// File mancante: Modules/User/lang/{locale}/messages.php
```

### Soluzione Sistematica
1. Creato `messages.php` per IT/EN/DE
2. Aggiunto messaggi extra per robustezza
3. Documentato nel modulo User
4. Documentato nelle docs root
5. Aggiornato regole Windsurf (questo file)

## Quality Standards

### Multi-Language Requirements
- SEMPRE creare file per IT/EN/DE come minimo
- Mantenere struttura identica tra lingue
- Adattamenti culturali appropriati
- Terminologia coerente con contesto medico

### Robustezza Pattern
- Include MORE translations than immediately needed
- Prevent future "missing translation" errors
- Enable rapid feature development
- Support planned expansions

## Integration Points

### Module Documentation Requirements
```markdown
# Widget Translation Audit
## Problems Identified
## Resolution Implemented  
## Best Practices
## Integration with Documentation
## Future Prevention
```

### Global Documentation Requirements
```markdown
# Translation Audit Report
## Executive Summary
## Key Findings
## Files Created
## Quality Assurance Process
## Prevention Strategies
## Philosophical Approach
```

## Commands for Translation Audit

### Find All Translation Usage
```bash
# Find all translation calls in a module
grep -r "__('module::" Modules/ModuleName/

# Find specific namespace usage
grep -r "__('user::messages" Modules/User/

# Check file existence
ls -la Modules/User/lang/*/messages.php
```

### Verify Translation Completeness
```bash
# Check all supported languages have the file
for lang in it en de; do
  if [[ -f "Modules/User/lang/$lang/messages.php" ]]; then
    echo "✅ $lang: exists"
  else
    echo "❌ $lang: missing"
  fi
done
```

## Philosophy: Documentation as Memory

### Core Principles
- **Systematic over ad-hoc**: Complete analysis vs partial fixes
- **Robust over minimal**: Extra translations prevent future issues
- **Documented over undocumented**: Knowledge must be captured
- **Connected over isolated**: Bidirectional documentation links

### Memory Integration
- Docs folders ARE the project memory
- Every fix must update relevant docs
- Pattern recognition for future efficiency
- Knowledge sharing enables team effectiveness

## Anti-Patterns to Avoid

### ❌ Partial Translation Fixes
```php
// ❌ Creating only the exact translations needed
return [
    'login_success' => 'Success',
];
```

### ❌ Single-Language Updates
```php
// ❌ Creating translations only for one language
// Missing: en/messages.php, de/messages.php
```

### ❌ Undocumented Changes
```php
// ❌ Adding translations without updating docs
// Missing: module docs update, root docs update
```

### ❌ Isolated Namespace Thinking
```php
// ❌ Not considering broader namespace strategy
'user::login_success'  // Should be user::messages.login_success
```

## Success Metrics

### Immediate Success
- ✅ No runtime translation errors
- ✅ All languages supported
- ✅ Documentation updated
- ✅ Patterns documented

### Long-term Success  
- 🚀 Faster development of new features
- 🚀 Consistent translation architecture
- 🚀 Reduced maintenance overhead
- 🚀 Team knowledge preservation

## Future Application

This pattern applies to:
- Any widget using translations
- New module development
- Translation system refactoring
- Code quality audits
- Documentation system improvements

Remember: **Complete solutions prevent recurring problems**

*Last updated: 2025-01-06*