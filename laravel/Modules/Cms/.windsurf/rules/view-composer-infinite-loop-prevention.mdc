---
description:
globs:
alwaysApply: false
---
# View Composer - Infinite Loop Prevention Rules

## Regola Critica per View Composers

### Problema Identificato
I View Composers possono causare **loop infiniti** se chiamano servizi che scatenano il rendering di altre view durante il bootstrap dell'applicazione.

### Regola Obbligatoria

#### ✅ SEMPRE Usare Static Flag Guard
```php
// CORRETTO - Protezione anti-loop
public function compose(View $view): void
{
    static $composing = false;
    
    if ($composing) {
        return; // Exit immediato
    }
    
    $composing = true;
    
    try {
        // Logica del composer
    } finally {
        $composing = false; // Reset sempre
    }
}
```

#### ❌ MAI Chiamare Auth Direttamente
```php
// VIETATO - Può causare dependency cycle
public function compose(View $view): void
{
    if (Auth::check()) { // LOOP RISK!
        // Operazioni che coinvolgono auth
    }
}
```

### Operazioni Vietate nei Composers
- `Auth::check()` senza protezioni
- `auth()->user()` durante bootstrap
- `app()->make()` di servizi complessi
- Database queries senza cache
- File system operations
- Chiamate di rete o API

### Pattern Sicuri Obbligatori

#### 1. Auth Check Sicuro
```php
private function isAuthenticationSafe(): bool
{
    try {
        if (!app()->bound('auth') || !app()->bound('session')) {
            return false;
        }
        
        if (!session()->isStarted()) {
            return false;
        }
        
        return Auth::hasUser() || Auth::guest();
    } catch (\Exception $e) {
        return false;
    }
}
```

#### 2. Error Handling Graceful
```php
try {
    // Operazioni rischiose
} catch (\Exception $e) {
    if (config('app.debug')) {
        logger()->warning('Composer operation failed', [
            'error' => $e->getMessage(),
            'view' => $view->getName() ?? 'unknown'
        ]);
    }
    // Non rethrow, continua il rendering
}
```

#### 3. Lazy Loading Pattern
```php
// CORRETTO - Caricamento differito
$view->with('_user', function() {
    return $this->isAuthenticationSafe() ? auth()->user() : null;
});
```

### Testing Obbligatorio
```php
public function test_composer_prevents_infinite_loop()
{
    $composer = new MyComposer();
    $view = view('test');
    
    // Test chiamate multiple
    for ($i = 0; $i < 100; $i++) {
        $composer->compose($view);
    }
    
    // Non deve andare in timeout
    $this->assertTrue(true);
}
```

### Checklist Pre-Deploy
- [ ] Static flag guard implementato
- [ ] Try-finally per cleanup
- [ ] Auth check sicuro (no Auth::check() diretto)
- [ ] Error handling graceful
- [ ] Test loop prevention
- [ ] Logging solo in debug
- [ ] Performance sotto 5ms per chiamata

### Indicatori di Rischio
- Stack trace depth > 50
- Query database duplicate
- Memory usage crescente
- Timeout su view rendering
- "Maximum execution time exceeded"

## Principi Filosofici

### Zen del Composer
*"Un composer deve essere come l'aria - presente ma invisibile, utile ma non invadente"*

### Legge della Composizione
*"Se un composer chiama un servizio che può causare il rendering di una view, quel composer è destinato al loop infinito"*

### Performance Mantra  
*"Il miglior composer è quello che esegue in 0ms - il secondo migliore in <5ms"*

## Collegamenti

- [View Composer Loop Fix](mdc:../../laravel/Modules/Xot/docs/view-composer-loop-infinite-fix.md)
- [XotComposer Implementation](mdc:../../laravel/Modules/Xot/app/View/Composers/XotComposer.php)
- [Laravel View Composers](https://laravel.com/docs/views#view-composers)

---

**Creato**: Dicembre 2024  
**Priorità**: P0 (Critical)  
**Applicabilità**: Tutti i View Composers in tutti i moduli
