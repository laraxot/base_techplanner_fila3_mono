---
description:
globs:
alwaysApply: false
---
# Best Practices Event Sourcing & CQRS (Modulo Activity)

- Ogni cambiamento di stato critico deve generare un evento persistito (event store)
- Usare aggregate per garantire coerenza e validazione della logica di dominio
- Scrivere proiettori idempotenti e testabili per ogni vista/materializzazione
- Versionare gli eventi e mantenere compatibilità retroattiva
- Utilizzare snapshot per migliorare le performance di replay
- Integrare con activitylog per audit trail legacy o ibrido
- Documentare ogni evento e proiezione in modo neutro e riutilizzabile
- Prevedere comandi/artisan per il replay degli eventi e la rigenerazione delle proiezioni
- Testare eventi, aggregate e proiezioni
- Collegare ogni evento a una user story o requisito di business

## Checklist
- [ ] Ogni azione business genera un evento
- [ ] Aggregate per ogni entità critica
- [ ] Proiezioni idempotenti e testate
- [ ] Eventi versionati e documentati
- [ ] Snapshot implementati se necessario
- [ ] Audit trail sempre disponibile
- [ ] Comandi di replay e rigenerazione proiezioni
- [ ] Documentazione aggiornata e neutra

## Link utili
- https://github.com/spatie/laravel-event-sourcing
- https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing
- https://github.com/spatie/larabank-event-projector
- [README Activity](../../laravel/Modules/Activity/docs/README.md)
- [event-sourcing.md](../../laravel/Modules/Activity/docs/event-sourcing.md)
