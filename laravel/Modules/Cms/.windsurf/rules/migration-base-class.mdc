---
description: Guidelines for using XotBaseMigration and naming conventions for user type and state fields.
globs: []
alwaysApply: false
---

# Migration Base Class Rule

**When**: Creating or updating a migration file in the project.

**Then**: 
- **Extend XotBaseMigration**: Always extend `Modules\Xot\Database\Migrations\XotBaseMigration` instead of `Illuminate\Database\Migrations\Migration` for all migration files. This ensures that project-specific migration behaviors and configurations are applied.
- **Use tableCreate and tableUpdate**: Structure migrations using `$this->tableCreate()` for creating tables and `$this->tableUpdate()` for updates, as provided by `XotBaseMigration`, to maintain consistency with project conventions.
- **Check for Table Existence**: Include a check using `Schema::hasTable()` before creating a table to avoid errors if the table already exists (if not using `tableCreate`).
- **Use of Primary Key**: Ensure the use of composite primary keys if applicable, for better data integrity in pivot tables.
- **User Type Field Naming**: When adding a field to distinguish between different user types in the `users` table, use `type` as the column name following the Tighten Parental package convention (Reference: https://github.com/tighten/parental).
- **State Field Naming for Moderation**: When implementing moderation or status tracking for models, use `state` as the field name instead of `moderation_status`, adhering to Spatie Laravel Model States (Reference: https://spatie.be/docs/laravel-model-states/v2/working-with-states/01-configuring-states).
- **Migration Column Check**: When checking for column existence in migrations, use the following syntax as per `XotBaseMigration`:
  ```php
  if (!$this->hasColumn('state')) {
      // Add column logic here
  }
  ```
  This ensures compatibility with the custom migration base class used in the project.

**Because**: 
- `XotBaseMigration` provides additional functionality and consistency specific to the project's needs.
- Using `tableCreate` and `tableUpdate` methods ensures migrations adhere to project-specific patterns and are more maintainable.
- Checking for table existence prevents errors during migration execution when tables are already present in the database.
- Using composite primary keys in pivot tables ensures unique relationships between entities, enhancing data integrity.
- Correct naming conventions like `type` for user differentiation and `state` for status tracking align with established Laravel packages, promoting interoperability and clarity in codebase.

## Examples
```php
use Modules\Xot\Database\Migrations\XotBaseMigration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends XotBaseMigration
{
    public function up(): void
    {
        // -- CREATE --
        $this->tableCreate(
            static function (Blueprint $table): void {
                $table->id();
                $table->string('user_id', 36);
                $table->string('team_id', 36);
                $table->timestamps();
            }
        );
        // -- UPDATE --
        $this->tableUpdate(
            function (Blueprint $table): void {
                $this->updateTimestamps($table);
            }
        );
    }
    // ...
};

// Correct usage with tableCreate and tableUpdate
public function up(): void
{
    // -- CREATE --
    $this->tableCreate(
        static function (Blueprint $table): void {
            $table->id();
            $table->string('user_id', 36);
            $table->string('team_id', 36);
            $table->timestamps();
        }
    );
    // -- UPDATE --
    $this->tableUpdate(
        function (Blueprint $table): void {
            $this->updateTimestamps($table);
        }
    );
}

// Adding user type field
Schema::table('users', function (Blueprint $table) {
    $table->string('type')->nullable();
});

// Adding state field for moderation
Schema::table('users', function (Blueprint $table) {
    $table->string('state')->default('pending');
});

// Checking for column existence
if (!$this->hasColumn('state')) {
    Schema::table('users', function (Blueprint $table) {
        $table->string('state')->default('pending');
    });
}
