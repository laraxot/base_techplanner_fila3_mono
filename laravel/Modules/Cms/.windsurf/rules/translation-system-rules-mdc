---
trigger: model_decision
description: Regole per il sistema di traduzione in applicazioni Laravel con Filament, che definiscono la struttura delle chiavi di traduzione, l'organizzazione dei file e le best practices per garantire un'applicazione multilingua manutenibile e scalabile.
globs: *.php, *.blade.php, resources/lang/**/*.php
---

# Regole per il Sistema di Traduzione

## Quando applicare (WHEN)
- Quando crei o modifichi file di traduzione
- Quando usi la funzione `__()` per testo visibile all'utente
- Quando definisci componenti Filament (etichette, placeholder, aiuti)
- Quando crei notifiche o enum con testo da tradurre

## Cosa fare (THEN)
- Usa SEMPRE chiavi strutturate gerarchicamente: `modulo::risorsa.fields.campo.label`
- MAI testo diretto nelle funzioni di traduzione (`__('Accedi')` è ERRATO)
- MAI usare `->label()` nei componenti Filament (gestito da LangServiceProvider)
- Organizza i file di traduzione per modulo e risorsa
- Implementa metodi helper nelle enum per etichette tradotte
- Imposta sempre il destinatario nelle notifiche con SpatieEmail

## Perché (BECAUSE)
- Le chiavi strutturate migliorano la manutenibilità e facilitano nuove lingue
- Il testo diretto è difficile da gestire e tradurre
- `->label()` bypassa il sistema automatico di Filament
- File organizzati per modulo facilitano la gestione
- Helper nelle enum centralizzano la logica di traduzione
- SpatieEmail non imposta automaticamente il destinatario

## Esempi

### Struttura Gerarchica delle Chiavi
```php
// CORRETTO
__('patient::doctor-resource.fields.first_name.label')
// ERRATO
__('Nome')
```

### Organizzazione File
```php
// resources/lang/it/patient/doctor-resource.php
return [
    'fields' => [
        'first_name' => [
            'label' => 'Nome',
            'placeholder' => 'Inserisci il nome',
            'help' => 'Inserisci il nome del dottore',
        ],
    ],
];
```

### Componenti Filament
```php
// CORRETTO
TextInput::make('first_name') // Traduzione automatica
// ERRATO
TextInput::make('first_name')->label('Nome')
```

### Enum
```php
enum DoctorStatus: string {
    case PENDING = 'pending';
    public function getLabel(): string {
        return __('patient::enums.doctor_status.pending');
    }
}
```

### Notifiche
```php
public function toMail($notifiable): SpatieEmail {
    $email = new SpatieEmail($this->record, $this->slug);
    $email->to($notifiable->routeNotificationFor('mail'));
    return $email;
}
```

## Checklist
- [ ] Chiavi strutturate e gerarchiche
- [ ] Nessun testo diretto in __()
- [ ] Nessun ->label() nei componenti
- [ ] File organizzati per modulo/risorsa
- [ ] Enum con helper per etichette
- [ ] Notifiche con destinatario esplicito
- [ ] Documentazione aggiornata

## Errori Comuni
- Testo hardcoded in __()
- Uso di ->label() nei componenti
- Duplicazione di traduzioni
- Mancanza di destinatario nelle notifiche

## FAQ
**D: Posso usare ->label() per override temporanei?**
R: No, usa sempre il sistema di traduzione centralizzato.

**D: Come gestisco i plurali?**
R: Usa la funzione trans_choice e struttura le chiavi secondo la documentazione Laravel.

## Collegamenti
- [README traduzioni](mdc:../../Modules/Lang/docs/README.md)
- [LangServiceProvider](mdc:../../Modules/Lang/app/Providers/LangServiceProvider.php)
- [Filament Best Practices](mdc:filament-best-practices.mdc)
