---
trigger: manual
description:
globs:
---
# Error Handling Best Practices

## Regole Fondamentali
- Ogni eccezione deve essere una classe dedicata
- Estendere `Exception` o `RuntimeException`
- Implementare i metodi obbligatori
- Documentare l'eccezione
- Testare l'eccezione

## Struttura
- Namespace corretto: `App\Exceptions` o `Modules\{Module}\Exceptions`
- Nome classe in PascalCase con suffisso `Exception`
- Metodi obbligatori: `__construct()`, `render()`

## Esempio Corretto
```php
// CORRETTO
class ValidationException extends Exception
{
    public function __construct(
        protected array $errors
    ) {
        parent::__construct('Validation failed');
    }

    public function render($request): JsonResponse
    {
        return response()->json([
            'message' => $this->getMessage(),
            'errors' => $this->errors,
        ], 422);
    }
}
```

## Best Practices
- Classi dedicate
- Messaggi chiari
- Logging appropriato
- Test di unit√†
- Gestione centralizzata

## Checklist
- [ ] Eccezione documentata
- [ ] Test scritti
- [ ] Messaggi tradotti
- [ ] Logging implementato
- [ ] Gestione centralizzata

## Collegamenti correlati
- [Filament Best Practices](mdc:../.windsurf/rules/filament-best-practices.mdc)
- [Validation Rules](mdc:../.windsurf/rules/validation.mdc)
- [Migration Best Practices](mdc:../.windsurf/rules/migrations.mdc)
- [Documentation Standards](mdc:../.windsurf/rules/documentation.mdc)
- [Checklist di Ripartenza](mdc:../docs/checklist-di-ripartenza.md)
