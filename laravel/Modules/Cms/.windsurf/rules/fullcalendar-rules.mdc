---
description: Rules for FullCalendar component implementation in Laraxot/<nome progetto> projects
globs: ["**/Filament/Widgets/*Calendar*.php", "**/resources/views/**/*calendar*.blade.php", "**/Models/Event.php", "**/Controllers/**/*Calendar*Controller.php"]
alwaysApply: true
---

# FullCalendar Implementation Rules in Laraxot/<nome progetto>

> **IMPORTANT NOTE**: This document is the official reference for implementing the Saade FullCalendar component for Filament in Laraxot <nome progetto> projects. The rules defined here must be strictly followed in all implementations.

## Core Principles

- **Component Structure**: ALWAYS extend `BaseCalendarWidget` from the UI module (which in turn extends Saade's `FullCalendarWidget`)
- **Translations**: All labels, headings, and descriptions MUST come ONLY from module translation files
- **Type Safety**: ALWAYS use explicit types for all methods and parameters, with complete PHPDoc
- **Documentation**: Maintain documentation in BOTH UI and specific modules with bidirectional links
- **Model**: ALWAYS use a model that extends the BaseModel of its own module
- **Testing**: Implement regression tests for each implementation

## Base Widget Extension

```php
<?php

declare(strict_types=1);

namespace Modules\ModuleName\Filament\Widgets;

use Filament\Forms;
use Modules\UI\Filament\Widgets\BaseCalendarWidget;
use Modules\ModuleName\Models\Event;

class ModuleNameCalendarWidget extends BaseCalendarWidget
{
    /**
     * The model for calendar events.
     *
     * @var class-string<\Illuminate\Database\Eloquent\Model>
     */
    protected string $model = Event::class;

    /**
     * Configure widget properties.
     *
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp();

        $this->selectable(true)
            ->editable(true)
            ->timezone(config('app.timezone'))
            ->locale('it')
            ->plugins(['dayGrid', 'timeGrid', 'list', 'interaction']);
    }
}
```

## Translation Usage

### ✅ Correct Implementation

```php
/**
 * Form schema for events.
 *
 * @return array<int, \Filament\Forms\Components\Component>
 */
public function getFormSchema(): array
{
    return [
        Forms\Components\TextInput::make('title')
            ->label(__('modulename::calendar.fields.title.label'))
            ->placeholder(__('modulename::calendar.fields.title.placeholder'))
            ->helperText(__('modulename::calendar.fields.title.help'))
            ->required(),

        Forms\Components\Grid::make()
            ->schema([
                Forms\Components\DateTimePicker::make('start_date')
                    ->label(__('modulename::calendar.fields.start_date.label'))
                    ->required(),

                Forms\Components\DateTimePicker::make('end_date')
                    ->label(__('modulename::calendar.fields.end_date.label'))
                    ->required(),
            ]),
    ];
}
```

### ❌ Incorrect Implementation (NEVER DO THIS)

```php
// ❌ NEVER DO THIS
public function getFormSchema(): array
{
    return [
        Forms\Components\TextInput::make('title')
            ->label('Title') // Hardcoded string
            ->placeholder('Enter an event title'), // Hardcoded string

        Forms\Components\DateTimePicker::make('start_date')
            ->label('Start date'), // Hardcoded string
    ];
}
```

## Data Model

### ✅ Correct Implementation

```php
<?php

declare(strict_types=1);

namespace Modules\ModuleName\Models;

use Carbon\Carbon;
use Modules\ModuleName\Models\BaseModel;

/**
 * Model for calendar events.
 *
 * @property int $id
 * @property string $title
 * @property string|null $description
 * @property Carbon $start_date
 * @property Carbon $end_date
 * @property string|null $color
 * @property bool $is_all_day
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 */
class Event extends BaseModel
{
    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'title',
        'description',
        'start_date',
        'end_date',
        'color',
        'is_all_day',
    ];

    /**
     * The attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'start_date' => 'datetime',
            'end_date' => 'datetime',
            'is_all_day' => 'boolean',
            'created_at' => 'datetime',
            'updated_at' => 'datetime',
        ];
    }
}
```

### ❌ Incorrect Implementation (NEVER DO THIS)

```php
// ❌ NEVER DO THIS
namespace App\Models;

use Illuminate\Database\Eloquent\Model; // Doesn't extend module's BaseModel

class Event extends Model // Uses App namespace instead of Modules\ModuleName
{
    protected $fillable = [ // Missing PHPDoc @var list<string>
        'title',
        'description',
        'start_date',
        'end_date',
        'color',
    ];

    protected $casts = [ // Uses deprecated $casts property instead of casts() method
        'start_date' => 'datetime',
        'end_date' => 'datetime',
    ];
}
```

## Widget Registration

### ✅ Correct Implementation

```php
<?php

declare(strict_types=1);

namespace Modules\ModuleName\Providers;

use Filament\Facades\Filament;
use Illuminate\Support\ServiceProvider;
use Modules\ModuleName\Filament\Widgets\ModuleNameCalendarWidget;

class ModuleNameServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot(): void
    {
        // Widget registration
        Filament::registerWidgets([
            ModuleNameCalendarWidget::class,
        ]);
    }
}
```

## Required Documentation

Documentation must be structured as follows:

1. **Base Component Technical Documentation**
   - Location: `Modules/UI/docs/components/full_calendar.md`
   - Content: API, configuration, available options, basic examples
   - Links to official Saade FullCalendar documentation
   - Links to specific implementations in modules

2. **Specific Implementation Documentation**
   - Location: `Modules/ModuleName/docs/features/full_calendar.md`
   - Content: Specific implementation details, use cases, examples
   - Link to base component in UI module
   - Explanations of module-specific customizations

3. **Root Documentation**
   - Location: `docs/full_calendar.md` or `docs/UI_COMPONENTS/full_calendar.md`
   - Content: General overview, links to all specific documents
   - High-level usage guidelines

All files must include bidirectional links to maintain up-to-date documentation.

## JavaScript Customization

To customize JavaScript behavior while maintaining type safety:

```php
/**
 * Customize event rendering.
 *
 * @return string
 */
public function eventDidMount(): string
{
    return <<<JS
    function({ event, el }) {
        // Alpine.js tooltip
        el.setAttribute("x-tooltip", "tooltip");
        el.setAttribute("x-data", "{ tooltip: '"+event.extendedProps.description || event.title+"' }");

        // Appearance customization
        if (event.extendedProps.priority === 'high') {
            el.classList.add('border-red-500', 'border-l-4');
        }
    }
    JS;
}

/**
 * Customize date click behavior.
 *
 * @return string
 */
public function dateClick(): string
{
    return <<<JS
    function({ date, jsEvent, view }) {
        // Code to handle clicking on a date
        console.log('Clicked on: ' + date.toISOString());
        // Here you can call Livewire methods
        // Example: this.dispatchEvent('createEvent', { date: date.toISOString() });
    }
    JS;
}
```

## Quality Checks

Before considering a FullCalendar implementation complete:

1. **PHPStan Level 9 Verification**
   - Complete typing (parameters, return types, properties)
   - Correct generics in Collections and Relations
   - No use of mixed unless strictly necessary
   - Run PHPStan from the `laravel` directory

2. **Translation Verification**
   - No hardcoded strings
   - All labels and messages from translation files
   - Expanded translation structure with label, placeholder, help
   - Translation file in `Modules/ModuleName/lang/en/calendar.php`

3. **Documentation Verification**
   - Documentation in UI module: `Modules/UI/docs/components/full_calendar.md`
   - Documentation in specific module: `Modules/ModuleName/docs/features/full_calendar.md`
   - Bidirectional links between documentations
   - Root documentation updated when necessary

4. **Namespace Verification**
   - Widget in correct namespace `Modules\ModuleName\Filament\Widgets`
   - Model in correct namespace `Modules\ModuleName\Models`
   - NEVER use App\ namespace for module components

5. **Correct Override Verification**
   - Extension from UI base widget or original widget
   - Correct method overrides with parent calls when necessary
   - Correct use of `setUp()` method for configuration

6. **Model Verification**
   - Extends module's BaseModel
   - Uses `casts()` method instead of `$casts` property
   - Complete PHPDoc for all properties
   - `$fillable` is protected with annotation `@var list<string>`

7. **Migration Verification**
   - Extends `XotBaseMigration`
   - Doesn't implement `down()` method
   - Checks for table/column existence before creating

8. **Regression Testing**
   - Basic functionality tests
   - Regression tests for bugfixes
   - Integration tests with other modules

## Patterns and Anti-Patterns

### ✅ Correct Patterns

#### Configuration in setUp

```php
/**
 * Configure the widget.
 *
 * @return void
 */
public function setUp(): void
{
    parent::setUp();

    $this->selectable()
        ->editable()
        ->timezone(config('app.timezone'))
        ->locale('it');
}
```

#### Correct Type Usage

```php
/**
 * Fetch events to display in the calendar.
 *
 * @param array<string, mixed> $fetchInfo
 *
 * @return array<int, array<string, mixed>>
 */
public function fetchEvents(array $fetchInfo): array
{
    // Implementation
}
```

### ❌ Anti-Patterns to Avoid

#### NEVER Hardcode Strings

```php
// ❌ DO NOT DO THIS
public function getFormSchema(): array
{
    return [
        Forms\Components\TextInput::make('title')
            ->label('Title') // Hardcoded string
            ->placeholder('Enter event title') // Hardcoded string
    ];
}
```

#### NEVER Use $casts Property

```php
// ❌ DO NOT DO THIS
class Event extends BaseModel
{
    protected $casts = [
        'start_date' => 'datetime',
        'end_date' => 'datetime',
    ];
}
```

#### NEVER Directly Extend Eloquent\Model

```php
// ❌ DO NOT DO THIS
class Event extends \Illuminate\Database\Eloquent\Model
{
    // Implementation
}
```

## Documentation Links

- [UI Component Documentation](../../laravel/Modules/UI/docs/components/full_calendar.md)
- [Ptv Implementation](../../laravel/Modules/Ptv/docs/features/full_calendar.md)
- [Cursor Rules](../.cursor/rules/fullcalendar-integration.mdc)
- [Root Documentation](../../docs/full_calendar.md)

*Last updated: June 2025*
