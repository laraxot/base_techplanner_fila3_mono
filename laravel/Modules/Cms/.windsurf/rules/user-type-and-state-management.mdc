# User Type and State Management Rules

## User Type Handling with Tighten/Parental
- **Reference**: [Tighten/Parental](https://github.com/tighten/parental)
- **Rule**: Use `type` column on the `users` table to distinguish between different user types instead of `user_type`. This follows the Single Table Inheritance (STI) pattern supported by Parental.
- **Migration Example**:
  ```php
  $this->tableUpdate('users', function (Blueprint $table) {
      if (!$this->hasColumn('type')) {
          $table->string('type')->nullable();
      }
  });
  ```
- **Purpose**: This allows accessing child models from parent models efficiently, ensuring that different user types are managed through inheritance in a Laravel-friendly way.

## State Management with Spatie/Laravel-Model-States
- **Reference**: [Spatie/Laravel-Model-States](https://spatie.be/docs/laravel-model-states/v2/working-with-states/01-configuring-states)
- **Rule**: Use `state` column or a similar naming convention for managing model states instead of custom fields like `moderation_status`. Configure states using the Spatie package for robust state transitions.
- **Migration Example**:
  ```php
  $this->tableUpdate('users', function (Blueprint $table) {
      if (!$this->hasColumn('state')) {
          $table->string('state')->default('pending');
      }
  });
  ```
- **State Configuration**: Define states and transitions in a dedicated state class for the model.
  ```php
  namespace App\States;

  use Spatie\ModelStates\State;

  abstract class UserState extends State
  {
      public static $states = [
          Pending::class,
          UnderReview::class,
          Approved::class,
          Rejected::class,
      ];
  }
  ```
- **Purpose**: This approach provides a structured way to manage state transitions, validations, and business logic associated with state changes, avoiding ad-hoc status fields.

## Business Logic with Spatie/Laravel-Queueable-Action
- **Reference**: [Spatie/Laravel-Queueable-Action](https://github.com/spatie/laravel-queueable-action)
- **Rule**: Use `spatie/laravel-queueable-action` for handling business logic instead of traditional Service classes. This allows actions to be queued and processed asynchronously, improving performance and scalability.
- **Usage Example**:
  ```php
  namespace App\Actions;

  use Spatie\QueueableAction\QueueableAction;

  class UpdateUserStateAction
  {
      use QueueableAction;

      public function execute(User $user, string $newState): void
      {
          $user->state = $newState;
          $user->save();
          // Additional logic for state transition
      }
  }
  ```
- **Purpose**: Encapsulate business logic in queueable actions to ensure separation of concerns, facilitate asynchronous processing, and improve application performance.

## Activity Logging with Spatie/Laravel-Activitylog
- **Reference**: [Spatie/Laravel-Activitylog](https://spatie.be/docs/laravel-activitylog/v4/introduction)
- **Rule**: Use `spatie/laravel-activitylog` for logging activities and changes to models instead of creating custom log tables or models like `ModerationLog`. This package provides a robust and flexible way to log model events.
- **Setup Example**:
  - Add the `Spatie\Activitylog\Traits\LogsActivity` trait to models that need activity logging.
  - Configure the model to log specific attributes or events.
  ```php
  namespace App\Models;

  use Illuminate\Database\Eloquent\Model;
  use Spatie\Activitylog\Traits\LogsActivity;
  use Spatie\Activitylog\LogOptions;

  class User extends Model
  {
      use LogsActivity;

      public function getActivitylogOptions(): LogOptions
      {
          return LogOptions::defaults()
              ->logOnly(['state', 'type'])
              ->logOnlyDirty()
              ->useLogName('user_moderation');
      }
  }
  ```
- **Usage Example**:
  - Log activities when state changes or other significant events occur.
  ```php
  // Activity will be logged automatically when using the trait
  $user->state = 'under_review';
  $user->save();

  // Or manually log an activity
  activity()
      ->causedBy(auth()->user())
      ->performedOn($user)
      ->withProperties(['new_state' => 'under_review'])
      ->log('User state updated');
  ```
- **Purpose**: Centralize activity logging with a well-maintained package, reducing the need for custom logging solutions and providing features like log filtering, causation, and detailed activity tracking.

## Documentation
- Ensure all migration and model documentation reflects the use of `type` for user inheritance and `state` for status management.
- Update any existing documentation or code to align with these conventions to prevent confusion and maintain consistency across the project.
