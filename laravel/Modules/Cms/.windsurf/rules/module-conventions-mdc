---
trigger: model_decision
description: Conventions for organizing and developing modules.
globs: []
---

# Module Conventions

## Introduction
This document outlines the conventions for organizing and developing modules. These conventions ensure consistency across different parts of the application.

## Module Structure
- **Standard Directory Layout**: Each module follows a standard directory structure with `app`, `database`, `routes`, `resources`, etc., tailored to the module's purpose.
- **Namespace**: Module namespaces follow the pattern `Modules\[ModuleName]\`, ensuring clear identification and autoloading.

## Naming Conventions
- **Model Names**: Models are named after the primary entity they represent (e.g., `User`, `Patient`), using singular form.
- **Controller Names**: Controllers are suffixed with `Controller` (e.g., `UserController`).
- **Migration Names**: Descriptive names reflecting the change, prefixed with date (e.g., `2024_12_05_000035_create_model_has_roles_table.php`).
- **Enum Names**: Enums are suffixed with the type of data they represent (e.g., `UserType`, `UserState`).

## Module-Specific Conventions
- **General Guidelines**:
  - Use `type` for categorizing entities.
  - Use `state` for tracking status.
  - Implement queueable actions for tasks.
  - Log activities.

## Integration Patterns
- **Inter-Module Communication**: Use events and listeners for cross-module interactions to maintain loose coupling.
- **Shared Resources**: UI components and utilities are centralized for reuse.

## Documentation
- **Module Documentation**: Each module must have a `docs` directory with detailed information on its purpose, entities, workflows, and integration points.
- **README.md**: A brief overview of the module's functionality should be included in a `README.md` file at the module root.

These conventions aim to standardize development practices, ensuring maintainability and scalability.
