---
description: Overview of the architectural structure of the project.
globs: []
alwaysApply: false
---

# Project Architecture Overview

## Introduction
This document outlines the architectural structure of the project, based on an analysis of the codebase and documentation directories. The goal is to provide a clear understanding of how the system is organized and how different components interact.

## Core Architecture
- **Framework**: The project is built on a modular framework, utilizing its structure for organizing code into distinct modules.
- **Multi-Tenant System**: Managed through a dedicated module, supporting different user groups and data isolation.
- **Admin Interface**: Used for backend administration, with custom resources and components defined in various modules.

## Modules
The project is divided into several key modules, each with specific responsibilities:
- **User**: Handles user management, authentication, roles, and permissions.
- **Data Management**: Manages data and related functionalities.
- **Services**: Focuses on service-related functionalities.
- **Reporting**: Provides statistical and reporting capabilities.
- **UI**: Contains user interface components for consistent design across the application.
- **Multi-Tenancy**: Manages multi-tenancy features.
- **Content Management**: Manages content through a custom system.
- **Notifications**: Handles notifications to users.

## Key Design Patterns
- **Modular Design**: Code is organized into modules to ensure separation of concerns and reusability.
- **Event-Driven Architecture**: Used for handling state transitions and notifications, especially in user moderation workflows.
- **Queueable Actions**: Asynchronous processing of tasks.
- **Activity Logging**: Comprehensive logging for tracking user and system activities.

## Documentation Structure
- Extensive documentation is found in the `/docs` directory, covering project details, roadmaps, standards, and technical guides.
- Each module often contains its own `docs` folder for specific documentation related to its functionality.

## Coding Standards
- **PSR-12**: Followed for code styling.
- **Type Hints and Return Types**: Mandatory for all methods to ensure clarity and robustness.
- **Docblocks**: Required for public methods to aid in documentation and IDE support.

This architecture overview serves as a foundation for understanding the project structure and guiding development efforts.
