---
trigger: manual
description:
globs:
---
# Regole per Integrazione Widget nei Temi

## Principio Fondamentale
I temi NON devono mai ricreare funzionalità esistenti nei moduli Filament. Devono solo richiamare i widget esistenti e applicare styling specifico del tema.

## Errori da Evitare

### ❌ Implementazione Sbagliata
```php
// NON fare questo - ricrea tutto da zero
<div id="calendar"></div>
<script>
    // Implementazione FullCalendar completa
    var calendar = new FullCalendar.Calendar(calendarEl, {
        // configurazioni duplicate...
    });
</script>
```

### ✅ Implementazione Corretta
```php
// Fare questo - richiama widget esistente
@php
    $widgetClass = match (auth()->user()?->type) {
        \Modules\<nome progetto>\Enums\UserTypeEnum::PATIENT =>
            \Modules\<nome progetto>\Filament\Widgets\PatientCalendarWidget::class,
        \Modules\<nome progetto>\Enums\UserTypeEnum::DOCTOR =>
            \Modules\<nome progetto>\Filament\Widgets\DoctorCalendarWidget::class,
        \Modules\<nome progetto>\Enums\UserTypeEnum::ADMIN =>
            \Modules\<nome progetto>\Filament\Widgets\AdminCalendarWidget::class,
        default => null
    };
@endphp

@if($widgetClass && $widgetClass::canView())
    <div class="theme-calendar-wrapper">
        @livewire($widgetClass, $attributes->getAttributes())
    </div>
@endif
```

## Regole Specifiche

### 1. Identificazione Widget
- Verificare sempre se esiste un widget Filament per la funzionalità
- Utilizzare il namespace corretto: `Modules\<Module>\Filament\Widgets\`
- Rispettare i controlli di accesso del widget (`canView()`)

### 2. Sicurezza
- NON bypassare mai i controlli di accesso dei widget
- Utilizzare sempre `auth()->check()` e verifiche tipo utente
- Rispettare la tenancy di Filament per multi-tenant

### 3. Parametri
- Passare parametri attraverso `@livewire()`
- Utilizzare `$attributes->getAttributes()` per props del componente
- Mantenere compatibilità con API del widget

### 4. Styling
- Applicare solo CSS specifico del tema
- NON modificare la logica del widget
- Utilizzare wrapper CSS per personalizzazioni

## Pattern di Implementazione

### Struttura Base
```php
@props([
    'height' => '600px',
    'type' => 'auto',
    // altri props specifici del tema
])

@php
    // Logica per determinare widget appropriato
    $widgetClass = $this->determineWidgetClass();
    $canView = $widgetClass && $widgetClass::canView();
@endphp

@if($canView)
    <div class="{{ $this->getThemeClasses() }}">
        @livewire($widgetClass, $this->getWidgetProps())
    </div>
@else
    @include('theme::components.access-denied')
@endif
```

### Metodi Helper
```php
private function determineWidgetClass(): ?string
{
    if (!auth()->check()) return null;

    return match (auth()->user()->type) {
        UserType::PATIENT => PatientCalendarWidget::class,
        UserType::DOCTOR => DoctorCalendarWidget::class,
        UserType::ADMIN => AdminCalendarWidget::class,
        default => null
    };
}

private function getWidgetProps(): array
{
    return array_filter([
        'height' => $this->height,
        'studio_id' => $this->studioId,
        // altri props necessari
    ]);
}
```

## Controlli di Qualità

### Checklist Pre-Implementazione
- [ ] Esiste già un widget Filament per questa funzionalità?
- [ ] Il widget ha controlli di accesso appropriati?
- [ ] Il widget gestisce correttamente la tenancy?
- [ ] Il widget ha configurazioni centralizzate?

### Checklist Post-Implementazione
- [ ] Il tema richiama il widget invece di ricreare funzionalità?
- [ ] I controlli di accesso sono rispettati?
- [ ] Lo styling è applicato solo tramite CSS?
- [ ] I parametri sono passati correttamente?

## Esempi Specifici

### Calendar Widget
```php
// ❌ SBAGLIATO - nel tema One
<script src="fullcalendar.js"></script>
<script>
    var calendar = new FullCalendar.Calendar(/* ... */);
</script>

// ✅ CORRETTO
@livewire(\Modules\<nome progetto>\Filament\Widgets\PatientCalendarWidget::class)
```

### Form Widget
```php
// ❌ SBAGLIATO
<form action="/appointments" method="POST">
    <!-- campi form duplicati -->
</form>

// ✅ CORRETTO
@livewire(\Modules\<nome progetto>\Filament\Widgets\AppointmentFormWidget::class)
```

## Documentazione Richiesta

Ogni integrazione widget-tema deve essere documentata in:
1. `docs/theme-widget-integration.md` del modulo
2. `README.md` del tema
3. File `.mdc` nelle regole Cursor/Windsurf

## Filosofia

### DRY (Don't Repeat Yourself)
- Una funzionalità = Un widget
- Configurazioni centralizzate
- Logica non duplicata

### KISS (Keep It Simple, Stupid)
- Temi si occupano solo di presentazione
- Widget si occupano di logica e dati
- Separazione chiara delle responsabilità

### Sicurezza First
- Controlli di accesso sempre rispettati
- Tenancy sempre verificata
- Dati sempre filtrati correttamente
