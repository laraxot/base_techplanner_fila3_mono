# Calendar Widgets Implementation Rules

## Base Rules

1. **Widget Naming**
   - Use `BaseCalendarWidget` as the base class for all calendar widgets
   - Follow the naming pattern `{UserType}CalendarWidget` (e.g., `DoctorCalendarWidget`)
   - Place widgets in `Modules/<nome progetto>/Filament/Widgets/{UserType}/`

2. **File Structure**
   ```
   Modules/
   └── <nome progetto>/
       ├── Filament/
       │   └── Widgets/
       │       ├── BaseCalendarWidget.php
       │       ├── Admin/
       │       │   └── AdminCalendarWidget.php
       │       ├── Doctor/
       │       │   └── DoctorCalendarWidget.php
       │       └── Patient/
       │           └── PatientCalendarWidget.php
       └── docs/
           └── calendar/
               └── widgets/
                   ├── README.md
                   ├── admin-calendar-widget.md
                   ├── doctor-calendar-widget.md
                   └── patient-calendar-widget.md
   ```

3. **Code Standards**
   - Always extend `BaseCalendarWidget`
   - Implement required abstract methods
   - Use type hints and return types
   - Document all public and protected methods
   - Follow PSR-12 coding standards

## Required Methods

### BaseCalendarWidget

```php
abstract class BaseCalendarWidget extends FullCalendarWidget
{
    protected static ?string $model = null;
    protected static string $heading = 'Calendar';

    protected function getEventsQuery();
    abstract protected function mapToEvent($model): array;
    protected function getCalendarConfig(): array;
}
```

### Required Methods in Child Classes

1. **getEventsQuery()**
   - Must return a query builder instance
   - Must apply proper scoping (tenancy, user permissions)
   - Must eager load required relationships

2. **mapToEvent()**
   - Must return an array with required FullCalendar event properties
   - Must include all necessary extended properties
   - Must handle null values gracefully

3. **getCalendarConfig()**
   - Must return an array of FullCalendar options
   - Should include view configuration, header toolbar, and other settings

## Security Rules

1. **Tenancy**
   - Always scope queries to the current tenant
   - Use `Filament::getTenant()` to get the current clinic
   - Never expose data across tenant boundaries

2. **Authorization**
   - Check user permissions before performing actions
   - Use policies for complex authorization logic
   - Validate all user inputs

3. **Data Protection**
   - Never expose sensitive data in the frontend
   - Use proper data masking for PII
   - Implement rate limiting for API endpoints

## Best Practices

1. **Performance**
   - Eager load relationships to prevent N+1 queries
   - Cache frequently accessed data
   - Use pagination for large datasets

2. **Error Handling**
   - Use proper exception handling
   - Log all errors with appropriate context
   - Provide user-friendly error messages

3. **Testing**
   - Write tests for all calendar widgets
   - Test different user roles and permissions
   - Test tenancy boundaries

## Documentation

1. **Code Documentation**
   - Document all public and protected methods
   - Include examples where necessary
   - Document any non-obvious behavior

2. **User Documentation**
   - Document widget features and usage
   - Include screenshots where helpful
   - Provide examples of common tasks

## Related Files

- `docs/calendar/architecture.md`
- `docs/calendar/widgets/README.md`
- `docs/calendar/widgets/admin-calendar-widget.md`
- `docs/calendar/widgets/doctor-calendar-widget.md`
- `docs/calendar/widgets/patient-calendar-widget.md`
