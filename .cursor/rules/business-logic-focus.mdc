# Regola Critica: Focus sulla Logica di Business

## Principio Fondamentale
**CONCENTRARSI SEMPRE SULLA LOGICA DI BUSINESS, NON SUI DETTAGLI IMPLEMENTATIVI!**

## Regola Assoluta
**QUESTA È UNA REGOLA IMPORTANTISSIMA DA RICORDARE SEMPRE:**

### Cosa Significa
- **Logica di Business**: Comportamenti, regole aziendali, flussi di lavoro, validazioni di dominio
- **Dettagli Implementativi**: Configurazioni framework, proprietà tecniche, dettagli di infrastruttura

### Principi Guida
1. **Valore del Software**: La logica di business è ciò che crea valore per l'utente
2. **Responsabilità**: I dettagli implementativi sono responsabilità del framework
3. **Manutenibilità**: Test di logica di business sono più stabili e significativi
4. **ROI**: Testare la logica di business ha un ritorno di investimento maggiore

### Esempi Pratici

#### ✅ LOGICA DI BUSINESS (SEMPRE TESTARE)
```php
// Regole aziendali
test('appointment cannot be cancelled after completion', function () {
    $appointment = Appointment::factory()->completed()->create();
    expect($appointment->canBeCancelled())->toBeFalse();
});

// Comportamenti del dominio
test('emergency appointments have priority', function () {
    $emergency = Appointment::factory()->emergency()->create();
    $regular = Appointment::factory()->create();
    expect($emergency->getPriority())->toBeGreaterThan($regular->getPriority());
});

// Validazioni di business
test('appointment duration must be at least 15 minutes', function () {
    expect(fn() => Appointment::create([
        'starts_at' => now(),
        'ends_at' => now()->addMinutes(10)
    ]))->toThrow(ValidationException::class);
});
```

#### ❌ DETTAGLI IMPLEMENTATIVI (MAI TESTARE)
```php
// Configurazioni framework
test('appointment has correct fillable fields', function () {
    $appointment = new Appointment();
    expect($appointment->getFillable())->toContain('patient_id');
}); // STUPIDO E INUTILE!

// Proprietà tecniche
test('appointment uses correct table name', function () {
    $appointment = new Appointment();
    expect($appointment->getTable())->toBe('appointments');
}); // DETTAGLIO IMPLEMENTATIVO!

// Configurazioni cast
test('appointment casts dates correctly', function () {
    $appointment = new Appointment();
    expect($appointment->getCasts())->toHaveKey('starts_at');
}); // RESPONSABILITÀ DEL FRAMEWORK!
```

### Ambiti di Applicazione
- **Testing**: Concentrarsi su comportamenti, non su configurazioni
- **Sviluppo**: Implementare logiche di dominio, non solo CRUD
- **Architettura**: Separare logica di business da dettagli tecnici
- **Code Review**: Valutare valore di business, non solo correttezza tecnica

### Workflow
1. **Identificare** la logica di business da testare/implementare
2. **Ignorare** i dettagli implementativi
3. **Concentrarsi** sui comportamenti e regole aziendali
4. **Validare** che la logica produca valore per l'utente

### Motivazione
- **Valore**: La logica di business è ciò che distingue il software
- **Stabilità**: I test di logica di business sono più resistenti al cambiamento
- **Comprensibilità**: Rendono il codice più leggibile e documentato
- **Manutenibilità**: Facilitano modifiche e estensioni future

### Esempi di Logica di Business nel Dominio Sanitario
- Regole di prenotazione (orari, disponibilità, conflitti)
- Gestione emergenze e priorità
- Validazioni cliniche (durata visite, tipo trattamenti)
- Workflow autorizzazioni e conferme
- Regole di fatturazione e pagamento
- Policy di cancellazione e rimborso

## Ricorda Sempre
**La logica di business è il cuore del software. I dettagli implementativi sono solo il mezzo per realizzarla.**

---
**Ultimo aggiornamento**: Dicembre 2024
**Versione**: 1.0
**Compatibilità**: Laraxot SaluteOra, Business Logic Focus