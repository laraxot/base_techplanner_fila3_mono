# REGOLA CRITICA: PREVENZIONE ERRORI COMUNI

## ⚠️ ERRORI CRITICI DA EVITARE SEMPRE ⚠️

### 1. MAI USARE ->label() NEI COMPONENTI FILAMENT
```php
// ❌ ERRORE CRITICO - MAI FARE QUESTO
TextColumn::make('name')->label('Nome')
Action::make('save')->label('Salva')
Select::make('status')->label('Stato')

// ✅ CORRETTO - SEMPRE FARE QUESTO
TextColumn::make('name')  // Traduzione automatica
Action::make('save')      // Traduzione automatica
Select::make('status')    // Traduzione automatica
```

### 2. MAI USARE VALORI HARDCODED NEI TEST
```php
// ❌ ERRORE CRITICO - MAI FARE QUESTO
$this->assertEquals('primary', $listColor);
$this->assertEquals('heroicon-o-list-bullet', $listIcon);

// ✅ CORRETTO - SEMPRE FARE QUESTO
$this->assertIsString($listColor);
$this->assertIsString($listIcon);
$this->assertNotEmpty($listColor);
$this->assertNotEmpty($listIcon);
```

### 3. MAI USARE __() O trans() DIRETTAMENTE NEGLI ENUM
```php
// ❌ ERRORE CRITICO - MAI FARE QUESTO
public function getLabel(): string
{
    return __('ui::table-layout.'.$this->value.'.label');
}

// ✅ CORRETTO - SEMPRE FARE QUESTO
public function getLabel(): string
{
    return $this->transClass(self::class, $this->value.'.label');
}
```

### 4. SEMPRE STRUTTURA ESPANSA NEI FILE DI TRADUZIONE
```php
// ❌ ERRORE CRITICO - MAI FARE QUESTO
return [
    'list' => 'Lista',
    'grid' => 'Griglia',
];

// ✅ CORRETTO - SEMPRE FARE QUESTO
return [
    'list' => [
        'label' => 'Lista',
        'color' => 'primary',
        'icon' => 'heroicon-o-list-bullet',
        'description' => 'Visualizzazione a lista tradizionale',
        'tooltip' => 'Mostra elementi in formato lista',
        'helper_text' => 'Layout tradizionale con righe e colonne',
    ],
    'grid' => [
        'label' => 'Griglia',
        'color' => 'success',
        'icon' => 'heroicon-o-squares-2x2',
        'description' => 'Visualizzazione a griglia con card',
        'tooltip' => 'Mostra elementi in formato griglia',
        'helper_text' => 'Layout a griglia con card responsive',
    ],
];
```

### 5. SEMPRE USARE TRANS_TRAIT NEGLI ENUM
```php
// ❌ ERRORE CRITICO - MAI FARE QUESTO
enum MyEnum: string implements HasColor, HasIcon, HasLabel
{
    case VALUE1 = 'value1';
    // Manca use TransTrait;
}

// ✅ CORRETTO - SEMPRE FARE QUESTO
enum MyEnum: string implements HasColor, HasIcon, HasLabel
{
    use TransTrait;
    
    case VALUE1 = 'value1';
}
```

## CHECKLIST PREVENZIONE ERRORI

Prima di ogni commit, verificare:

### ✅ Codice Filament
- [ ] Nessun `->label()` nei componenti
- [ ] Nessun `->placeholder()` hardcoded
- [ ] Nessun `->helperText()` hardcoded
- [ ] Solo `->make('campo')` per i componenti

### ✅ Test Unitari
- [ ] Nessun valore hardcoded nei test
- [ ] Usare `assertIsString()` e `assertNotEmpty()`
- [ ] Testare comportamento, non valori specifici
- [ ] Testare type safety, non contenuto

### ✅ Enum
- [ ] `use TransTrait;` presente
- [ ] `transClass()` usato per traduzioni
- [ ] Nessun `__()` o `trans()` diretto
- [ ] `declare(strict_types=1);` presente

### ✅ File di Traduzione
- [ ] Struttura espansa per tutti i valori
- [ ] `label`, `color`, `icon` per ogni valore
- [ ] Chiavi in inglese, valori nella lingua target
- [ ] File posizionato correttamente

### ✅ Documentazione
- [ ] Esempi corretti senza `->label()`
- [ ] Pattern enum translation documentato
- [ ] Collegamenti bidirezionali aggiornati
- [ ] Data ultimo aggiornamento corretta

## PENALITÀ PER VIOLAZIONI

- ❌ Codice non conforme
- ❌ Difficoltà di manutenzione
- ❌ Inconsistenza nelle traduzioni
- ❌ Impossibilità di override
- ❌ Errori di type safety
- ❌ Test non affidabili

## RICORDA SEMPRE

1. **MAI** `->label('testo')`
2. **MAI** valori hardcoded nei test
3. **MAI** `__()` o `trans()` negli enum
4. **SEMPRE** struttura espansa nelle traduzioni
5. **SEMPRE** `use TransTrait;` negli enum
6. **SEMPRE** `transClass()` per traduzioni enum

## Ultimo Aggiornamento
2025-01-27 - Regola critica per prevenzione errori comuni
description:
globs:
alwaysApply: false
---
