---
description:
globs:
alwaysApply: false
---
# Best Practices Performance

## Database Optimization

1. **Query Optimization**
   - Utilizzare indici appropriati
   - Ottimizzare query complesse
   - Implementare eager loading
   - Evitare N+1 queries

2. **Schema Design**
   - Normalizzare database
   - Ottimizzare tipi di dati
   - Implementare partizionamento
   - Gestire relazioni efficientemente

3. **Caching**
   - Implementare query caching
   - Utilizzare Redis/Memcached
   - Cache risultati frequenti
   - Gestire cache invalidation

## Code Optimization

1. **PHP Optimization**
   - Utilizzare PHP 8.x
   - Ottimizzare autoloading
   - Implementare opcache
   - Monitorare memory usage

2. **Laravel Specific**
   - Utilizzare collections efficienti
   - Implementare chunking per grandi dataset
   - Ottimizzare service providers
   - Gestire queue jobs

3. **Frontend**
   - Minificare assets
   - Implementare lazy loading
   - Ottimizzare bundle size
   - Utilizzare CDN

## API Performance

1. **Response Optimization**
   - Implementare pagination
   - Utilizzare compression
   - Ottimizzare payload
   - Implementare caching

2. **Rate Limiting**
   - Configurare rate limits
   - Implementare throttling
   - Monitorare API usage
   - Gestire burst traffic

## Caching Strategy

1. **Application Cache**
   - Cache dati statici
   - Implementare cache tags
   - Gestire cache versioning
   - Monitorare hit rates

2. **Browser Cache**
   - Configurare cache headers
   - Implementare ETags
   - Gestire cache busting
   - Ottimizzare static assets

## Queue Management

1. **Job Processing**
   - Implementare queue workers
   - Configurare job priorities
   - Gestire failed jobs
   - Monitorare queue length

2. **Background Tasks**
   - Spostare task pesanti in background
   - Implementare retry logic
   - Gestire timeouts
   - Monitorare job execution

## Monitoring

1. **Performance Metrics**
   - Monitorare response time
   - Tracciare memory usage
   - Monitorare CPU usage
   - Implementare APM

2. **Logging**
   - Loggare performance issues
   - Monitorare slow queries
   - Tracciare errori
   - Implementare alerting

## Infrastructure

1. **Server Optimization**
   - Configurare web server
   - Ottimizzare PHP-FPM
   - Implementare load balancing
   - Gestire resources

2. **Database Server**
   - Ottimizzare configurazione
   - Implementare replication
   - Gestire connections
   - Monitorare performance

## Frontend Performance

1. **Asset Optimization**
   - Minificare CSS/JS
   - Ottimizzare immagini
   - Implementare lazy loading
   - Utilizzare CDN

2. **Rendering**
   - Ottimizzare DOM
   - Implementare virtual scrolling
   - Gestire reflows
   - Monitorare FPS

## Best Practices Generali

1. **Code Quality**
   - Mantenere codice pulito
   - Evitare code smells
   - Implementare SOLID
   - Fare code review

2. **Testing**
   - Implementare performance tests
   - Monitorare regression
   - Testare under load
   - Benchmark critical paths

3. **Documentation**
   - Documentare performance
   - Mantenere metrics
   - Aggiornare docs
   - Condividere best practices

## Deployment

1. **CI/CD**
   - Automatizzare deployment
   - Implementare zero-downtime
   - Gestire rollbacks
   - Monitorare deployment

2. **Environment**
   - Configurare production
   - Gestire secrets
   - Implementare backup
   - Monitorare health

## Security vs Performance

1. **Balancing**
   - Valutare tradeoffs
   - Implementare security
   - Ottimizzare performance
   - Monitorare impact

2. **Optimization**
   - Testare security
   - Verificare performance
   - Documentare decisions
   - Review regolarmente
