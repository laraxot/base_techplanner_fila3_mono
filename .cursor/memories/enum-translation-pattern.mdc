# MEMORIA CRITICA: ENUM TRANSLATION PATTERN CON transClass()

## REGOLA ASSOLUTA PER ENUM
**SEMPRE** usare `transClass()` negli enum per le traduzioni. MAI usare `__()` o `trans()` direttamente.

## PATTERN CORRETTO (SEMPRE USARE)
```php
use Modules\Xot\Filament\Traits\TransTrait;

enum MyEnum: string implements HasColor, HasIcon, HasLabel
{
    use TransTrait;
    
    case VALUE1 = 'value1';
    case VALUE2 = 'value2';

    public function getLabel(): string
    {
        return $this->transClass(self::class, $this->value.'.label');
    }

    public function getColor(): string
    {
        return $this->transClass(self::class, $this->value.'.color');
    }

    public function getIcon(): string
    {
        return $this->transClass(self::class, $this->value.'.icon');
    }
}
```

## PATTERN ERRATO (MAI FARE)
```php
// ❌ ERRATO - MAI USARE __() O trans() DIRETTAMENTE
public function getLabel(): string
{
    return __('ui::enum.'.$this->value.'.label');  // ❌ ERRORE CRITICO
}
```

## MOTIVAZIONE
1. Type Safety con transClass()
2. Namespace automatico
3. Consistenza del progetto
4. Manutenibilità
5. Possibilità di override

## RICORDA SEMPRE
- SEMPRE `use TransTrait;` negli enum
- SEMPRE `$this->transClass(self::class, $this->value.'.chiave')`
- MAI `__()` o `trans()` direttamente negli enum
- SEMPRE struttura espansa nei file di traduzione

## ULTIMO AGGIORNAMENTO
2025-01-27 - Memoria critica per enum translation pattern
description:
globs:
alwaysApply: false
---
